{"slug":"web-workers","title":"Web Workers - Bringing Multithreading to the Front-End","date":"2019-08-14T00:00:00.000Z","excerpt":"Improve your client-side performance by breaking heavy operations into multiple threads - backend style.","tags":["Front-End","Guide","JavaScript"],"html":"<p>In times of complex, feature-filled front-ends, we often get reports of freezes, frame drops, or overall slugginess in our apps. This is due to JavaScript’s default behavior - a single thread is responsible for the interface, animations, and whatever CPU-intensive logic or I/O your app is doing.</p>\n<p>This is because when JavaScript was created, back in 1995, it was never meant to be such a capable language, powering complex systems and heavy loads.</p>\n<p>Usually, the best idea is to perform CPU-intensive work on the back-end, usually with a more performant language. This makes the experience similar to everyone, as it won’t require much power from the user’s machine. However, there are cases where we need to do this on the front-end, such as (but not limited to):</p>\n<ul><li>Heavy filtering of data;</li>\n<li>Conversions (like printing data to a PDF);</li>\n<li>Deserializing huge and complex objects or arrays;</li>\n<li>Complex calculations, like 3D objects for example.</li></ul>\n<p>All of these heavy operations would cause the main thread - responsible for drawing your interface quickly and playing your animations smoothly - to not be that smooth.</p>\n<p>This is where our star of the day comes in - Web Workers.</p>\n<h2>What do these Web Workers do?</h2>\n<p>Imagine you are the boss (main thread). You call one of your employees (a worker) and tell them to do a specific task (a function). Then they go back to their own room (another thread) to do what you asked. In the meantime, you can do whatever you want, and as soon as your employee finishes the task, it comes back to you with the result. Now, in real life things aren’t that simple, but you get the main idea, right? </p>\n<p>Let’s make something clear: Web Workers are an universal JavaScript feature, not limited to any specific framework. <a href=\"https://caniuse.com/#search=Worker\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">It even works on IE10+</a>!!! Pretty much the only requirement is that the worker logic stays in a different js file (worker.js, for example).</p>\n<h2>Let’s try it out</h2>\n<p><a href=\"https://github.com/mdn/simple-web-worker\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Mozilla Developer Network (MDN)</a> has a great, simple example of how to use them. I’ll explain it below:</p>\n<p>First of all, on our main.js file, we need to create our Worker object, passing our Worker file as a parameter:</p>\n<div class=\"code-block svelte-qgch0c\"><div class=\"filename svelte-qgch0c\">main.js</div>\n\t<div class=\"lang svelte-qgch0c\">javascript</div>\n\t<pre class=\"language-javascript\"><!-- HTML_TAG_START --><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>Worker<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//just to make sure our browser supports it</span>\n\t<span class=\"token keyword\">const</span> myWorker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"worker.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>The main thread is able to communicate with workers using the <code>postMessage</code> and <code>onMessage</code> functions.</p>\n<p>Let’s make our worker multiply two numbers for us!</p>\n<div class=\"code-block svelte-qgch0c\"><div class=\"filename svelte-qgch0c\">main.js</div>\n\t<div class=\"lang svelte-qgch0c\">javascript</div>\n\t<pre class=\"language-javascript\"><!-- HTML_TAG_START --><code class=\"language-javascript\"><span class=\"token comment\">// we pass an array with all the parameters we want</span>\nmyWorker<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">456</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>And then listen to a message sent back from our worker:</p>\n<div class=\"code-block svelte-qgch0c\"><div class=\"filename svelte-qgch0c\">main.js</div>\n\t<div class=\"lang svelte-qgch0c\">javascript</div>\n\t<pre class=\"language-javascript\"><!-- HTML_TAG_START --><code class=\"language-javascript\">myWorker<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    result<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>We are now successfully passing and receiving data to/from our worker. Now, for the worker.js file:</p>\n<div class=\"code-block svelte-qgch0c\"><div class=\"filename svelte-qgch0c\">worker.js</div>\n\t<div class=\"lang svelte-qgch0c\">javascript</div>\n\t<pre class=\"language-javascript\"><!-- HTML_TAG_START --><code class=\"language-javascript\"><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>Very simple, right? The multiplication was done in a different thread, and therefore did not interfere with our main thread. Keep in mind though, that <strong>setting up a Worker, starting another thread and passing parameters still take up minor resources from the main thread</strong>. For simple examples like this, performance will likely be worse than before. <strong>Web Workers are made for heavy tasks, so don’t just use them everywhere</strong>.</p>\n<h2>Just a last little thing…</h2>\n<p>When trying it out locally, you may find that your code… does not work. Neither Chrome nor Firefox allow running worker files from a local file system. This means that you have to be running your website in some sort of HTTP server in order for it to work.</p>\n<p>If you have Python installed (most Linux or MacOS systems already do), just run: <code>python -m SimpleHTTPServer 8000</code> and you’re good to go. You can access your files through localhost:8000.</p>\n<p>If you don’t, you can also use <a href=\"https://chrome.google.com/webstore/detail/web-server-for-chrome/ofhbbkphhbklhfoeikjpcbhemlocgigb\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">this Chrome extension</a> or any other method you prefer.</p>\n<p>Thanks for reading!</p>","css":{"code":".code-block.svelte-qgch0c.svelte-qgch0c{display:block;position:relative;background-color:var(--code-background-color);color:var(--code-text-color);font-family:var(--mono-font);font-size:1rem;line-height:1.33em;border-radius:8px;box-shadow:var(--card-shadow);padding:30px 15px;margin:30px 0}.code-block.svelte-qgch0c pre{overflow-x:auto;scrollbar-color:var(--primary-color) var(--scrollbar-track-color);scrollbar-width:thin;padding-bottom:5px}.code-block.svelte-qgch0c pre::-webkit-scrollbar{height:8px}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb{background:var(--primary-color)}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb:hover{background:var(--primary-light-color)}.code-block.svelte-qgch0c .lang.svelte-qgch0c{position:absolute;right:0;top:-15px;background:inherit;border-radius:8px;padding:5px 10px;z-index:2;font-size:0.85em}.code-block.svelte-qgch0c .filename.svelte-qgch0c{background:inherit;border-top-left-radius:8px;border-top-right-radius:8px;margin-bottom:-2px;padding:5px 10px;position:absolute;left:0px;top:-15px;z-index:1}","map":null},"head":"","readingTime":"5 min read","relatedPosts":[{"slug":"angular-pwa-how-to","title":"How to transform your Angular 6+ app into a PWA","date":"2019-03-10T00:00:00.000Z","excerpt":"Make your Angular app work like a native app on phones and desktop.","tags":["Angular","PWA","Guide","Front-End","JavaScript"],"html":"<p>Recently, I’ve converted my Angular 6 app into a PWA, allowing it to work offline and work like a native app on phones and desktop.</p>\n<p>Although there are many tutorials out there about turning Angular apps into PWAs, I’ve decided to write one simply because I faced some issues that were a bit hard to solve, so if you end up having them you don’t lose as much time as I did!</p>\n<div class=\"callout-block info svelte-1pi2pyj\"><div class=\"icon-wrapper svelte-1pi2pyj\"><svg width=\"100%\" height=\"100%\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M12 11.5V16.5\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path><path d=\"M12 7.51L12.01 7.49889\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path><path d=\"M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path></svg></div>\n\tThis tutorial assumes you are using Angular CLI. Possible issues are listed at the end of the tutorial.\n\n</div>\n<h2>Step 1. Installing the Angular PWA dependencies</h2>\n<p>This is the easiest part. Run <code>ng add @angular/pwa</code> in the root of your project (the folder where <code>package.json</code> is. The CLI will automagically add <code>@angular/pwa</code> and <code>@angular/service-worker</code> as dependencies in your package.json file, and add some placeholder icons in your <code>assets</code> folder.</p>\n<p>Besides that, it will create a file named <code>ngsw-config.json</code> in your root folder, as well as a <code>manifest.json</code> in your /src folder, and reference both in <code>index.html</code> and <code>app.module.ts</code>. These files are important as you’ll be using them to configure your PWA later.</p>\n<h2>Step 2. Setting up your manifest.json</h2>\n<p>The <code>manifest.json</code> file is the one that tells the browser/OS about your app. You can set the full and short names, theme color, icons, and more. <a href=\"https://developers.google.com/web/fundamentals/web-app-manifest/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">You can find more about its settings here.</a></p>\n<p>Don’t forget to update the auto-generated icons on <code>/assets/icons</code> folder! These are necessary so that your app icon shows up for devices of all DPI settings.</p>\n<h2>Step 3. Setting up ngsw-config.json</h2>\n<p>This file is the one that can configure how your PWA works. You can set up different installation behaviors, as well as handle cache updates. <a href=\"https://angular.io/guide/service-worker-config\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">The Angular documentation has got all options covered here.</a></p>\n<h2>Step 4. Test it out!</h2>\n<p>If you want to test out your app’s new PWA capabilities locally, <code>ng serve</code> won’t help you. Instead, you can run a web server in your machine easily by installing the <code>http-server</code> package from npm:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">shell</div>\n\t<pre class=\"language-shell\"><!-- HTML_TAG_START --><code class=\"language-shell\"><span class=\"token function\">npm</span> i http-server -g</code><!-- HTML_TAG_END --></pre>\n</div>\n<p>Then, compile your app in production mode:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">shell</div>\n\t<pre class=\"language-shell\"><!-- HTML_TAG_START --><code class=\"language-shell\">ng build --prod</code><!-- HTML_TAG_END --></pre>\n</div>\n<p>And finally, start the web server:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">shell</div>\n\t<pre class=\"language-shell\"><!-- HTML_TAG_START --><code class=\"language-shell\">http-server -p <span class=\"token number\">8080</span> -c-1 dist/<span class=\"token operator\">&lt;</span>project-name<span class=\"token operator\">></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>Your app should be up and running on <code>http://localhost:8080/</code> (or whichever port you chose). How do you know it’s a PWA? There are a few ways:</p>\n<h3>Check if the service worker is being registered</h3>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/angular-pwa-how-to/Service-Workers-1.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/angular-pwa-how-to/Service-Workers-1.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/angular-pwa-how-to/Service-Workers-1.png\" alt=\"Registered Service Worker\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->On dev console > Application > Service Workers, there should be a registered service worker for your app.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<h3>Use Chrome’s Audits feature to validate it as a PWA</h3>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/angular-pwa-how-to/Audits.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/angular-pwa-how-to/Audits.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/angular-pwa-how-to/Audits.png\" alt=\"Audits\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->On dev console > Audits, test it for Progressive Web Apps.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/angular-pwa-how-to/Passed-Audits.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/angular-pwa-how-to/Passed-Audits.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/angular-pwa-how-to/Passed-Audits.png\" alt=\"Audits passed\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->If everything went alright, you should see the highlighted results on the 'Passed audits' section.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<p>You may see some errors regarding the app not running over HTTPS. Don’t worry, that’s only because it’s running locally.</p>\n<h2>Step 5. Install it!</h2>\n<p>On Chrome, you may also see the option to install the app appear in the URL bar:</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/angular-pwa-how-to/Clipboard_2019-10-27-18-09-45.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/angular-pwa-how-to/Clipboard_2019-10-27-18-09-45.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/angular-pwa-how-to/Clipboard_2019-10-27-18-09-45.png\" alt=\"Chrome prompts you to install PWA\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  \n</picture>\n<p>After this, the app should already open on a separate window, and show up on your OS’s installed apps list!</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/angular-pwa-how-to/Clipboard_2019-10-27-18-11-28.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/angular-pwa-how-to/Clipboard_2019-10-27-18-11-28.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/angular-pwa-how-to/Clipboard_2019-10-27-18-11-28.png\" alt=\"Installed PWA on OS&#39; dock\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->Notice the PWA's own icon on my OS' dock! Success!<!-- HTML_TAG_END --></figcaption>\n</picture>\n<h2>Issues Encountered</h2>\n<p>Even though the proccess is quite straight-forward, I still faced some issues when running it in my app. They were because of Angular tools versions, and I probably had these issues because I’m still running an Angular 6 app (and Angular 7 is out as of now).</p>\n<h3>The <code>ng add @angular/pwa</code> command doesn’t create relevant files</h3>\n<p>This was a <a href=\"https://github.com/angular/angular-cli/issues/11914\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">reported bug</a> on the CLI. I had a bugged version (6.0.8) installed on my app. I updated it by running</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">shell</div>\n\t<pre class=\"language-shell\"><!-- HTML_TAG_START --><code class=\"language-shell\"><span class=\"token function\">npm</span> uninstall @angular/cli --save\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> @angular/cli@latest --save</code><!-- HTML_TAG_END --></pre>\n</div>\n<p>It updated itself to version 7.1.4 and worked flawlessly.</p>\n<p><em>Notice: this is related to the local cli version, the one displayed on your <code>package.json</code> file, not the global one installed in your machine.</em></p>\n<h3>Failed to register a ServiceWorker: A bad HTTP response code (404) was received when fetching the script.</h3>\n<p>This error shows up on the browser console after opening the app running on http-server. It happens because, when running <code>ng build --prod</code>, Angular isn’t sending the service worker’s files along with the ones from the app. You can confirm this by searching for the <code>ngsw-worker.js</code> file on the <code>/dist</code> folder of your app. If it’s not there, then you have this issue.</p>\n<p>This one took me the longest to find out. Another bug related to outdated versions of Angular tools. Simply changing <code>@angular-devkit/build-angular</code> version in devDependencies to <code>~0.10.0</code> solved it.</p>\n<h2>Finalizing</h2>\n<p>I hope you had success on setting up your PWA! Remember that, when published, it will only work if you serve your app through HTTPS.</p>\n<p>Thanks for reading!</p>","css":{"code":".callout-block.svelte-1pi2pyj.svelte-1pi2pyj{--bg-color:var(--callout-background-color);--accent-color:transparent;margin:40px 0 30px;padding:25px 25px;border-top-right-radius:10px;border-bottom-right-radius:10px;background:var(--bg-color);color:var(--text-color);border-left:4px solid var(--accent-color);position:relative}.callout-block.svelte-1pi2pyj .icon-wrapper.svelte-1pi2pyj{position:absolute;width:50px;height:50px;top:0;left:0;transform:translate(calc(-50% - 1.5px), -50%);background:var(--post-page-background-color);padding:8px;border-radius:50%;fill:var(--accent-color);color:var(--accent-color)}.callout-block.info.svelte-1pi2pyj.svelte-1pi2pyj{--bg-color:var(--callout-info-background-color);--accent-color:var(--callout-info-accent-color)}.callout-block.warning.svelte-1pi2pyj.svelte-1pi2pyj{--bg-color:var(--callout-warning-background-color);--accent-color:var(--callout-warning-accent-color)}.callout-block.error.svelte-1pi2pyj.svelte-1pi2pyj{--bg-color:var(--callout-error-background-color);--accent-color:var(--callout-error-accent-color)}.callout-block.success.svelte-1pi2pyj.svelte-1pi2pyj{--bg-color:var(--callout-success-background-color);--accent-color:var(--callout-success-accent-color)}\n.code-block.svelte-qgch0c.svelte-qgch0c{display:block;position:relative;background-color:var(--code-background-color);color:var(--code-text-color);font-family:var(--mono-font);font-size:1rem;line-height:1.33em;border-radius:8px;box-shadow:var(--card-shadow);padding:30px 15px;margin:30px 0}.code-block.svelte-qgch0c pre{overflow-x:auto;scrollbar-color:var(--primary-color) var(--scrollbar-track-color);scrollbar-width:thin;padding-bottom:5px}.code-block.svelte-qgch0c pre::-webkit-scrollbar{height:8px}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb{background:var(--primary-color)}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb:hover{background:var(--primary-light-color)}.code-block.svelte-qgch0c .lang.svelte-qgch0c{position:absolute;right:0;top:-15px;background:inherit;border-radius:8px;padding:5px 10px;z-index:2;font-size:0.85em}.code-block.svelte-qgch0c .filename.svelte-qgch0c{background:inherit;border-top-left-radius:8px;border-top-right-radius:8px;margin-bottom:-2px;padding:5px 10px;position:absolute;left:0px;top:-15px;z-index:1}\npicture.svelte-1gy5t1o.svelte-1gy5t1o{position:relative;width:100%;height:100%}picture.svelte-1gy5t1o img.svelte-1gy5t1o{width:100%;height:100%}","map":null},"head":""},{"slug":"microfrontends","title":"Micro Frontends: Solving the Legacy JavaScript Problem","date":"2019-03-17T00:00:00.000Z","excerpt":"Finally a way to modernize that legacy project you keep complaining about!","tags":["Front-End","JavaScript","Guide"],"html":"<p>It’s a running joke in the development community that if a JS programmer goes into a coma for 6 months, he will need to learn everything again by the time he wakes up. This is a consequence of JavaScript’s open, decentralized nature. It’s both a blessing and a curse.</p>\n<p>All the time there are new frameworks and libraries meant to make it easier to develop in JS, at least for a specific use. Sometimes they are effectively better, sometimes they just bring a new workflow, and as a developer it can be quite fun to learn them and explore new paradigms.</p>\n<p>However, in the “enterprise world”, reality is different. We build big, complex applications that usually rely on a framework’s properties to work the way they do. Recent frameworks like React, Vue and Angular offer an easy way to break an application in smaller, more independent chunks that can be maintained separately, but they still rely on the main framework’s version.</p>\n<p>Front-end development is becoming more and more like back-end development, with more complex architectures. Naturally, the concept of microservices was brought over and is being called Micro Frontends.</p>\n<h2>What do Micro Frontends consist of?</h2>\n<p>First, we must define what monolithic frontends are. You probably work on one of them, since they are basically every web app that is made with a specific framework and version, and only works by itself without resorting to redirects and iframes. Hence the monolith-derived name.</p>\n<p>Micro Frontends, however, can be made of several pieces of different technologies - all in a “central” app that puts the puzzle pieces together.</p>\n<p>Since frameworks like React and Angular are already very popular, the concept of componentizing our apps is well known, and it’s basically what Micro Frontends consist of. It uses the Custom Elements API, a web standard that is being implemented by all major browsers (with polyfills for older ones!), to provide a common ground between different components written in Angular, React, Vue, or even good old pure JS!</p>\n<p>To do that, they work in a similar way modern frameworks do, with an Input/Output pattern and a very simple way to import them into the parent’s HTML. We’ll see more about this later.</p>\n<h2>How does that solve the legacy problem?</h2>\n<p>You’ve probably already worked on a big app that was made years ago, and used “ancient” technology. If you haven’t, lucky you! But in many enterprise environments, working with JQuery, KnockoutJS, AngularJS (v1.x) or even older JS technologies is the norm. While usually there is willingness to update the tech stack in order to gain more productivity and performance, it is usually not feasible to update an entire behemoth all at once. Add the fact that companies and their products must move fast with features and changes, and the chance to update is close to zero.</p>\n<p>One alternative is to create a second app with a new technology and make the change in multiple steps, with routes handling which app is to be shown. This however, has many issues:</p>\n<ul><li>You have to duplicate many things, like fixed menus, authentication handling, and all the base architecture. Even worse than duplicating is <strong>maintaining</strong> both of them afterwards;</li>\n<li>The user experience will be severely harmed when your app redirects to a different one frequently;</li>\n<li>When the new technology you use becomes obsolete, you’ll have to deal with the problem all over again.</li></ul>\n<p>Other alternative is to use iframes, which brings a lot of problems since communication between both pages is not very straightforward and the experience feels clunky. Not very good.</p>\n<p>However, when using Micro Frontends, you are able to:</p>\n<ul><li>Migrate technologies in small steps:</li>\n<li>Communication between both technologies is easy;</li>\n<li>The user does not notice the use of two different stacks - they all merge seamlessly in the same experience;</li>\n<li>There is no need to maintain more than one version of a component;</li>\n<li>Encourages good use of components and code reuse.</li></ul>\n<p>At my job, we had our main application written in AngularJS, and since it was a pretty huge application, migrating to a newer stack was just not feasible. We then had a project that included a complete overhaul of the design of the application, we felt it was a good time to use newer technologies.</p>\n<p>Since we had a side project written in Angular 6 and most of us had knowledge of this framework, we decided to write new components for our main app in Angular 7. While the plan was to update the entire app, rewriting it entirely and publishing all at once would bring a lot of problems.</p>\n<p>We then decided to use the Micro Frontends approach, rewriting our pages/components one by one and releasing it in “packages”. We did that by creating Custom Elements in Angular 7 and integrating them with the older AngularJS app. Since we would be modernizing entire pages at once, there wouldn’t be many changes on the older app. The tried-and-tested older app was still responsible for managing routes and authentication, and would just display our newer components as they were built. <em>This proved to be a successful approach that allowed us to both modernize our tech stack, minimize user impact, we kept delivering value to our customers and, since the project was broken in smaller pieces, we had flexibility to tackle other projects in between.</em></p>\n<h2>How do they work in practice?</h2>\n<p>For this article, I am going to create a custom element with Angular 7 and use it in a simple html file. I’ve created a sample app on GitHub. <a href=\"https://github.com/matfantinel/custom-elements-sample\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">You can check the full code here.</a></p>\n<h3>Creating the Custom Element</h3>\n<p>First, we create a new Angular 7 app:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">shell</div>\n\t<pre class=\"language-shell\"><!-- HTML_TAG_START --><code class=\"language-shell\">ng new angular-elements-sample --prefix custom</code><!-- HTML_TAG_END --></pre>\n</div>\n<p>The CLI will ask you for some settings, you can choose whatever you like. Since we’re just using Custom Components in this example, I chose not to apply Angular routing.</p>\n<p>Then, we need to add the Angular package that brings Custom Elements support:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">shell</div>\n\t<pre class=\"language-shell\"><!-- HTML_TAG_START --><code class=\"language-shell\">ng <span class=\"token function\">add</span> @angular/elements</code><!-- HTML_TAG_END --></pre>\n</div>\n<p>Now, on tsconfig.json file, change target to “es2015”.</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">json</div>\n\t<pre class=\"language-json\"><!-- HTML_TAG_START --><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"compileOnSave\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    ...\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"es2015\"</span><span class=\"token punctuation\">,</span>\n    ...\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>Then, create a new component in your app:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">shell</div>\n\t<pre class=\"language-shell\"><!-- HTML_TAG_START --><code class=\"language-shell\">ng g component button</code><!-- HTML_TAG_END --></pre>\n</div>\n<p>On this component, we should set its encapsulation to ShadowDom. This means that its styles will be limited to itself, and styles from the parent application won’t apply to the child component, or vice-versa. Also, we’ll be declaring an Input() property, that the element will receive from the parent, and a CustomEvent, a way to communicate events with other applications/components in the same page.</p>\n<p>Below is the full component Typescript code:</p>\n<div class=\"code-block svelte-qgch0c\"><div class=\"filename svelte-qgch0c\">button.component.ts</div>\n\t<div class=\"lang svelte-qgch0c\">typescript</div>\n\t<pre class=\"language-typescript\"><!-- HTML_TAG_START --><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Component<span class=\"token punctuation\">,</span> OnInit<span class=\"token punctuation\">,</span> ViewEncapsulation<span class=\"token punctuation\">,</span> Input<span class=\"token punctuation\">,</span> ElementRef <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/core'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Component</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  selector<span class=\"token operator\">:</span> <span class=\"token string\">'custom-button'</span><span class=\"token punctuation\">,</span>\n  templateUrl<span class=\"token operator\">:</span> <span class=\"token string\">'./button.component.html'</span><span class=\"token punctuation\">,</span>\n  styleUrls<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'./button.component.scss'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  encapsulation<span class=\"token operator\">:</span> ViewEncapsulation<span class=\"token punctuation\">.</span>ShadowDom\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ButtonComponent</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">OnInit</span> <span class=\"token punctuation\">&#123;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Input</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> label <span class=\"token operator\">=</span> <span class=\"token string\">'Default Label'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> clicksCount<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  htmlElement<span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">public</span> hostElement<span class=\"token operator\">:</span> ElementRef<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>htmlElement <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hostElement<span class=\"token punctuation\">.</span>nativeElement <span class=\"token keyword\">as</span> HTMLElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function\">ngOnInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token punctuation\">&#125;</span> \n\n  <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clicksCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> action <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CustomEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'action'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n      detail<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        clicksCount<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clicksCount\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>htmlElement<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>The HTML template is very simple:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">html</div>\n\t<pre class=\"language-html\"><!-- HTML_TAG_START --><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">(click)</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>handleClick()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>&#123;&#123; label &#125;&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>Then, we must declare our Custom Element in our app.module.ts file:</p>\n<div class=\"code-block svelte-qgch0c\"><div class=\"filename svelte-qgch0c\">app.module.ts</div>\n\t<div class=\"lang svelte-qgch0c\">typescript</div>\n\t<pre class=\"language-typescript\"><!-- HTML_TAG_START --><code class=\"language-typescript\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">NgModule</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  declarations<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token operator\">...</span>\n    ButtonComponent<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  entryComponents<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    ButtonComponent\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  providers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  bootstrap<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppModule</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> injector<span class=\"token operator\">:</span> Injector<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function\">ngDoBootstrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//Declares our component's Custom Element</span>\n    <span class=\"token comment\">//Then defines it in the DOM so it can be used in other projects</span>\n    <span class=\"token keyword\">const</span> buttonElement <span class=\"token operator\">=</span> <span class=\"token function\">createCustomElement</span><span class=\"token punctuation\">(</span>ButtonComponent<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> injector<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>injector <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    customElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'custom-button'</span><span class=\"token punctuation\">,</span> buttonElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>To make it easier to use our component in another app, we can use some script magic to concat all the .js files produced by <code>ng build --prod</code> into a single properly-named file. To do that, I created the following script in package.json’s script session:</p>\n<div class=\"code-block svelte-qgch0c\"><div class=\"filename svelte-qgch0c\">package.json</div>\n\t<div class=\"lang svelte-qgch0c\">json</div>\n\t<pre class=\"language-json\"><!-- HTML_TAG_START --><code class=\"language-json\"><span class=\"token property\">\"package\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ng build --prod &amp;&amp; cat ./dist/runtime.js ./dist/polyfills.js ./dist/scripts.js ./dist/main.js > CustomElementsSample.js\"</span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>If you’re on a Windows system, you won’t have access to cat. In that case install <code>jscat</code> from npm and change the cat command to jscat.</p>\n<p>For that to work though, we need to disable output hashing on the angular.json file. This makes sure that the generated file names are always the same. Just change <code>&quot;outputHashing&quot;: &quot;all&quot;</code> to <code>&quot;outputHashing&quot;: &quot;none&quot;</code>.</p>\n<p>Now we have a single js file that contains our custom element, and we can use it in our sample legacy app!</p>\n<h3>Using the Custom Element</h3>\n<p>Check this sample html file:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">html</div>\n\t<pre class=\"language-html\"><!-- HTML_TAG_START --><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>This is a legacy app that uses Angular 7 custom elements<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../angular-elements-sample/CustomElementsSample.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span>\n            button &#123;\n                background-color: red;\n                color: white;\n            &#125;\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>custom-button</span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Legacy app label<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>custom-button</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>counter<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span> clicks!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span>\n            const button = document.querySelector('custom-button');\n            button.addEventListener('action', event => &#123;\n                document.getElementById('counter').innerHTML = event.detail.clicksCount;\n            &#125;);\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>You can see that we are successfully being able to listen for events, pass the label parameter, and that the button style from the html does not apply to the component. Success!</p>\n<h2>Caveats</h2>\n<p>As with all things, there are some disadvantages in this approach:</p>\n<h3>Browser Support</h3>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/microfrontends/Browser-Support.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/microfrontends/Browser-Support.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/microfrontends/Browser-Support.png\" alt=\"Browser support table\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->You can check this information on the <a href='https://caniuse.com/custom-elementsv1' target='_blank'>Can I Use</a> website.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<p>As of March 2019, only Firefox, Chrome and Chromium-based browsers fully support custom elements, while Safari implements them only partially. However, <a href=\"https://github.com/webcomponents/custom-elements\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">there’s a polyfill available</a> to bring support to older browsers.</p>\n<h3>JS Bundle size</h3>\n<p>Since you’re running components using other frameworks, you’ll still have to load them on the user’s side. If your app uses AngularJS, Angular, JQuery and React in different components, you’ll have to load all their runtimes before the app is fully functional. In this case, your better option is to minimize the bundle as much as possible, and use <a href=\"/what-are-pwas-and-why-should-i-care-about-them\">Service Workers and PWA capabilities</a> to improve caching on your app.</p>\n<h3>Communication between components is not as good as within the same framework</h3>\n<p>This should not be much of an issue unless you break a page into too many components with different technologies. Even then, communication with other components is very doable, just not as good as it would be between Angular-Angular or React-React components.</p>\n<h2>Wrapping up</h2>\n<p>Micro Frontends are a consequence of the complexicity that front-end has developed in the last few years. It is very good to see technology move forward, and we may get lost amidst so much change, so it is good to know that we don’t have to be afraid to not migrate our apps to the latest and greatest. They bring us the advantages of newer frameworks while minimizing the disadvantages.</p>\n<p>Thanks for reading!</p>","css":{"code":".code-block.svelte-qgch0c.svelte-qgch0c{display:block;position:relative;background-color:var(--code-background-color);color:var(--code-text-color);font-family:var(--mono-font);font-size:1rem;line-height:1.33em;border-radius:8px;box-shadow:var(--card-shadow);padding:30px 15px;margin:30px 0}.code-block.svelte-qgch0c pre{overflow-x:auto;scrollbar-color:var(--primary-color) var(--scrollbar-track-color);scrollbar-width:thin;padding-bottom:5px}.code-block.svelte-qgch0c pre::-webkit-scrollbar{height:8px}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb{background:var(--primary-color)}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb:hover{background:var(--primary-light-color)}.code-block.svelte-qgch0c .lang.svelte-qgch0c{position:absolute;right:0;top:-15px;background:inherit;border-radius:8px;padding:5px 10px;z-index:2;font-size:0.85em}.code-block.svelte-qgch0c .filename.svelte-qgch0c{background:inherit;border-top-left-radius:8px;border-top-right-radius:8px;margin-bottom:-2px;padding:5px 10px;position:absolute;left:0px;top:-15px;z-index:1}\npicture.svelte-1gy5t1o.svelte-1gy5t1o{position:relative;width:100%;height:100%}picture.svelte-1gy5t1o img.svelte-1gy5t1o{width:100%;height:100%}","map":null},"head":""},{"slug":"css-scroll-snapping","title":"CSS Scroll Snapping - Improve Scrolling without JS","date":"2020-08-03T00:00:00.000Z","excerpt":"Learn how to snap scrolling positions with CSS only.","tags":["Front-End","CSS","Guide"],"html":"<p>CSS is evolving constantly and the past few years have brought us amazing stuff. It is getting easier to make smooth and complete experiences without having to use JavaScript at all. Case in point: Scroll Snapping.</p>\n<p>It is an easy way to guarantee that users will scroll to the correct portion of your page or of a container. Picture a landing page that is easily swipable/scrollable between sections, or swipable cards. Take in mind how Android’s Recent Apps screen works, for example:</p>\n<p><img src=\"/images/posts/css-scroll-snapping/android-scroll-snapping.gif\" alt=\"Android's Recent Apps screen has scroll mapping between app cards\"></p>\n<p>You can see that Android never allows the end of a scroll to be in a place between cards. There’s a certain threshold that determines that the scroll will snap into the nearest card and put it in the center. All that while still keeping scrolling momentum, allowing you to go from one edge of the list to another in a single scroll if you want to.</p>\n<p>Until recently, you’d have to resort to JavaScript code to make a similar behavior on the web. But now, all you need is CSS, which makes things more performant, consistent and reliable! Browser support is already pretty good, with all major browser engines already supporting it fully. Check out browser support on <a href=\"https://caniuse.com/#feat=css-snappoints\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">caniuse.com</a>.</p>\n<p>I’ve recently added scroll snapping to my own website. You can check it out on the “Work Experience” section in the <a href=\"https://fantinel.dev\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Home page</a>. It’s specially great on mobile!</p>\n<h2>How?</h2>\n<p>There are two main CSS properties that make the magic happen, one for the parent element, and one for its children.</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">css</div>\n\t<pre class=\"language-css\"><!-- HTML_TAG_START --><code class=\"language-css\"><span class=\"token selector\">.parent</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">scroll-snap-type</span><span class=\"token punctuation\">:</span> y mandatory<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.child</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">scroll-snap-align</span><span class=\"token punctuation\">:</span> start<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code><!-- HTML_TAG_END --></pre>\n</div>\n<h3>scroll-snap-type</h3>\n<p>This property tells the browser that the parent element uses scroll snapping. We are given some options on how snapping must work. <code>y</code> indicates that the scroll happens vertically, while <code>x</code> means horizontally. We can also pass the <code>mandatory</code> and <code>proximity</code> options. </p>\n<p>We use <code>mandatory</code> to tell that the browser <em>must</em> snap to a snap point when the user stops scrolling. This means that if the next snap point becomes visible on the screen and scrolling stops, the browser will automatically snap to the next one. In the other end, with <code>proximity</code>, things are less strict. The browser will only snap to the next snap point if scrolling gets past a certain threshold. Both values are useful, their use will depend on the situation you’re applying it to.</p>\n<iframe height=\"500\" style=\"width: 100%;\" scrolling=\"no\" title=\"scroll-snap-type: Mandatory vs Proximity\" src=\"https://codepen.io/matfantinel/embed/preview/LYNPdpE?default-tab=result&theme-id=dark\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">See the Pen <a href=\"https://codepen.io/matfantinel/pen/LYNPdpE\">scroll-snap-type: Mandatory vs Proximity</a> by Matheus Fantinel (<a href=\"https://codepen.io/matfantinel\">@matfantinel</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>\n<h3>scroll-snap-align</h3>\n<p>This is a property you add to the children that specifies where the snap points will be in the element. Which means that, whenever the browser automatically snaps the scroll to the element, it will either go to the left/top edge (<code>start</code>), center (<code>center</code>), or right/bottom edge (<code>end</code>) of the element. This property pretty much only makes a difference if the children are bigger than the parent’s display size.</p>\n<h3>scroll-padding and scroll-margin</h3>\n<p>To make things even better, we can use the <code>scroll-padding</code> (for parent) and <code>scroll-margin</code> (for children) properties. They add some space before/after the elements that are only considered when scrolling. The best way to implement them is by trying it out after you build your scroll snapping goodiness.</p>\n<p>You can check the documentation over on <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Scroll_Snap\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Mozilla Developer Network</a> for more info.</p>\n<h2>Wrapping Up</h2>\n<p>Scroll snapping is a sign that the web is maturing. For years we’ve been bloating websites with a lot of JavaScript for very simple visual tasks, and now CSS is slowly evolving to take some space back. It’s an important evolution because Web technologies are being used to build every kind of application, and its native feature set needs to be good enough to compete with native or native-ish counterparts like Flutter, Swift, or Kotlin.</p>\n<p>Thanks for reading!</p>","css":{"code":".code-block.svelte-qgch0c.svelte-qgch0c{display:block;position:relative;background-color:var(--code-background-color);color:var(--code-text-color);font-family:var(--mono-font);font-size:1rem;line-height:1.33em;border-radius:8px;box-shadow:var(--card-shadow);padding:30px 15px;margin:30px 0}.code-block.svelte-qgch0c pre{overflow-x:auto;scrollbar-color:var(--primary-color) var(--scrollbar-track-color);scrollbar-width:thin;padding-bottom:5px}.code-block.svelte-qgch0c pre::-webkit-scrollbar{height:8px}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb{background:var(--primary-color)}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb:hover{background:var(--primary-light-color)}.code-block.svelte-qgch0c .lang.svelte-qgch0c{position:absolute;right:0;top:-15px;background:inherit;border-radius:8px;padding:5px 10px;z-index:2;font-size:0.85em}.code-block.svelte-qgch0c .filename.svelte-qgch0c{background:inherit;border-top-left-radius:8px;border-top-right-radius:8px;margin-bottom:-2px;padding:5px 10px;position:absolute;left:0px;top:-15px;z-index:1}","map":null},"head":""}]}
[{"slug":"blog-development-sveltekit","title":"How I built a blog with Svelte and SvelteKit","date":"2021-09-08T00:00:00.000Z","excerpt":"An overview of the experience I've had using these amazing projects.","tags":["Front-End","Svelte","SvelteKit"],"html":"<p>I’ve recently re-launched my personal website and blog, that’s now reached its 3rd version. There was nothing wrong with the previous one, but I wanted to both give it a small visual refresh and learn something new. So, after a month or so of working on it on my free time, <div class=\"sparkle-wrapper svelte-exdx8u\">\n\t<div class=\"slot-wrapper svelte-exdx8u\"><strong class=\"text-secondary\">voilà</strong></div>\n</div>, you’re seeing it right now!</p>\n<div style=\"display: grid;place-items: center;max-width: 300px;margin: 20px auto 0;\"><a href=\"https://github.com/matfantinel/matfantinel.github.io\" target=\"_blank\" class=\"button secondary\"><svg width=\"100%\" height=\"100%\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M16 22.0268V19.1568C16.0375 18.68 15.9731 18.2006 15.811 17.7506C15.6489 17.3006 15.3929 16.8902 15.06 16.5468C18.2 16.1968 21.5 15.0068 21.5 9.54679C21.4997 8.15062 20.9627 6.80799 20 5.79679C20.4558 4.5753 20.4236 3.22514 19.91 2.02679C19.91 2.02679 18.73 1.67679 16 3.50679C13.708 2.88561 11.292 2.88561 8.99999 3.50679C6.26999 1.67679 5.08999 2.02679 5.08999 2.02679C4.57636 3.22514 4.54413 4.5753 4.99999 5.79679C4.03011 6.81549 3.49251 8.17026 3.49999 9.57679C3.49999 14.9968 6.79998 16.1868 9.93998 16.5768C9.61098 16.9168 9.35725 17.3222 9.19529 17.7667C9.03334 18.2112 8.96679 18.6849 8.99999 19.1568V22.0268\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path><path d=\"M9 20.0267C6 20.9999 3.5 20.0267 2 17.0267\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path></svg>See source code on GitHub</a></div>\n<h2>About Svelte and SvelteKit</h2>\n<p><a href=\"https://svelte.dev/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Svelte</a> is a new cool kid on the JS block - it was launched in 2016, but it really started getting traction when its 3.0 version was launched in 2019. It is a competitor to the big JS frameworks - React, Vue, Angular - but, instead of simply being an alternative way of doing things, it differentiates itself on a fundamental level: <span class=\"wrapper svelte-1sgfl7c\">it is a compiler, not a framework.</span></p>\n<p>This means that it does its job at build time, not at runtime. While other frameworks (React, for example) need JavaScript code that runs on the client in order for your components to work properly, Svelte does not, because it interprets your code on build time, and only ships exactly what it needs to run. This means websites made with Svelte can be much smaller in size and faster because it has less code to run.</p>\n<p><a href=\"https://kit.svelte.dev/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">SvelteKit</a> is a framework built on top of that. It is an opinionated set of rules that helps you get a Svelte app built pretty quickly. You can compare it to NextJS (for React) or Nuxt (for Vue). It has great defaults and encourages good practices, like server-side rendering, for example. At the time of building this website, SvelteKit was still in Beta. However, progress is steady and its API seems to be already stable, so it’s unlikely there will be any breaking changes before 1.0 arrives.</p>\n<p>Using both of the above allowed my website to have two important characteristics:</p>\n<ul><li>Every single page is rendered at build time (server-side rendering). This means that as long as the HTML and CSS files are downloaded, it will look as it was meant to be;</li>\n<li>JavaScript is not needed. Try disabling JavaScript on your browser. You’ll still be able to read this blog post and everything will look the same.</li></ul>\n<h2>Progressive Enhancement</h2>\n<p>One of the concepts that really caught my eye with Svelte is the idea of Progressive Enhancement: <span class=\"wrapper svelte-1sgfl7c\">making sure your app runs for everyone, and making it progressively more featureful if the user’s device supports it</span>. My website is a pretty simple project, but still there are instances of this:</p>\n<p>If there’s no JavaScript, the website uses the browser’s native navigation API. Which means you can navigate between pages normally without any client-side code. <em>However</em>, if JavaScript is available, a client-side router will be used to make the transition between pages smoother and faster. This means that even if the user’s device doesn’t support JS for any reason<span class=\"text-info\">*</span>, the site will still be completely functional.</p>\n<div class=\"callout-block info svelte-1pi2pyj\"><div class=\"icon-wrapper svelte-1pi2pyj\"><svg width=\"100%\" height=\"100%\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M12 11.5V16.5\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path><path d=\"M12 7.51L12.01 7.49889\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path><path d=\"M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path></svg></div>\n\t<span class=\"text-info\">*</span> We tend to think of JavaScript being disabled as a user choice, but that is not always the case. Think of someone using their phone on a weak 3G connection that fails to load the .js files, or someone in a metro that lost signal while loading the page. It happens often and being able to show your content even in these conditions is a great way of not losing a visitor.\n\n</div>\n<p>And you know what I had to do to support this? <em>Nothing</em>. Just using <code>&lt;a&gt;</code> elements is enough, as SvelteKit will intercept those if needed (JS enabled), or simply leave it to the browser otherwise.</p>\n<h2>Design</h2>\n<p>I’m not a designer, but I like the subject. So, instead of designing-as-I-go when developing the website, I decided to fully design it on <a href=\"https://www.figma.com/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Figma</a> before starting development. I figured that using it to design stuff is the best way to learn the platform, and I really finished this design much better at Figma than I was before. Auto-layout is fantastic since it works so much like CSS Flexbox, so I was able to approach it with a similar thought-process as I have when developing stuff.</p>\n<p>The design itself was something I came up with, and it’s an amalgamation of ideas and inspirations that were stored in my head. When building it, I wasn’t entirely sure where the inspiration came from, but now it is apparent to me that most of it comes from some websites I love: <a href=\"https://www.joshwcomeau.com/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Josh Comeau’s</a> and <a href=\"https://georgefrancis.dev/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">George Francis’</a>.</p>\n<p>After the design was complete, I finally began developing it. Since there are some things that you can only find out while developing it and giving it more attention, I made some small tweaks to the design while implementing it. Still, the final result was <em>really</em> similar to the initial design. I count that as a success!</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/blog-development-sveltekit/design-vs-result.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/blog-development-sveltekit/design-vs-result.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/blog-development-sveltekit/design-vs-result.png\" alt=\"Screenshot showing the intial design versus the final result, with minimal differences\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->The design (left) and the result (right)<!-- HTML_TAG_END --></figcaption>\n</picture>\n<h2>Routing</h2>\n<p>SvelteKit uses filesystem-based routing, which means that anything inside a <code>routes</code> folder will be accessible via its own path, without the need of manually declaring routes.</p>\n<p>My website has 4 different pages in total: home, blog, blog post and resume. This means that I can create these pages like this, and their path will already work:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t\n\t<pre class=\"language-bash\"><!-- HTML_TAG_START --><code class=\"language-bash\">└── routes\n    ├── __layout.svelte\n    ├── blog.svelte <span class=\"token comment\"># /blog</span>\n    ├── index.svelte <span class=\"token comment\"># /</span>\n    ├── resume.svelte <span class=\"token comment\"># /resume</span>\n    ├── <span class=\"token punctuation\">[</span>slug<span class=\"token punctuation\">]</span>.svelte <span class=\"token comment\"># Dynamic route (blog posts)</span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>The <code>__layout.svelte</code> file is a base layout for all the pages inside the route. Which means that I can have shared code for all pages in there. See the example below, where I added the header and footer components to the __layout, and load the content of the route itself in the <code>&lt;slot&gt;</code> element:</p>\n<div class=\"code-block svelte-qgch0c\"><div class=\"filename svelte-qgch0c\">__layout.svelte</div>\n\t<div class=\"lang svelte-qgch0c\">svelte</div>\n\t<pre class=\"language-svelte\"><!-- HTML_TAG_START --><code class=\"language-svelte\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Header</span> <span class=\"token punctuation\">/></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>main</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>slot</span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>main</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Footer</span> <span class=\"token punctuation\">/></span></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<h3>Blog Post Page / Dynamic Routing</h3>\n<p>But what about the blog post page? Well, that one is a special case. If you look at the URL loaded right now, you’ll see that it is specific to this blog post. However, that doesn’t mean there is one Svelte page for each blog post on the routes directory.</p>\n<p>You see, every blog post page is the same one, however its content is loaded based on the URL it receives. To achieve this, I used SvelteKit’s dynamic routing with a file called <code>[slug].svelte</code>. The brackets indicate that the route might be dynamic, and whatever URL comes in, it will be caught by this file (unless it’s caught by explicit routes like /blog shown above). Not only that, but that part of the URL will be accessible in the page as a parameter (called, in this case, <em>slug</em>). This parameter allows the page to know which blog post to display.</p>\n<p>However, there’s still an extra step I wanted to take. Blog posts only have their own content, but I wanted to add a few extra things on the page that weren’t present in the main __layout.svelte file, like the post title and related posts at the bottom. For that, I used a <strong>layout reset</strong>, defining that the post page shouldn’t use the main one, but instead have its own.</p>\n<p>To avoid repeating [slug] many times, I wrapped both files in a new folder. My routes directory stayed like this:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t\n\t<pre class=\"language-bash\"><!-- HTML_TAG_START --><code class=\"language-bash\">└── routes\n    ├── __layout.svelte\n    ├── blog.svelte <span class=\"token comment\"># /blog</span>\n    ├── index.svelte <span class=\"token comment\"># /</span>\n    ├── resume.svelte <span class=\"token comment\"># /resume</span>\n    └── <span class=\"token punctuation\">[</span>slug<span class=\"token punctuation\">]</span> <span class=\"token comment\"># Dynamic route (blog posts)</span>\n        ├── __layout.reset.svelte\n        ├── index.svelte</code><!-- HTML_TAG_END --></pre>\n</div>\n<h2>The blog</h2>\n<p>The main challenge for me was in processing Markdown(.md) files of the blog posts into actual Svelte code. Unlike Jekyll, which I was using previously for this blog, SvelteKit doesn’t have anything built-in for this (yet) and online resources are a bit scarce (which is normal, since it’s still in beta).</p>\n<p>I had three requisites for this:</p>\n<ul><li>I wanted to write blog posts in Markdown, because of its ease, and also so I wouldn’t have to rewrite all the existing posts;</li>\n<li>I wanted to be able to use Svelte components inside the blog posts as well, for more interactive elements;</li>\n<li>It has to be rendered on build time so the blog can be deployed to GitHub Pages;</li></ul>\n<p>I had heard about something similar to what I wanted, called MDX. It allows everything I wanted, however, it was React-based and I couldn’t use it. Luckily, I found out about <a href=\"https://mdsvex.com/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">MDsveX</a>, a project with the same goal as MDX, but for Svelte!</p>\n<p>After setting it up, I had to figure out how to actually use it. I found some examples on the internet, which seemed very straightforward. Most of them created a <code>/posts</code> folder inside the routes, and then put the .md files in there. MDsveX would do the work of transforming them into HTML pages on build, and that was it. However, that meant the post URL would have to become <code>https://fantinel.dev/posts/blog-post-name</code>. That isn’t a huge problem by itself, but it was for me because it wouldn’t be backwards-compatible with my previous blog URLs, that have been linked to a few times in other sites. I wanted to remove the need for “/posts” in the URL to keep that compatibility.</p>\n<p>That means my page on <code>routes/[slug]/index.svelte</code> should need some kind of logic that finds the correct blog post to show and dynamically loads the Svelte component generated by MDsveX. Not only that, but I needed to be able to extract the metadata of the post - its title, image, and date - to be able to display it on the __layout.reset.svelte file, and also displaying the “Recent posts” cards on the home page.</p>\n<h3>Extracting post data</h3>\n<p>I found out when searching that we can import all the .md files as modules, and process them via JS, since this code will run on the server. I ended up creating a <code>posts.js</code> file to centralize this logic, and did the following:</p>\n<div class=\"code-block svelte-qgch0c\"><div class=\"filename svelte-qgch0c\">posts.js</div>\n\t<div class=\"lang svelte-qgch0c\">javascript</div>\n\t<pre class=\"language-javascript\"><!-- HTML_TAG_START --><code class=\"language-javascript\"><span class=\"token comment\">// Import the markdown files for each post</span>\n<span class=\"token keyword\">const</span> imports <span class=\"token operator\">=</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">.</span>meta<span class=\"token punctuation\">.</span><span class=\"token function\">globEager</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./posts/*.md'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> posts <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> path <span class=\"token keyword\">in</span> imports<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">const</span> post <span class=\"token operator\">=</span> imports<span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// For each of them, MDsveX will do the heavy lifting. The \"metadata\"</span>\n    <span class=\"token comment\">// is automatically recovered from the Frontmatter, and we're also</span>\n    <span class=\"token comment\">// asking it to render the blog post so we're able to use it </span>\n    <span class=\"token comment\">// as a component later on.</span>\n\t\tposts<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token operator\">...</span>post<span class=\"token punctuation\">.</span>metadata<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token operator\">...</span>post<span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// Filter the post and order them by published date</span>\n<span class=\"token keyword\">const</span> filteredPosts <span class=\"token operator\">=</span> posts\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">post</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>post<span class=\"token punctuation\">.</span>hidden<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token operator\">?</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n\t\t\t<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token operator\">?</span> <span class=\"token number\">1</span>\n\t\t\t<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n\t<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Expose this info to other files</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> filteredPosts<span class=\"token punctuation\">;</span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>With that data being exported from that file, I can reuse it in the places I need:</p>\n<h4>Blog post page</h4>\n<p>On the <code>routes/[slug]/index.svelte</code> file, I can now import the posts and look for the one I should display (by comparing slugs). After that, I’ll get its module and use the special <code>&lt;svelte:component&gt;</code> (<a href=\"https://svelte.dev/docs#svelte_component\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">see docs</a>) tag to use it inside the page.</p>\n<div class=\"code-block svelte-qgch0c\"><div class=\"filename svelte-qgch0c\">index.svelte</div>\n\t<div class=\"lang svelte-qgch0c\">svelte</div>\n\t<pre class=\"language-svelte\"><!-- HTML_TAG_START --><code class=\"language-svelte\"><span class=\"token comment\">&lt;!-- By using context=\"module\", I declare that this code will run on the server --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">context</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>module<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token comment\">// Get posts info</span>\n\t<span class=\"token keyword\">const</span> allPosts <span class=\"token operator\">=</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">.</span>meta<span class=\"token punctuation\">.</span><span class=\"token function\">globEager</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">&#96;</span><span class=\"token string\">../../lib/posts/*.md</span><span class=\"token template-punctuation string\">&#96;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">let</span> posts <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Get the posts' slugs</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> path <span class=\"token keyword\">in</span> allPosts<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">const</span> post <span class=\"token operator\">=</span> allPosts<span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> slug <span class=\"token operator\">=</span> post<span class=\"token punctuation\">.</span>metadata<span class=\"token punctuation\">.</span>slug<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> post<span class=\"token punctuation\">,</span> slug <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t\tposts<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> page <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> slug <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> page<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Find the post with the slug</span>\n\t\t<span class=\"token keyword\">const</span> filteredPost <span class=\"token operator\">=</span> posts<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> p<span class=\"token punctuation\">.</span>slug<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> slug<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tprops<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// Tell page to load that post's module</span>\n\t\t\t\tpage<span class=\"token operator\">:</span> filteredPost<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">.</span>default\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token comment\">// Declare the page variable to use on the client</span>\n\t<span class=\"token keyword\">export</span> <span class=\"token keyword\">let</span> page<span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">&lt;!-- Here we'll load the component of the blog post page itself --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">svelte:</span>component</span> <span class=\"token attr-name\">this=</span><span class=\"token language-javascript\"><span class=\"token punctuation\">&#123;</span>page<span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">/></span></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<h4>Listing all posts</h4>\n<p>Now the post page is done, we need a way to display all the posts on the main blog page. We already have them sorted and filtered on the <code>posts.js</code> file, so all I have to do is fetch that data and iterate on it to display them all.</p>\n<p>Since the posts data comes from the server, it needs to run there. I’ll use <a href=\"https://kit.svelte.dev/docs#routing-endpoints\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">SvelteKit’s endpoints</a> to create a JSON file on build that will contain the posts data.</p>\n<div class=\"code-block svelte-qgch0c\"><div class=\"filename svelte-qgch0c\">blog.json.js</div>\n\t<div class=\"lang svelte-qgch0c\">javascript</div>\n\t<pre class=\"language-javascript\"><!-- HTML_TAG_START --><code class=\"language-javascript\"><span class=\"token keyword\">import</span> posts <span class=\"token keyword\">from</span> <span class=\"token string\">'$lib/posts'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>posts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">slug</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    slug<span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">...</span>posts<span class=\"token punctuation\">[</span>slug<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n    status<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n\t\tbody<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>And, on the page itself:</p>\n<div class=\"code-block svelte-qgch0c\"><div class=\"filename svelte-qgch0c\">blog.svelte</div>\n\t<div class=\"lang svelte-qgch0c\">svelte</div>\n\t<pre class=\"language-svelte\"><!-- HTML_TAG_START --><code class=\"language-svelte\"><span class=\"token comment\">&lt;!-- By using context=\"module\", I declare that this code will run on the server \nand fetch this data before page actually loads --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">context</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>module<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n\t<span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> fetch <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'/blog.json'</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n      props<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        posts<span class=\"token operator\">:</span> <span class=\"token keyword\">await</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token language-javascript\"><span class=\"token punctuation\">&#123;</span><span class=\"token operator\">...</span><span class=\"token punctuation\">&#125;</span></span>\n\n<span class=\"token each\"><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">#each</span> <span class=\"token language-javascript\">posts </span><span class=\"token keyword\">as</span> <span class=\"token language-javascript\">post<span class=\"token punctuation\">&#125;</span></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>BlogPostCard</span> <span class=\"token language-javascript\"><span class=\"token punctuation\">&#123;</span>post<span class=\"token punctuation\">&#125;</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token each\"><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">/each</span><span class=\"token punctuation\">&#125;</span></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<h3>RSS</h3>\n<p>Something that SvelteKit currently does not provide a solution for is a RSS feed. Previously, mine was built automatically by Jekyll and I never had to do anything to get it working. While this wasn’t the case right now, I’m sure once SvelteKit is stable and mature, solutions for this will be available so no manual work has to be done.</p>\n<p>I made mine by taking advantage of <a href=\"https://kit.svelte.dev/docs#routing-endpoints\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">SvelteKit’s endpoints</a>, and serving a XML file that is generated at build time. I import the filtered posts from the <code>posts.js</code> file I created earlier, and use the metadata to build the content of the RSS file. You can check out <a href=\"https://github.com/matfantinel/matfantinel.github.io/blob/main/src/routes/rss.xml.js\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">the source code</a> for implementation details.</p>\n<h3>Sitemap</h3>\n<p>Another thing that’s still not built-in to SvelteKit is the sitemap. It’s great for SEO, especially for newer websites, so I researched a good way of adding one. Luckily, someone already built a tool to generate them automatically, and there is already a discussion to build it into SvelteKit directly. Check out <a href=\"https://github.com/bartholomej/svelte-sitemap\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">svelte-sitemap</a> for generating your own.</p>\n<h2>Wrapping Up</h2>\n<p>My first experience with Svelte and SvelteKit was, overall, fantastic. It simplifies many parts of development and having server-side-rendering as a default option really drives forward their purpose of simplifying web both for users and developers.</p>\n<p>Though I definitely did not use all of Svelte’s strengths on this project, since it doesn’t need dynamic data and an application state, I’ll be working with that soon enough. Its ecosystem is not as big as its competitors’, since Svelte is still small compared to them, but they’re doing something right with their new approach, as Svelte is the most loved web framework according to <a href=\"https://insights.stackoverflow.com/survey/2021#section-most-loved-dreaded-and-wanted-web-frameworks\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">the latest StackOverflow survey</a>. Not to mention that Svelte itself doesn’t try to reinvent the wheel, and therefore is compatible with almost everything JavaScript.</p>\n<p>The small issues I’ve had while building this will definitely be gone soon, as they were caused by SvelteKit not being on a stable version yet. I’m excited to see how much the ecosystem grows the next year; I’ll definitely be keeping an eye on it!</p>\n<p>Don’t forget all the code for this website and blog are open source, feel free to use it and to propose changes if you’d like!</p>\n<p>Thanks for reading!</p>\n<div style=\"display: grid;place-items: center;max-width: 300px;margin: 20px auto 0;\"><a href=\"https://github.com/matfantinel/matfantinel.github.io\" target=\"_blank\" class=\"button secondary\"><svg width=\"100%\" height=\"100%\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M16 22.0268V19.1568C16.0375 18.68 15.9731 18.2006 15.811 17.7506C15.6489 17.3006 15.3929 16.8902 15.06 16.5468C18.2 16.1968 21.5 15.0068 21.5 9.54679C21.4997 8.15062 20.9627 6.80799 20 5.79679C20.4558 4.5753 20.4236 3.22514 19.91 2.02679C19.91 2.02679 18.73 1.67679 16 3.50679C13.708 2.88561 11.292 2.88561 8.99999 3.50679C6.26999 1.67679 5.08999 2.02679 5.08999 2.02679C4.57636 3.22514 4.54413 4.5753 4.99999 5.79679C4.03011 6.81549 3.49251 8.17026 3.49999 9.57679C3.49999 14.9968 6.79998 16.1868 9.93998 16.5768C9.61098 16.9168 9.35725 17.3222 9.19529 17.7667C9.03334 18.2112 8.96679 18.6849 8.99999 19.1568V22.0268\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path><path d=\"M9 20.0267C6 20.9999 3.5 20.0267 2 17.0267\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path></svg>See source code on GitHub</a></div>","css":{"code":".sparkle-wrapper.svelte-exdx8u.svelte-exdx8u{position:relative;display:inline-block}.sparkle-wrapper.svelte-exdx8u .slot-wrapper.svelte-exdx8u{position:relative;z-index:1}\n.wrapper.svelte-1sgfl7c{background:var(--highlight-marker-url)}\n.callout-block.svelte-1pi2pyj.svelte-1pi2pyj{--bg-color:var(--callout-background-color);--accent-color:transparent;margin:40px 0 30px;padding:25px 25px;border-top-right-radius:10px;border-bottom-right-radius:10px;background:var(--bg-color);color:var(--text-color);border-left:4px solid var(--accent-color);position:relative}.callout-block.svelte-1pi2pyj .icon-wrapper.svelte-1pi2pyj{position:absolute;width:50px;height:50px;top:0;left:0;transform:translate(calc(-50% - 1.5px), -50%);background:var(--post-page-background-color);padding:8px;border-radius:50%;fill:var(--accent-color);color:var(--accent-color)}.callout-block.info.svelte-1pi2pyj.svelte-1pi2pyj{--bg-color:var(--callout-info-background-color);--accent-color:var(--callout-info-accent-color)}.callout-block.warning.svelte-1pi2pyj.svelte-1pi2pyj{--bg-color:var(--callout-warning-background-color);--accent-color:var(--callout-warning-accent-color)}.callout-block.error.svelte-1pi2pyj.svelte-1pi2pyj{--bg-color:var(--callout-error-background-color);--accent-color:var(--callout-error-accent-color)}.callout-block.success.svelte-1pi2pyj.svelte-1pi2pyj{--bg-color:var(--callout-success-background-color);--accent-color:var(--callout-success-accent-color)}\npicture.svelte-1gy5t1o.svelte-1gy5t1o{position:relative;width:100%;height:100%}picture.svelte-1gy5t1o img.svelte-1gy5t1o{width:100%;height:100%}\n.code-block.svelte-qgch0c.svelte-qgch0c{display:block;position:relative;background-color:var(--code-background-color);color:var(--code-text-color);font-family:var(--mono-font);font-size:1rem;line-height:1.33em;border-radius:8px;box-shadow:var(--card-shadow);padding:30px 15px;margin:30px 0}.code-block.svelte-qgch0c pre{overflow-x:auto;scrollbar-color:var(--primary-color) var(--scrollbar-track-color);scrollbar-width:thin;padding-bottom:5px}.code-block.svelte-qgch0c pre::-webkit-scrollbar{height:8px}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb{background:var(--primary-color)}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb:hover{background:var(--primary-light-color)}.code-block.svelte-qgch0c .lang.svelte-qgch0c{position:absolute;right:0;top:-15px;background:inherit;border-radius:8px;padding:5px 10px;z-index:2;font-size:0.85em}.code-block.svelte-qgch0c .filename.svelte-qgch0c{background:inherit;border-top-left-radius:8px;border-top-right-radius:8px;margin-bottom:-2px;padding:5px 10px;position:absolute;left:0px;top:-15px;z-index:1}","map":null},"head":"","readingTime":"19 min read","relatedPosts":[{"slug":"angular-pwa-how-to","title":"How to transform your Angular 6+ app into a PWA","date":"2019-03-10T00:00:00.000Z","excerpt":"Make your Angular app work like a native app on phones and desktop.","tags":["Angular","PWA","Guide","Front-End","JavaScript"],"html":"<p>Recently, I’ve converted my Angular 6 app into a PWA, allowing it to work offline and work like a native app on phones and desktop.</p>\n<p>Although there are many tutorials out there about turning Angular apps into PWAs, I’ve decided to write one simply because I faced some issues that were a bit hard to solve, so if you end up having them you don’t lose as much time as I did!</p>\n<div class=\"callout-block info svelte-1pi2pyj\"><div class=\"icon-wrapper svelte-1pi2pyj\"><svg width=\"100%\" height=\"100%\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M12 11.5V16.5\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path><path d=\"M12 7.51L12.01 7.49889\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path><path d=\"M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path></svg></div>\n\tThis tutorial assumes you are using Angular CLI. Possible issues are listed at the end of the tutorial.\n\n</div>\n<h2>Step 1. Installing the Angular PWA dependencies</h2>\n<p>This is the easiest part. Run <code>ng add @angular/pwa</code> in the root of your project (the folder where <code>package.json</code> is. The CLI will automagically add <code>@angular/pwa</code> and <code>@angular/service-worker</code> as dependencies in your package.json file, and add some placeholder icons in your <code>assets</code> folder.</p>\n<p>Besides that, it will create a file named <code>ngsw-config.json</code> in your root folder, as well as a <code>manifest.json</code> in your /src folder, and reference both in <code>index.html</code> and <code>app.module.ts</code>. These files are important as you’ll be using them to configure your PWA later.</p>\n<h2>Step 2. Setting up your manifest.json</h2>\n<p>The <code>manifest.json</code> file is the one that tells the browser/OS about your app. You can set the full and short names, theme color, icons, and more. <a href=\"https://developers.google.com/web/fundamentals/web-app-manifest/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">You can find more about its settings here.</a></p>\n<p>Don’t forget to update the auto-generated icons on <code>/assets/icons</code> folder! These are necessary so that your app icon shows up for devices of all DPI settings.</p>\n<h2>Step 3. Setting up ngsw-config.json</h2>\n<p>This file is the one that can configure how your PWA works. You can set up different installation behaviors, as well as handle cache updates. <a href=\"https://angular.io/guide/service-worker-config\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">The Angular documentation has got all options covered here.</a></p>\n<h2>Step 4. Test it out!</h2>\n<p>If you want to test out your app’s new PWA capabilities locally, <code>ng serve</code> won’t help you. Instead, you can run a web server in your machine easily by installing the <code>http-server</code> package from npm:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">shell</div>\n\t<pre class=\"language-shell\"><!-- HTML_TAG_START --><code class=\"language-shell\"><span class=\"token function\">npm</span> i http-server -g</code><!-- HTML_TAG_END --></pre>\n</div>\n<p>Then, compile your app in production mode:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">shell</div>\n\t<pre class=\"language-shell\"><!-- HTML_TAG_START --><code class=\"language-shell\">ng build --prod</code><!-- HTML_TAG_END --></pre>\n</div>\n<p>And finally, start the web server:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">shell</div>\n\t<pre class=\"language-shell\"><!-- HTML_TAG_START --><code class=\"language-shell\">http-server -p <span class=\"token number\">8080</span> -c-1 dist/<span class=\"token operator\">&lt;</span>project-name<span class=\"token operator\">></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>Your app should be up and running on <code>http://localhost:8080/</code> (or whichever port you chose). How do you know it’s a PWA? There are a few ways:</p>\n<h3>Check if the service worker is being registered</h3>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/angular-pwa-how-to/Service-Workers-1.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/angular-pwa-how-to/Service-Workers-1.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/angular-pwa-how-to/Service-Workers-1.png\" alt=\"Registered Service Worker\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->On dev console > Application > Service Workers, there should be a registered service worker for your app.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<h3>Use Chrome’s Audits feature to validate it as a PWA</h3>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/angular-pwa-how-to/Audits.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/angular-pwa-how-to/Audits.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/angular-pwa-how-to/Audits.png\" alt=\"Audits\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->On dev console > Audits, test it for Progressive Web Apps.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/angular-pwa-how-to/Passed-Audits.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/angular-pwa-how-to/Passed-Audits.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/angular-pwa-how-to/Passed-Audits.png\" alt=\"Audits passed\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->If everything went alright, you should see the highlighted results on the 'Passed audits' section.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<p>You may see some errors regarding the app not running over HTTPS. Don’t worry, that’s only because it’s running locally.</p>\n<h2>Step 5. Install it!</h2>\n<p>On Chrome, you may also see the option to install the app appear in the URL bar:</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/angular-pwa-how-to/Clipboard_2019-10-27-18-09-45.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/angular-pwa-how-to/Clipboard_2019-10-27-18-09-45.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/angular-pwa-how-to/Clipboard_2019-10-27-18-09-45.png\" alt=\"Chrome prompts you to install PWA\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  \n</picture>\n<p>After this, the app should already open on a separate window, and show up on your OS’s installed apps list!</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/angular-pwa-how-to/Clipboard_2019-10-27-18-11-28.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/angular-pwa-how-to/Clipboard_2019-10-27-18-11-28.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/angular-pwa-how-to/Clipboard_2019-10-27-18-11-28.png\" alt=\"Installed PWA on OS&#39; dock\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->Notice the PWA's own icon on my OS' dock! Success!<!-- HTML_TAG_END --></figcaption>\n</picture>\n<h2>Issues Encountered</h2>\n<p>Even though the proccess is quite straight-forward, I still faced some issues when running it in my app. They were because of Angular tools versions, and I probably had these issues because I’m still running an Angular 6 app (and Angular 7 is out as of now).</p>\n<h3>The <code>ng add @angular/pwa</code> command doesn’t create relevant files</h3>\n<p>This was a <a href=\"https://github.com/angular/angular-cli/issues/11914\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">reported bug</a> on the CLI. I had a bugged version (6.0.8) installed on my app. I updated it by running</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">shell</div>\n\t<pre class=\"language-shell\"><!-- HTML_TAG_START --><code class=\"language-shell\"><span class=\"token function\">npm</span> uninstall @angular/cli --save\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> @angular/cli@latest --save</code><!-- HTML_TAG_END --></pre>\n</div>\n<p>It updated itself to version 7.1.4 and worked flawlessly.</p>\n<p><em>Notice: this is related to the local cli version, the one displayed on your <code>package.json</code> file, not the global one installed in your machine.</em></p>\n<h3>Failed to register a ServiceWorker: A bad HTTP response code (404) was received when fetching the script.</h3>\n<p>This error shows up on the browser console after opening the app running on http-server. It happens because, when running <code>ng build --prod</code>, Angular isn’t sending the service worker’s files along with the ones from the app. You can confirm this by searching for the <code>ngsw-worker.js</code> file on the <code>/dist</code> folder of your app. If it’s not there, then you have this issue.</p>\n<p>This one took me the longest to find out. Another bug related to outdated versions of Angular tools. Simply changing <code>@angular-devkit/build-angular</code> version in devDependencies to <code>~0.10.0</code> solved it.</p>\n<h2>Finalizing</h2>\n<p>I hope you had success on setting up your PWA! Remember that, when published, it will only work if you serve your app through HTTPS.</p>\n<p>Thanks for reading!</p>","css":{"code":".callout-block.svelte-1pi2pyj.svelte-1pi2pyj{--bg-color:var(--callout-background-color);--accent-color:transparent;margin:40px 0 30px;padding:25px 25px;border-top-right-radius:10px;border-bottom-right-radius:10px;background:var(--bg-color);color:var(--text-color);border-left:4px solid var(--accent-color);position:relative}.callout-block.svelte-1pi2pyj .icon-wrapper.svelte-1pi2pyj{position:absolute;width:50px;height:50px;top:0;left:0;transform:translate(calc(-50% - 1.5px), -50%);background:var(--post-page-background-color);padding:8px;border-radius:50%;fill:var(--accent-color);color:var(--accent-color)}.callout-block.info.svelte-1pi2pyj.svelte-1pi2pyj{--bg-color:var(--callout-info-background-color);--accent-color:var(--callout-info-accent-color)}.callout-block.warning.svelte-1pi2pyj.svelte-1pi2pyj{--bg-color:var(--callout-warning-background-color);--accent-color:var(--callout-warning-accent-color)}.callout-block.error.svelte-1pi2pyj.svelte-1pi2pyj{--bg-color:var(--callout-error-background-color);--accent-color:var(--callout-error-accent-color)}.callout-block.success.svelte-1pi2pyj.svelte-1pi2pyj{--bg-color:var(--callout-success-background-color);--accent-color:var(--callout-success-accent-color)}\n.code-block.svelte-qgch0c.svelte-qgch0c{display:block;position:relative;background-color:var(--code-background-color);color:var(--code-text-color);font-family:var(--mono-font);font-size:1rem;line-height:1.33em;border-radius:8px;box-shadow:var(--card-shadow);padding:30px 15px;margin:30px 0}.code-block.svelte-qgch0c pre{overflow-x:auto;scrollbar-color:var(--primary-color) var(--scrollbar-track-color);scrollbar-width:thin;padding-bottom:5px}.code-block.svelte-qgch0c pre::-webkit-scrollbar{height:8px}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb{background:var(--primary-color)}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb:hover{background:var(--primary-light-color)}.code-block.svelte-qgch0c .lang.svelte-qgch0c{position:absolute;right:0;top:-15px;background:inherit;border-radius:8px;padding:5px 10px;z-index:2;font-size:0.85em}.code-block.svelte-qgch0c .filename.svelte-qgch0c{background:inherit;border-top-left-radius:8px;border-top-right-radius:8px;margin-bottom:-2px;padding:5px 10px;position:absolute;left:0px;top:-15px;z-index:1}\npicture.svelte-1gy5t1o.svelte-1gy5t1o{position:relative;width:100%;height:100%}picture.svelte-1gy5t1o img.svelte-1gy5t1o{width:100%;height:100%}","map":null},"head":""},{"slug":"css-scroll-snapping","title":"CSS Scroll Snapping - Improve Scrolling without JS","date":"2020-08-03T00:00:00.000Z","excerpt":"Learn how to snap scrolling positions with CSS only.","tags":["Front-End","CSS","Guide"],"html":"<p>CSS is evolving constantly and the past few years have brought us amazing stuff. It is getting easier to make smooth and complete experiences without having to use JavaScript at all. Case in point: Scroll Snapping.</p>\n<p>It is an easy way to guarantee that users will scroll to the correct portion of your page or of a container. Picture a landing page that is easily swipable/scrollable between sections, or swipable cards. Take in mind how Android’s Recent Apps screen works, for example:</p>\n<p><img src=\"/images/posts/css-scroll-snapping/android-scroll-snapping.gif\" alt=\"Android's Recent Apps screen has scroll mapping between app cards\"></p>\n<p>You can see that Android never allows the end of a scroll to be in a place between cards. There’s a certain threshold that determines that the scroll will snap into the nearest card and put it in the center. All that while still keeping scrolling momentum, allowing you to go from one edge of the list to another in a single scroll if you want to.</p>\n<p>Until recently, you’d have to resort to JavaScript code to make a similar behavior on the web. But now, all you need is CSS, which makes things more performant, consistent and reliable! Browser support is already pretty good, with all major browser engines already supporting it fully. Check out browser support on <a href=\"https://caniuse.com/#feat=css-snappoints\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">caniuse.com</a>.</p>\n<p>I’ve recently added scroll snapping to my own website. You can check it out on the “Work Experience” section in the <a href=\"https://fantinel.dev\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Home page</a>. It’s specially great on mobile!</p>\n<h2>How?</h2>\n<p>There are two main CSS properties that make the magic happen, one for the parent element, and one for its children.</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">css</div>\n\t<pre class=\"language-css\"><!-- HTML_TAG_START --><code class=\"language-css\"><span class=\"token selector\">.parent</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">scroll-snap-type</span><span class=\"token punctuation\">:</span> y mandatory<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.child</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">scroll-snap-align</span><span class=\"token punctuation\">:</span> start<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code><!-- HTML_TAG_END --></pre>\n</div>\n<h3>scroll-snap-type</h3>\n<p>This property tells the browser that the parent element uses scroll snapping. We are given some options on how snapping must work. <code>y</code> indicates that the scroll happens vertically, while <code>x</code> means horizontally. We can also pass the <code>mandatory</code> and <code>proximity</code> options. </p>\n<p>We use <code>mandatory</code> to tell that the browser <em>must</em> snap to a snap point when the user stops scrolling. This means that if the next snap point becomes visible on the screen and scrolling stops, the browser will automatically snap to the next one. In the other end, with <code>proximity</code>, things are less strict. The browser will only snap to the next snap point if scrolling gets past a certain threshold. Both values are useful, their use will depend on the situation you’re applying it to.</p>\n<iframe height=\"500\" style=\"width: 100%;\" scrolling=\"no\" title=\"scroll-snap-type: Mandatory vs Proximity\" src=\"https://codepen.io/matfantinel/embed/preview/LYNPdpE?default-tab=result&theme-id=dark\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">See the Pen <a href=\"https://codepen.io/matfantinel/pen/LYNPdpE\">scroll-snap-type: Mandatory vs Proximity</a> by Matheus Fantinel (<a href=\"https://codepen.io/matfantinel\">@matfantinel</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>\n<h3>scroll-snap-align</h3>\n<p>This is a property you add to the children that specifies where the snap points will be in the element. Which means that, whenever the browser automatically snaps the scroll to the element, it will either go to the left/top edge (<code>start</code>), center (<code>center</code>), or right/bottom edge (<code>end</code>) of the element. This property pretty much only makes a difference if the children are bigger than the parent’s display size.</p>\n<h3>scroll-padding and scroll-margin</h3>\n<p>To make things even better, we can use the <code>scroll-padding</code> (for parent) and <code>scroll-margin</code> (for children) properties. They add some space before/after the elements that are only considered when scrolling. The best way to implement them is by trying it out after you build your scroll snapping goodiness.</p>\n<p>You can check the documentation over on <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Scroll_Snap\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Mozilla Developer Network</a> for more info.</p>\n<h2>Wrapping Up</h2>\n<p>Scroll snapping is a sign that the web is maturing. For years we’ve been bloating websites with a lot of JavaScript for very simple visual tasks, and now CSS is slowly evolving to take some space back. It’s an important evolution because Web technologies are being used to build every kind of application, and its native feature set needs to be good enough to compete with native or native-ish counterparts like Flutter, Swift, or Kotlin.</p>\n<p>Thanks for reading!</p>","css":{"code":".code-block.svelte-qgch0c.svelte-qgch0c{display:block;position:relative;background-color:var(--code-background-color);color:var(--code-text-color);font-family:var(--mono-font);font-size:1rem;line-height:1.33em;border-radius:8px;box-shadow:var(--card-shadow);padding:30px 15px;margin:30px 0}.code-block.svelte-qgch0c pre{overflow-x:auto;scrollbar-color:var(--primary-color) var(--scrollbar-track-color);scrollbar-width:thin;padding-bottom:5px}.code-block.svelte-qgch0c pre::-webkit-scrollbar{height:8px}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb{background:var(--primary-color)}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb:hover{background:var(--primary-light-color)}.code-block.svelte-qgch0c .lang.svelte-qgch0c{position:absolute;right:0;top:-15px;background:inherit;border-radius:8px;padding:5px 10px;z-index:2;font-size:0.85em}.code-block.svelte-qgch0c .filename.svelte-qgch0c{background:inherit;border-top-left-radius:8px;border-top-right-radius:8px;margin-bottom:-2px;padding:5px 10px;position:absolute;left:0px;top:-15px;z-index:1}","map":null},"head":""},{"slug":"fixing-favicons","title":"How to fix your Favicons","date":"2021-01-06T00:00:00.000Z","excerpt":"Favicons suck. Luckily, there are ways to make them suck less.","tags":["Front-End","Guide","Favicon"],"html":"<p>Favicons kinda suck. They should be a simple icon that identifies your webpage on a bunch of scenarios, i.e. the icon displayed on the tab besides your website’s title, or the icon on the mobile browser’s bookmarks screen, or the icon on the phone’s home screen.</p>\n<p>Unfortunately, different browsers, OSs, and implementations throughout the years have ended up with many different files and meta tags, that we as developers need to handle otherwise we end up with missing or pixelated icons.</p>\n<h2>Easy Mode</h2>\n<p>I recently met my new best friend, <a href=\"https://realfavicongenerator.net/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Real Favicon Generator</a>. It took all these pains I just wrote about and just made it a breeze to handle. Best of all, it’s customizable!</p>\n<p>You just have to add in your existing favicon image (for best results, a SVG or high-quality PNG are recommended). From then on, the generator will display previews and allow customization of each category of favicon it will generate:</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/fixing-favicons/favicon-generator-customization.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/fixing-favicons/favicon-generator-customization.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/fixing-favicons/favicon-generator-customization.png\" alt=\"Screenshot of Real Favicon Generator&#39;s customization\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->The customization options allow you to set different icons depending on device and OS, and even generate icons with background colors if needed.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<p>At the bottom, you can even set up ways of avoiding caching issues, compression, and scaling algorithms (!). After all that, it will generate them all as set, give you a zip with all the files, and the HTML code to paste on your <code>&lt;head&gt;</code>. You can check the result on this very website (fantinel.dev). The favicon should look fantastic on every device/browser combination.</p>\n<h2>Manual Mode</h2>\n<p>So, there are 5 types of favicons that we need to add, if we want to support every current browser:</p>\n<h3>1. Desktop browsers</h3>\n<ul><li>`favicon.ico`, for IE and any other legacy browsers. Optional if you don&#39;t want to support it;</li>\n  <li>`favicon-16x16.png`, the classic one that displays on the tabs;</li>\n  <li>`favicon-32x32.png`, used on Safari for macOS.</li></ul>\n<h3>2. Android browsers</h3>\n<ul><li>`android-chrome-192x192.png`, shown on the tab card and when added to home screen;</li>\n  <li>`android-chrome-512x512.png`, shown on the splash screen for when the website is installed to the phone. Optional if it&#39;s not a PWA;</li></ul>\n<h3>3. iOS Safari, and some Android browsers like Samsung Internet</h3>\n<ul><li>`apple-touch-icon.png`, a 180x180 file displayed when the website is added to home screen;</li></ul>\n<h3>4. Windows 8/10 start menu (optional)</h3>\n<ul><li>`mstile-150x150.png`, only used when your website is added to the start menu as a tile on Windows 8/10, and when not declared, defaults to `apple-touch-icon.png` instead.</li></ul>\n<h3>5. macOS Safari Pinned Tabs (optional)</h3>\n<ul><li>`safari-pinned-tab.svg` is used when users pin a tab on Safari for macOS. Basically, you declare a monochrome SVG and a theme color. Safari does the rest.</li></ul>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/fixing-favicons/safari-pinned-tabs-demo.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/fixing-favicons/safari-pinned-tabs-demo.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/fixing-favicons/safari-pinned-tabs-demo.png\" alt=\"Demo of Safari pinned tabs favicon behavior\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->How Safari pinned tab favicon works, screenshot of realfavicongenerator.net<!-- HTML_TAG_END --></figcaption>\n</picture>\n<p>With those files, you should be good to go on every single browser, by adding this to your <code>&lt;head&gt;</code>:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">html</div>\n\t<pre class=\"language-html\"><!-- HTML_TAG_START --><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>apple-touch-icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">sizes</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>180x180<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/apple-touch-icon.png<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image/png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">sizes</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>32x32<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/favicon-32x32.png<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image/png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">sizes</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>16x16<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/favicon-16x16.png?<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>manifest<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/site.webmanifest<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mask-icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/safari-pinned-tab.svg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#000000<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>shortcut icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/favicon.ico<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<h2>Single SVG Favicon</h2>\n<p>Something that’s starting to become a thing is having a single SVG favicon. Theoretically, SVGs are infinitely scalable, and should look good on all sizes. Unfortunately, browser support is not there yet.</p>\n<p><a href=\"https://caniuse.com/link-icon-svg\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Can I Use</a> reports that, currently (January 2021), only recent versions of Firefox and Chromium-based browsers support this feature. This means that Safari, non-Chromium Edge, IE, and some mobile browsers do not support it. Therefore, unless you want your favicon to just not appear in those browsers, you’d still have to use other file formats as well. The downside of this approach is that all favicons would look the same, and you won’t be able to customize and have differently-shaped icons for mobile devices, for example.</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">html</div>\n\t<pre class=\"language-html\"><!-- HTML_TAG_START --><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>favicon.svg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<h2>Wrapping Up</h2>\n<p>Favicons suck. Luckily, there are people working to make it suck less. With the approach presented on this article, your website should be able to display its best favicon on all browsers for years to come.</p>","css":{"code":"picture.svelte-1gy5t1o.svelte-1gy5t1o{position:relative;width:100%;height:100%}picture.svelte-1gy5t1o img.svelte-1gy5t1o{width:100%;height:100%}\n.code-block.svelte-qgch0c.svelte-qgch0c{display:block;position:relative;background-color:var(--code-background-color);color:var(--code-text-color);font-family:var(--mono-font);font-size:1rem;line-height:1.33em;border-radius:8px;box-shadow:var(--card-shadow);padding:30px 15px;margin:30px 0}.code-block.svelte-qgch0c pre{overflow-x:auto;scrollbar-color:var(--primary-color) var(--scrollbar-track-color);scrollbar-width:thin;padding-bottom:5px}.code-block.svelte-qgch0c pre::-webkit-scrollbar{height:8px}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb{background:var(--primary-color)}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb:hover{background:var(--primary-light-color)}.code-block.svelte-qgch0c .lang.svelte-qgch0c{position:absolute;right:0;top:-15px;background:inherit;border-radius:8px;padding:5px 10px;z-index:2;font-size:0.85em}.code-block.svelte-qgch0c .filename.svelte-qgch0c{background:inherit;border-top-left-radius:8px;border-top-right-radius:8px;margin-bottom:-2px;padding:5px 10px;position:absolute;left:0px;top:-15px;z-index:1}","map":null},"head":""}]},{"slug":"web-images-modern-formats","title":"Smarter, Lighter, Better Images: A Guide to Optimization","date":"2021-01-30T00:00:00.000Z","excerpt":"Learn how to reduce page loading times and bounce rate.","tags":["Front-End","Guide","HTML","CSS","Optimization"],"html":"<p>Do you know how big the images displayed on your website are? When you open a page, the browser starts downloading a bunch of files in order to display it. Research shows that <a href=\"https://httparchive.org/reports/state-of-images\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">images are the most requested asset type</a> and take up more bandwidth than any other resource. So, making sure they are as small as they can be can greatly improve the load times for your website. (spoiler alert: mine’s become 85% faster!)</p>\n<h2>More efficient formats</h2>\n<p>For a long time, JPGs and PNGs have been our standard image formats. However, they are not optimized for the web - their quality is often unnecessarily high and the download size is too big. Over time, many new formats have appeared, but two of them have become quite notable: <a href=\"https://en.wikipedia.org/wiki/WebP\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">WebP</a> and <a href=\"https://www.lambdatest.com/blog/avif-image-format/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">AVIF</a>.</p>\n<p>WebP has been introduced in 2010, and has slowly gained adoption since then. Since 2020, <a href=\"https://caniuse.com/webp\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">WebP is now supported in all modern browsers</a>. AVIF <a href=\"https://jakearchibald.com/2020/avif-has-landed/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">was launched in 2020</a>, and its adoption has been faster. As of January 2021 it is supported by all Chromium-based browsers, and Firefox will start supporting it on version 86, scheduled to release before March.</p>\n<p><em>But how do we use those shiny new formats if not all browsers support them?</em></p>\n<p>With the HTML <code>&lt;picture&gt;</code> element, we can make the browsers do the work for us. We can declare multiple sources for the same image, and the browser will try to load them in order. If they do not support a format, they will immediatelly jump to the next one.</p>\n<p>So, what we want to do is declare those different sources in the following order:</p>\n<p>AVIF -&gt; WebP -&gt; JPG (or PNG)</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">html</div>\n\t<pre class=\"language-html\"><!-- HTML_TAG_START --><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>picture</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token comment\">&lt;!-- If this type(avif) is supported, use this src --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span>\n    <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image/avif<span class=\"token punctuation\">\"</span></span> \n    <span class=\"token attr-name\">srcset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>my-image.avif<span class=\"token punctuation\">\"</span></span> \n  <span class=\"token punctuation\">/></span></span>\n  <span class=\"token comment\">&lt;!-- Else, if this type(webp) is supported, use this src instead --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span>\n    <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image/webp<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">srcset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>my-image.webp<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token punctuation\">/></span></span>\n  <span class=\"token comment\">&lt;!-- Else, fall back to jpg --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> \n    <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>my-image.jpg<span class=\"token punctuation\">\"</span></span> \n    <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>A test image<span class=\"token punctuation\">\"</span></span> \n    <span class=\"token attr-name\">loading</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lazy<span class=\"token punctuation\">\"</span></span> \n    <span class=\"token attr-name\">decoding</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>async<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>picture</span><span class=\"token punctuation\">></span></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>If you look at the resulting HTML in your website, you can see that the <code>&lt;img&gt;</code> element has a <code>src</code> defined, but when you hover over it, it shows what is the actual file that’s being loaded. If you’re on a supported browser, it will have loaded the AVIF file. If you’re on Safari, it will have loaded the WebP one. Otherwise, if you’re using IE or something (I’m sorry), the original JPG or PNG file will be loaded.</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/web-images-modern-formats/generated-html.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/web-images-modern-formats/generated-html.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/web-images-modern-formats/generated-html.png\" alt=\"Screenshot of the generated HTML code\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->The img tag shows the PNG file as source, but hovering the mouse over it reveals that the AVIF file is the one that actually loaded.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<h2>Load smaller images</h2>\n<p>You can optimize even further than that. See, in my example, I am loading an image with a width of 1200px, however, the size it’s being displayed is only 319px wide. The <code>srcset</code> property supports different widths to load, depending on the screen size.</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">html</div>\n\t<pre class=\"language-html\"><!-- HTML_TAG_START --><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>picture</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token comment\">&lt;!-- Here, we declare the widths our different files have: 380px, 640px and 960px --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span>\n    <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image/avif<span class=\"token punctuation\">\"</span></span> \n    <span class=\"token attr-name\">srcset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>\n      my-image-380w.avif 380w,\n      my-image-640w.avif 640w,\n      my-image-960w.avif 960w\n    <span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">sizes</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>(max-width: 979px) 100vw, 640px<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> \n    <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>my-image.jpg<span class=\"token punctuation\">\"</span></span> \n    <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>A test image<span class=\"token punctuation\">\"</span></span> \n    <span class=\"token attr-name\">loading</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lazy<span class=\"token punctuation\">\"</span></span> \n    <span class=\"token attr-name\">decoding</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>async<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>picture</span><span class=\"token punctuation\">></span></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>The <code>srcset</code> property is smart. As the name implies, it is a set of sources, not just a single one. When we declare multiple file paths and add a width unit besides it, the browser looks at this data and tries to display the smallest possible image.</p>\n<p>On the code snippet above, the browser will follow this: <span class=\"wrapper svelte-1sgfl7c\">If the size of the displayed image (on the page) is smaller or equal to 380px, it will load the file with 380px of width. Otherwise, it will try to load the next declared path (640px).</span></p>\n<p><strong>However,</strong> not all parts of this process are smarty. The browser cannot know what is the final size of the image on the page before it actually loads it. Which is why the <code>sizes</code> property exists. Let’s see how it works:</p>\n<p>The <code>sizes</code> property defines what rule the browser will use to get the width it uses to choose the correct file in <code>srcset</code>. The default value is <code>100vw</code>. That means that, to check what width the image will have, the browser just gets the width of the browser window. If we know the exact size the image will have on load, we can declare it here, or if we don’t know the exact size, we can estimate. We can use media queries to help us specify the sizes better as well.</p>\n<p>Check out the value on the example: <code>(max-width: 979px) 100vw, 640px</code>. What that code does is: if the width of the viewport is equal or smaller than 979px, use 100vw. Else, use 640px.</p>\n<p>It is easier to understand if we visualize it like this:</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/web-images-modern-formats/sizes.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/web-images-modern-formats/sizes.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/web-images-modern-formats/sizes.png\" alt=\"Screenshots picturing how the sizes property affects the image loading on both mobile and desktop\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->On mobile, the image width is almost the same as the viewport, so it's okay to use 100vw. On desktop, we usually limit the image width, so 640px was the sweet spot in this particular case.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<p>Of course, different websites have different needs and situations. Make sure to adapt the code to your specific need. </p>\n<p>It’s also worth noting that most phones use a HiDPI mode. This means that <span class=\"wrapper svelte-1sgfl7c\">even though the reported width for the phone above is 375px, the browser will likely use a higher resolution to load the images</span> (usually 2x), in order to serve a higher quality image.</p>\n<h2>Lazy Loading and Async Decoding</h2>\n<p>You might have noticed the <code>loading=&quot;lazy&quot;</code> and <code>decoding=&quot;async&quot;</code> attributes in the code above. Those are relatively new options that are part of an ongoing effort to make the web faster.</p>\n<p><code>decoding=&quot;async&quot;</code> tells your browser it can try to parallelize loading your image. When your page is loading, it tries to decode both text and images at the same time. On lower-end devices though, decoding heavy images can take a while, and this might block the rendering of the rest of the content. With this option, the browser will try to proceed rendering the rest of the content and render the image later. This can be a great improvement to perceived performance.</p>\n<p><code>loading=&quot;lazy&quot;</code> is probably the most important of the two. It is an easy way of telling the browser to <span class=\"wrapper svelte-1sgfl7c\">only load the images when they get close to appearing in the viewport</span>. There is a threshold that is defined by the browser that controls how close it needs to be before it gets loaded, so you don’t have to worry about them not showing up if the user scrolls fast. <span class=\"wrapper svelte-1sgfl7c\">This ensures that the initial load of the website is as lean as it can get, improving perceived performance and also saving you some money on server requests.</span></p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/web-images-modern-formats/first-load-requests.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/web-images-modern-formats/first-load-requests.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/web-images-modern-formats/first-load-requests.png\" alt=\"Screenshot of the image requests made on first load of my website\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->When the website is initially loaded, it only downloads what's needed: my avatar image and the preview of the first blog post, that will show up after scrolling a bit.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/web-images-modern-formats/after-scrolling-requests.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/web-images-modern-formats/after-scrolling-requests.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/web-images-modern-formats/after-scrolling-requests.png\" alt=\"Screenshot of the image requests made after scrolling a bit\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->When I scroll down the page, the images are downloaded as they're close to appearing.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<h2>Results In Practice</h2>\n<p>Since I like using my own website and blog as a testbed for new stuff that I learn, I have applied these optimizations to it. The results were incredible!</p>\n<p>Note: after doing some tests, I have decided that the benefits of serving differently-sized images on my website were too small to justify the extra effort of handling all these extra images. So, the only optimizations I have really applied were the optimized file formats, lazy loading and async decoding. I also chose PNG as fallback type instead of JPG because some of my images have transparency in them, which JPG does not support.</p>\n<p>The following data is taken from the home page of the website, since it has a lot of images:</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/web-images-modern-formats/results.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/web-images-modern-formats/results.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/web-images-modern-formats/results.png\" alt=\"Screenshot showing the difference in download size before and after the optimizations\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  \n</picture>\n<span class=\"wrapper svelte-1sgfl7c\">The total download size decreased by a whopping 85%!!</span> That&#39;s an incredible difference, with no noticeable difference in quality. Your results may vary, as they depend on how much of your website&#39;s size is images.\n<p>Before the changes, out of 1.6MB total, 92% of it were images, 5% were fonts, 1% was HTML, and the remaining 2% were of JS and other things like the web manifest.</p>\n<p>Now, out of 249kB, just 24% of it are images. Fonts now make up 27% of page size, and are likely the target of a future optimization post!</p>\n<h2>The Hard Part</h2>\n<p>The hardest part of this process is converting the images to all necessary formats and sizes. It is a lot of effort to do manually even for a single image, and even worse if you’re trying to optimize existing images like I was. </p>\n<h3>Generating the Images</h3>\n<p>For my needs, I have developed a NodeJS script that uses the <a href=\"https://github.com/lovell/sharp\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Sharp</a> library to do the magic for me. It accepts as parameters a source and a target folder, input file types (what files it will look for in the source folder), output file types (what types it will convert to), as well as the desired widths.</p>\n<p>The script is at the time of writing this currently usable only via command line. I have plans to turn this into a part of the build process of my website, with a <a href=\"https://github.com/features/actions\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">GitHub Action</a>, so that I don’t have to run it manually. </p>\n<p>So, to check out how to use the script, please <a href=\"https://github.com/matfantinel/image-transmutation\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">check out its GitHub page</a> for up-to-date instructions.</p>\n<h3>Using the images</h3>\n<p>To make this setup work, I had to do some changes on how images were used on my website.</p>\n<p>Pre-existing conditions:</p>\n<ul><li>All the images on my website were initially in a folder called “images”, with various subfolders;</li>\n<li>The images I wanted to convert were all in either PNG or JPG formats;</li></ul>\n<p>Modifications I did:</p>\n<ul><li>I have created a folder called “optimized-images”, where all the converted images are saved automatically by my script;</li>\n<li>I have created a component to centralize all image-loading logic. With Jekyll, I just had to create an HTML file in the <code>_includes</code> folder, but how you do this might vary depending on what technology you use;</li>\n<li>This component receives as parameters: the relative file path, the filename (without file extension), and the alt text;</li></ul>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">html</div>\n\t<pre class=\"language-html\"><!-- HTML_TAG_START --><code class=\"language-html\">&#123;% assign alt = include.alt %&#125;\n&#123;% assign path = include.path %&#125;\n&#123;% assign filename = include.filename %&#125;\n<span class=\"token comment\">&lt;!-- Here I build the full path to the image, minus the extension --></span>\n<span class=\"token comment\">&lt;!-- In case the process of generating the images is automated, you can check here if it's --></span>\n<span class=\"token comment\">&lt;!-- running locally or not, and swap between /images and /optimized-images accordingly --></span>\n&#123;% assign imageSrc = '/optimized-images/' | append: path | append: '/' | append: filename %&#125;\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>picture</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- And here I use that path and add the extensions inside the srcsets only --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span>\n    <span class=\"token attr-name\">srcset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#123;&#123; imageSrc &#125;&#125;.avif<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image/avif<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span>\n    <span class=\"token attr-name\">srcset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#123;&#123; imageSrc &#125;&#125;.webp<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image/webp<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#123;&#123; imageSrc &#125;&#125;.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#123;&#123; alt &#125;&#125;<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">loading</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lazy<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">decoding</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>async<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>picture</span><span class=\"token punctuation\">></span></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>And to use this component inside another page:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">liquid</div>\n\t<pre class=\"language-liquid\"><!-- HTML_TAG_START --><code class=\"language-liquid\"><span class=\"token liquid language-liquid\"><span class=\"token delimiter punctuation\">&#123;%</span> <span class=\"token keyword\">include</span> base/smart<span class=\"token operator\">-</span>image<span class=\"token punctuation\">.</span>html \n  path<span class=\"token operator\">=</span><span class=\"token string\">\"posts/my-post-url\"</span>\n  filename<span class=\"token operator\">=</span><span class=\"token string\">\"my-image\"</span>\n  alt<span class=\"token operator\">=</span><span class=\"token string\">\"A sample image\"</span>\n<span class=\"token delimiter punctuation\">%&#125;</span></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>My folder structure looks like this: </p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/web-images-modern-formats/folder-images.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/web-images-modern-formats/folder-images.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/web-images-modern-formats/folder-images.png\" alt=\"Screenshot showing the optimized files in their folder and comparing to the original one\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->Llamas are great<!-- HTML_TAG_END --></figcaption>\n</picture>\n<h2>Wrapping Up</h2>\n<p>With such amazing results, it’s hard not to recommend you to optimize the images in your website ASAP. There sure are more approaches and optimizations that can be done besides the ones presented on this article, as the web world is always changing. But optimizations are a great way of showing respect to your users (as well as gathering more of them). Your site loads more quickly, and it uses less data and resources.</p>\n<p>As front-end developers, we must acknowledge that all we write runs on someone else’s computer, the user’s. So it is important that we respect them and make sure we just use the resources we need to.</p>\n<p>I hope you enjoyed reading this! Take care and happy coding!</p>","css":{"code":".code-block.svelte-qgch0c.svelte-qgch0c{display:block;position:relative;background-color:var(--code-background-color);color:var(--code-text-color);font-family:var(--mono-font);font-size:1rem;line-height:1.33em;border-radius:8px;box-shadow:var(--card-shadow);padding:30px 15px;margin:30px 0}.code-block.svelte-qgch0c pre{overflow-x:auto;scrollbar-color:var(--primary-color) var(--scrollbar-track-color);scrollbar-width:thin;padding-bottom:5px}.code-block.svelte-qgch0c pre::-webkit-scrollbar{height:8px}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb{background:var(--primary-color)}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb:hover{background:var(--primary-light-color)}.code-block.svelte-qgch0c .lang.svelte-qgch0c{position:absolute;right:0;top:-15px;background:inherit;border-radius:8px;padding:5px 10px;z-index:2;font-size:0.85em}.code-block.svelte-qgch0c .filename.svelte-qgch0c{background:inherit;border-top-left-radius:8px;border-top-right-radius:8px;margin-bottom:-2px;padding:5px 10px;position:absolute;left:0px;top:-15px;z-index:1}\npicture.svelte-1gy5t1o.svelte-1gy5t1o{position:relative;width:100%;height:100%}picture.svelte-1gy5t1o img.svelte-1gy5t1o{width:100%;height:100%}\n.wrapper.svelte-1sgfl7c{background:var(--highlight-marker-url)}","map":null},"head":"","readingTime":"14 min read","relatedPosts":[{"slug":"css-scroll-snapping","title":"CSS Scroll Snapping - Improve Scrolling without JS","date":"2020-08-03T00:00:00.000Z","excerpt":"Learn how to snap scrolling positions with CSS only.","tags":["Front-End","CSS","Guide"],"html":"<p>CSS is evolving constantly and the past few years have brought us amazing stuff. It is getting easier to make smooth and complete experiences without having to use JavaScript at all. Case in point: Scroll Snapping.</p>\n<p>It is an easy way to guarantee that users will scroll to the correct portion of your page or of a container. Picture a landing page that is easily swipable/scrollable between sections, or swipable cards. Take in mind how Android’s Recent Apps screen works, for example:</p>\n<p><img src=\"/images/posts/css-scroll-snapping/android-scroll-snapping.gif\" alt=\"Android's Recent Apps screen has scroll mapping between app cards\"></p>\n<p>You can see that Android never allows the end of a scroll to be in a place between cards. There’s a certain threshold that determines that the scroll will snap into the nearest card and put it in the center. All that while still keeping scrolling momentum, allowing you to go from one edge of the list to another in a single scroll if you want to.</p>\n<p>Until recently, you’d have to resort to JavaScript code to make a similar behavior on the web. But now, all you need is CSS, which makes things more performant, consistent and reliable! Browser support is already pretty good, with all major browser engines already supporting it fully. Check out browser support on <a href=\"https://caniuse.com/#feat=css-snappoints\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">caniuse.com</a>.</p>\n<p>I’ve recently added scroll snapping to my own website. You can check it out on the “Work Experience” section in the <a href=\"https://fantinel.dev\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Home page</a>. It’s specially great on mobile!</p>\n<h2>How?</h2>\n<p>There are two main CSS properties that make the magic happen, one for the parent element, and one for its children.</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">css</div>\n\t<pre class=\"language-css\"><!-- HTML_TAG_START --><code class=\"language-css\"><span class=\"token selector\">.parent</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">scroll-snap-type</span><span class=\"token punctuation\">:</span> y mandatory<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.child</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">scroll-snap-align</span><span class=\"token punctuation\">:</span> start<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code><!-- HTML_TAG_END --></pre>\n</div>\n<h3>scroll-snap-type</h3>\n<p>This property tells the browser that the parent element uses scroll snapping. We are given some options on how snapping must work. <code>y</code> indicates that the scroll happens vertically, while <code>x</code> means horizontally. We can also pass the <code>mandatory</code> and <code>proximity</code> options. </p>\n<p>We use <code>mandatory</code> to tell that the browser <em>must</em> snap to a snap point when the user stops scrolling. This means that if the next snap point becomes visible on the screen and scrolling stops, the browser will automatically snap to the next one. In the other end, with <code>proximity</code>, things are less strict. The browser will only snap to the next snap point if scrolling gets past a certain threshold. Both values are useful, their use will depend on the situation you’re applying it to.</p>\n<iframe height=\"500\" style=\"width: 100%;\" scrolling=\"no\" title=\"scroll-snap-type: Mandatory vs Proximity\" src=\"https://codepen.io/matfantinel/embed/preview/LYNPdpE?default-tab=result&theme-id=dark\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">See the Pen <a href=\"https://codepen.io/matfantinel/pen/LYNPdpE\">scroll-snap-type: Mandatory vs Proximity</a> by Matheus Fantinel (<a href=\"https://codepen.io/matfantinel\">@matfantinel</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>\n<h3>scroll-snap-align</h3>\n<p>This is a property you add to the children that specifies where the snap points will be in the element. Which means that, whenever the browser automatically snaps the scroll to the element, it will either go to the left/top edge (<code>start</code>), center (<code>center</code>), or right/bottom edge (<code>end</code>) of the element. This property pretty much only makes a difference if the children are bigger than the parent’s display size.</p>\n<h3>scroll-padding and scroll-margin</h3>\n<p>To make things even better, we can use the <code>scroll-padding</code> (for parent) and <code>scroll-margin</code> (for children) properties. They add some space before/after the elements that are only considered when scrolling. The best way to implement them is by trying it out after you build your scroll snapping goodiness.</p>\n<p>You can check the documentation over on <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Scroll_Snap\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Mozilla Developer Network</a> for more info.</p>\n<h2>Wrapping Up</h2>\n<p>Scroll snapping is a sign that the web is maturing. For years we’ve been bloating websites with a lot of JavaScript for very simple visual tasks, and now CSS is slowly evolving to take some space back. It’s an important evolution because Web technologies are being used to build every kind of application, and its native feature set needs to be good enough to compete with native or native-ish counterparts like Flutter, Swift, or Kotlin.</p>\n<p>Thanks for reading!</p>","css":{"code":".code-block.svelte-qgch0c.svelte-qgch0c{display:block;position:relative;background-color:var(--code-background-color);color:var(--code-text-color);font-family:var(--mono-font);font-size:1rem;line-height:1.33em;border-radius:8px;box-shadow:var(--card-shadow);padding:30px 15px;margin:30px 0}.code-block.svelte-qgch0c pre{overflow-x:auto;scrollbar-color:var(--primary-color) var(--scrollbar-track-color);scrollbar-width:thin;padding-bottom:5px}.code-block.svelte-qgch0c pre::-webkit-scrollbar{height:8px}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb{background:var(--primary-color)}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb:hover{background:var(--primary-light-color)}.code-block.svelte-qgch0c .lang.svelte-qgch0c{position:absolute;right:0;top:-15px;background:inherit;border-radius:8px;padding:5px 10px;z-index:2;font-size:0.85em}.code-block.svelte-qgch0c .filename.svelte-qgch0c{background:inherit;border-top-left-radius:8px;border-top-right-radius:8px;margin-bottom:-2px;padding:5px 10px;position:absolute;left:0px;top:-15px;z-index:1}","map":null},"head":""},{"slug":"angular-pwa-how-to","title":"How to transform your Angular 6+ app into a PWA","date":"2019-03-10T00:00:00.000Z","excerpt":"Make your Angular app work like a native app on phones and desktop.","tags":["Angular","PWA","Guide","Front-End","JavaScript"],"html":"<p>Recently, I’ve converted my Angular 6 app into a PWA, allowing it to work offline and work like a native app on phones and desktop.</p>\n<p>Although there are many tutorials out there about turning Angular apps into PWAs, I’ve decided to write one simply because I faced some issues that were a bit hard to solve, so if you end up having them you don’t lose as much time as I did!</p>\n<div class=\"callout-block info svelte-1pi2pyj\"><div class=\"icon-wrapper svelte-1pi2pyj\"><svg width=\"100%\" height=\"100%\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M12 11.5V16.5\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path><path d=\"M12 7.51L12.01 7.49889\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path><path d=\"M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path></svg></div>\n\tThis tutorial assumes you are using Angular CLI. Possible issues are listed at the end of the tutorial.\n\n</div>\n<h2>Step 1. Installing the Angular PWA dependencies</h2>\n<p>This is the easiest part. Run <code>ng add @angular/pwa</code> in the root of your project (the folder where <code>package.json</code> is. The CLI will automagically add <code>@angular/pwa</code> and <code>@angular/service-worker</code> as dependencies in your package.json file, and add some placeholder icons in your <code>assets</code> folder.</p>\n<p>Besides that, it will create a file named <code>ngsw-config.json</code> in your root folder, as well as a <code>manifest.json</code> in your /src folder, and reference both in <code>index.html</code> and <code>app.module.ts</code>. These files are important as you’ll be using them to configure your PWA later.</p>\n<h2>Step 2. Setting up your manifest.json</h2>\n<p>The <code>manifest.json</code> file is the one that tells the browser/OS about your app. You can set the full and short names, theme color, icons, and more. <a href=\"https://developers.google.com/web/fundamentals/web-app-manifest/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">You can find more about its settings here.</a></p>\n<p>Don’t forget to update the auto-generated icons on <code>/assets/icons</code> folder! These are necessary so that your app icon shows up for devices of all DPI settings.</p>\n<h2>Step 3. Setting up ngsw-config.json</h2>\n<p>This file is the one that can configure how your PWA works. You can set up different installation behaviors, as well as handle cache updates. <a href=\"https://angular.io/guide/service-worker-config\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">The Angular documentation has got all options covered here.</a></p>\n<h2>Step 4. Test it out!</h2>\n<p>If you want to test out your app’s new PWA capabilities locally, <code>ng serve</code> won’t help you. Instead, you can run a web server in your machine easily by installing the <code>http-server</code> package from npm:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">shell</div>\n\t<pre class=\"language-shell\"><!-- HTML_TAG_START --><code class=\"language-shell\"><span class=\"token function\">npm</span> i http-server -g</code><!-- HTML_TAG_END --></pre>\n</div>\n<p>Then, compile your app in production mode:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">shell</div>\n\t<pre class=\"language-shell\"><!-- HTML_TAG_START --><code class=\"language-shell\">ng build --prod</code><!-- HTML_TAG_END --></pre>\n</div>\n<p>And finally, start the web server:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">shell</div>\n\t<pre class=\"language-shell\"><!-- HTML_TAG_START --><code class=\"language-shell\">http-server -p <span class=\"token number\">8080</span> -c-1 dist/<span class=\"token operator\">&lt;</span>project-name<span class=\"token operator\">></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>Your app should be up and running on <code>http://localhost:8080/</code> (or whichever port you chose). How do you know it’s a PWA? There are a few ways:</p>\n<h3>Check if the service worker is being registered</h3>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/angular-pwa-how-to/Service-Workers-1.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/angular-pwa-how-to/Service-Workers-1.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/angular-pwa-how-to/Service-Workers-1.png\" alt=\"Registered Service Worker\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->On dev console > Application > Service Workers, there should be a registered service worker for your app.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<h3>Use Chrome’s Audits feature to validate it as a PWA</h3>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/angular-pwa-how-to/Audits.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/angular-pwa-how-to/Audits.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/angular-pwa-how-to/Audits.png\" alt=\"Audits\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->On dev console > Audits, test it for Progressive Web Apps.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/angular-pwa-how-to/Passed-Audits.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/angular-pwa-how-to/Passed-Audits.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/angular-pwa-how-to/Passed-Audits.png\" alt=\"Audits passed\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->If everything went alright, you should see the highlighted results on the 'Passed audits' section.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<p>You may see some errors regarding the app not running over HTTPS. Don’t worry, that’s only because it’s running locally.</p>\n<h2>Step 5. Install it!</h2>\n<p>On Chrome, you may also see the option to install the app appear in the URL bar:</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/angular-pwa-how-to/Clipboard_2019-10-27-18-09-45.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/angular-pwa-how-to/Clipboard_2019-10-27-18-09-45.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/angular-pwa-how-to/Clipboard_2019-10-27-18-09-45.png\" alt=\"Chrome prompts you to install PWA\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  \n</picture>\n<p>After this, the app should already open on a separate window, and show up on your OS’s installed apps list!</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/angular-pwa-how-to/Clipboard_2019-10-27-18-11-28.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/angular-pwa-how-to/Clipboard_2019-10-27-18-11-28.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/angular-pwa-how-to/Clipboard_2019-10-27-18-11-28.png\" alt=\"Installed PWA on OS&#39; dock\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->Notice the PWA's own icon on my OS' dock! Success!<!-- HTML_TAG_END --></figcaption>\n</picture>\n<h2>Issues Encountered</h2>\n<p>Even though the proccess is quite straight-forward, I still faced some issues when running it in my app. They were because of Angular tools versions, and I probably had these issues because I’m still running an Angular 6 app (and Angular 7 is out as of now).</p>\n<h3>The <code>ng add @angular/pwa</code> command doesn’t create relevant files</h3>\n<p>This was a <a href=\"https://github.com/angular/angular-cli/issues/11914\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">reported bug</a> on the CLI. I had a bugged version (6.0.8) installed on my app. I updated it by running</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">shell</div>\n\t<pre class=\"language-shell\"><!-- HTML_TAG_START --><code class=\"language-shell\"><span class=\"token function\">npm</span> uninstall @angular/cli --save\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> @angular/cli@latest --save</code><!-- HTML_TAG_END --></pre>\n</div>\n<p>It updated itself to version 7.1.4 and worked flawlessly.</p>\n<p><em>Notice: this is related to the local cli version, the one displayed on your <code>package.json</code> file, not the global one installed in your machine.</em></p>\n<h3>Failed to register a ServiceWorker: A bad HTTP response code (404) was received when fetching the script.</h3>\n<p>This error shows up on the browser console after opening the app running on http-server. It happens because, when running <code>ng build --prod</code>, Angular isn’t sending the service worker’s files along with the ones from the app. You can confirm this by searching for the <code>ngsw-worker.js</code> file on the <code>/dist</code> folder of your app. If it’s not there, then you have this issue.</p>\n<p>This one took me the longest to find out. Another bug related to outdated versions of Angular tools. Simply changing <code>@angular-devkit/build-angular</code> version in devDependencies to <code>~0.10.0</code> solved it.</p>\n<h2>Finalizing</h2>\n<p>I hope you had success on setting up your PWA! Remember that, when published, it will only work if you serve your app through HTTPS.</p>\n<p>Thanks for reading!</p>","css":{"code":".callout-block.svelte-1pi2pyj.svelte-1pi2pyj{--bg-color:var(--callout-background-color);--accent-color:transparent;margin:40px 0 30px;padding:25px 25px;border-top-right-radius:10px;border-bottom-right-radius:10px;background:var(--bg-color);color:var(--text-color);border-left:4px solid var(--accent-color);position:relative}.callout-block.svelte-1pi2pyj .icon-wrapper.svelte-1pi2pyj{position:absolute;width:50px;height:50px;top:0;left:0;transform:translate(calc(-50% - 1.5px), -50%);background:var(--post-page-background-color);padding:8px;border-radius:50%;fill:var(--accent-color);color:var(--accent-color)}.callout-block.info.svelte-1pi2pyj.svelte-1pi2pyj{--bg-color:var(--callout-info-background-color);--accent-color:var(--callout-info-accent-color)}.callout-block.warning.svelte-1pi2pyj.svelte-1pi2pyj{--bg-color:var(--callout-warning-background-color);--accent-color:var(--callout-warning-accent-color)}.callout-block.error.svelte-1pi2pyj.svelte-1pi2pyj{--bg-color:var(--callout-error-background-color);--accent-color:var(--callout-error-accent-color)}.callout-block.success.svelte-1pi2pyj.svelte-1pi2pyj{--bg-color:var(--callout-success-background-color);--accent-color:var(--callout-success-accent-color)}\n.code-block.svelte-qgch0c.svelte-qgch0c{display:block;position:relative;background-color:var(--code-background-color);color:var(--code-text-color);font-family:var(--mono-font);font-size:1rem;line-height:1.33em;border-radius:8px;box-shadow:var(--card-shadow);padding:30px 15px;margin:30px 0}.code-block.svelte-qgch0c pre{overflow-x:auto;scrollbar-color:var(--primary-color) var(--scrollbar-track-color);scrollbar-width:thin;padding-bottom:5px}.code-block.svelte-qgch0c pre::-webkit-scrollbar{height:8px}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb{background:var(--primary-color)}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb:hover{background:var(--primary-light-color)}.code-block.svelte-qgch0c .lang.svelte-qgch0c{position:absolute;right:0;top:-15px;background:inherit;border-radius:8px;padding:5px 10px;z-index:2;font-size:0.85em}.code-block.svelte-qgch0c .filename.svelte-qgch0c{background:inherit;border-top-left-radius:8px;border-top-right-radius:8px;margin-bottom:-2px;padding:5px 10px;position:absolute;left:0px;top:-15px;z-index:1}\npicture.svelte-1gy5t1o.svelte-1gy5t1o{position:relative;width:100%;height:100%}picture.svelte-1gy5t1o img.svelte-1gy5t1o{width:100%;height:100%}","map":null},"head":""},{"slug":"fixing-favicons","title":"How to fix your Favicons","date":"2021-01-06T00:00:00.000Z","excerpt":"Favicons suck. Luckily, there are ways to make them suck less.","tags":["Front-End","Guide","Favicon"],"html":"<p>Favicons kinda suck. They should be a simple icon that identifies your webpage on a bunch of scenarios, i.e. the icon displayed on the tab besides your website’s title, or the icon on the mobile browser’s bookmarks screen, or the icon on the phone’s home screen.</p>\n<p>Unfortunately, different browsers, OSs, and implementations throughout the years have ended up with many different files and meta tags, that we as developers need to handle otherwise we end up with missing or pixelated icons.</p>\n<h2>Easy Mode</h2>\n<p>I recently met my new best friend, <a href=\"https://realfavicongenerator.net/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Real Favicon Generator</a>. It took all these pains I just wrote about and just made it a breeze to handle. Best of all, it’s customizable!</p>\n<p>You just have to add in your existing favicon image (for best results, a SVG or high-quality PNG are recommended). From then on, the generator will display previews and allow customization of each category of favicon it will generate:</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/fixing-favicons/favicon-generator-customization.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/fixing-favicons/favicon-generator-customization.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/fixing-favicons/favicon-generator-customization.png\" alt=\"Screenshot of Real Favicon Generator&#39;s customization\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->The customization options allow you to set different icons depending on device and OS, and even generate icons with background colors if needed.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<p>At the bottom, you can even set up ways of avoiding caching issues, compression, and scaling algorithms (!). After all that, it will generate them all as set, give you a zip with all the files, and the HTML code to paste on your <code>&lt;head&gt;</code>. You can check the result on this very website (fantinel.dev). The favicon should look fantastic on every device/browser combination.</p>\n<h2>Manual Mode</h2>\n<p>So, there are 5 types of favicons that we need to add, if we want to support every current browser:</p>\n<h3>1. Desktop browsers</h3>\n<ul><li>`favicon.ico`, for IE and any other legacy browsers. Optional if you don&#39;t want to support it;</li>\n  <li>`favicon-16x16.png`, the classic one that displays on the tabs;</li>\n  <li>`favicon-32x32.png`, used on Safari for macOS.</li></ul>\n<h3>2. Android browsers</h3>\n<ul><li>`android-chrome-192x192.png`, shown on the tab card and when added to home screen;</li>\n  <li>`android-chrome-512x512.png`, shown on the splash screen for when the website is installed to the phone. Optional if it&#39;s not a PWA;</li></ul>\n<h3>3. iOS Safari, and some Android browsers like Samsung Internet</h3>\n<ul><li>`apple-touch-icon.png`, a 180x180 file displayed when the website is added to home screen;</li></ul>\n<h3>4. Windows 8/10 start menu (optional)</h3>\n<ul><li>`mstile-150x150.png`, only used when your website is added to the start menu as a tile on Windows 8/10, and when not declared, defaults to `apple-touch-icon.png` instead.</li></ul>\n<h3>5. macOS Safari Pinned Tabs (optional)</h3>\n<ul><li>`safari-pinned-tab.svg` is used when users pin a tab on Safari for macOS. Basically, you declare a monochrome SVG and a theme color. Safari does the rest.</li></ul>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/fixing-favicons/safari-pinned-tabs-demo.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/fixing-favicons/safari-pinned-tabs-demo.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/fixing-favicons/safari-pinned-tabs-demo.png\" alt=\"Demo of Safari pinned tabs favicon behavior\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->How Safari pinned tab favicon works, screenshot of realfavicongenerator.net<!-- HTML_TAG_END --></figcaption>\n</picture>\n<p>With those files, you should be good to go on every single browser, by adding this to your <code>&lt;head&gt;</code>:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">html</div>\n\t<pre class=\"language-html\"><!-- HTML_TAG_START --><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>apple-touch-icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">sizes</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>180x180<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/apple-touch-icon.png<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image/png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">sizes</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>32x32<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/favicon-32x32.png<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image/png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">sizes</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>16x16<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/favicon-16x16.png?<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>manifest<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/site.webmanifest<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mask-icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/safari-pinned-tab.svg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#000000<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>shortcut icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/favicon.ico<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<h2>Single SVG Favicon</h2>\n<p>Something that’s starting to become a thing is having a single SVG favicon. Theoretically, SVGs are infinitely scalable, and should look good on all sizes. Unfortunately, browser support is not there yet.</p>\n<p><a href=\"https://caniuse.com/link-icon-svg\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Can I Use</a> reports that, currently (January 2021), only recent versions of Firefox and Chromium-based browsers support this feature. This means that Safari, non-Chromium Edge, IE, and some mobile browsers do not support it. Therefore, unless you want your favicon to just not appear in those browsers, you’d still have to use other file formats as well. The downside of this approach is that all favicons would look the same, and you won’t be able to customize and have differently-shaped icons for mobile devices, for example.</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">html</div>\n\t<pre class=\"language-html\"><!-- HTML_TAG_START --><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>favicon.svg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<h2>Wrapping Up</h2>\n<p>Favicons suck. Luckily, there are people working to make it suck less. With the approach presented on this article, your website should be able to display its best favicon on all browsers for years to come.</p>","css":{"code":"picture.svelte-1gy5t1o.svelte-1gy5t1o{position:relative;width:100%;height:100%}picture.svelte-1gy5t1o img.svelte-1gy5t1o{width:100%;height:100%}\n.code-block.svelte-qgch0c.svelte-qgch0c{display:block;position:relative;background-color:var(--code-background-color);color:var(--code-text-color);font-family:var(--mono-font);font-size:1rem;line-height:1.33em;border-radius:8px;box-shadow:var(--card-shadow);padding:30px 15px;margin:30px 0}.code-block.svelte-qgch0c pre{overflow-x:auto;scrollbar-color:var(--primary-color) var(--scrollbar-track-color);scrollbar-width:thin;padding-bottom:5px}.code-block.svelte-qgch0c pre::-webkit-scrollbar{height:8px}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb{background:var(--primary-color)}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb:hover{background:var(--primary-light-color)}.code-block.svelte-qgch0c .lang.svelte-qgch0c{position:absolute;right:0;top:-15px;background:inherit;border-radius:8px;padding:5px 10px;z-index:2;font-size:0.85em}.code-block.svelte-qgch0c .filename.svelte-qgch0c{background:inherit;border-top-left-radius:8px;border-top-right-radius:8px;margin-bottom:-2px;padding:5px 10px;position:absolute;left:0px;top:-15px;z-index:1}","map":null},"head":""}]},{"slug":"fixing-favicons","title":"How to fix your Favicons","date":"2021-01-06T00:00:00.000Z","excerpt":"Favicons suck. Luckily, there are ways to make them suck less.","tags":["Front-End","Guide","Favicon"],"html":"<p>Favicons kinda suck. They should be a simple icon that identifies your webpage on a bunch of scenarios, i.e. the icon displayed on the tab besides your website’s title, or the icon on the mobile browser’s bookmarks screen, or the icon on the phone’s home screen.</p>\n<p>Unfortunately, different browsers, OSs, and implementations throughout the years have ended up with many different files and meta tags, that we as developers need to handle otherwise we end up with missing or pixelated icons.</p>\n<h2>Easy Mode</h2>\n<p>I recently met my new best friend, <a href=\"https://realfavicongenerator.net/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Real Favicon Generator</a>. It took all these pains I just wrote about and just made it a breeze to handle. Best of all, it’s customizable!</p>\n<p>You just have to add in your existing favicon image (for best results, a SVG or high-quality PNG are recommended). From then on, the generator will display previews and allow customization of each category of favicon it will generate:</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/fixing-favicons/favicon-generator-customization.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/fixing-favicons/favicon-generator-customization.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/fixing-favicons/favicon-generator-customization.png\" alt=\"Screenshot of Real Favicon Generator&#39;s customization\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->The customization options allow you to set different icons depending on device and OS, and even generate icons with background colors if needed.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<p>At the bottom, you can even set up ways of avoiding caching issues, compression, and scaling algorithms (!). After all that, it will generate them all as set, give you a zip with all the files, and the HTML code to paste on your <code>&lt;head&gt;</code>. You can check the result on this very website (fantinel.dev). The favicon should look fantastic on every device/browser combination.</p>\n<h2>Manual Mode</h2>\n<p>So, there are 5 types of favicons that we need to add, if we want to support every current browser:</p>\n<h3>1. Desktop browsers</h3>\n<ul><li>`favicon.ico`, for IE and any other legacy browsers. Optional if you don&#39;t want to support it;</li>\n  <li>`favicon-16x16.png`, the classic one that displays on the tabs;</li>\n  <li>`favicon-32x32.png`, used on Safari for macOS.</li></ul>\n<h3>2. Android browsers</h3>\n<ul><li>`android-chrome-192x192.png`, shown on the tab card and when added to home screen;</li>\n  <li>`android-chrome-512x512.png`, shown on the splash screen for when the website is installed to the phone. Optional if it&#39;s not a PWA;</li></ul>\n<h3>3. iOS Safari, and some Android browsers like Samsung Internet</h3>\n<ul><li>`apple-touch-icon.png`, a 180x180 file displayed when the website is added to home screen;</li></ul>\n<h3>4. Windows 8/10 start menu (optional)</h3>\n<ul><li>`mstile-150x150.png`, only used when your website is added to the start menu as a tile on Windows 8/10, and when not declared, defaults to `apple-touch-icon.png` instead.</li></ul>\n<h3>5. macOS Safari Pinned Tabs (optional)</h3>\n<ul><li>`safari-pinned-tab.svg` is used when users pin a tab on Safari for macOS. Basically, you declare a monochrome SVG and a theme color. Safari does the rest.</li></ul>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/fixing-favicons/safari-pinned-tabs-demo.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/fixing-favicons/safari-pinned-tabs-demo.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/fixing-favicons/safari-pinned-tabs-demo.png\" alt=\"Demo of Safari pinned tabs favicon behavior\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->How Safari pinned tab favicon works, screenshot of realfavicongenerator.net<!-- HTML_TAG_END --></figcaption>\n</picture>\n<p>With those files, you should be good to go on every single browser, by adding this to your <code>&lt;head&gt;</code>:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">html</div>\n\t<pre class=\"language-html\"><!-- HTML_TAG_START --><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>apple-touch-icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">sizes</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>180x180<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/apple-touch-icon.png<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image/png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">sizes</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>32x32<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/favicon-32x32.png<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image/png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">sizes</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>16x16<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/favicon-16x16.png?<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>manifest<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/site.webmanifest<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mask-icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/safari-pinned-tab.svg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#000000<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>shortcut icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/favicon.ico<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<h2>Single SVG Favicon</h2>\n<p>Something that’s starting to become a thing is having a single SVG favicon. Theoretically, SVGs are infinitely scalable, and should look good on all sizes. Unfortunately, browser support is not there yet.</p>\n<p><a href=\"https://caniuse.com/link-icon-svg\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Can I Use</a> reports that, currently (January 2021), only recent versions of Firefox and Chromium-based browsers support this feature. This means that Safari, non-Chromium Edge, IE, and some mobile browsers do not support it. Therefore, unless you want your favicon to just not appear in those browsers, you’d still have to use other file formats as well. The downside of this approach is that all favicons would look the same, and you won’t be able to customize and have differently-shaped icons for mobile devices, for example.</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">html</div>\n\t<pre class=\"language-html\"><!-- HTML_TAG_START --><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>favicon.svg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<h2>Wrapping Up</h2>\n<p>Favicons suck. Luckily, there are people working to make it suck less. With the approach presented on this article, your website should be able to display its best favicon on all browsers for years to come.</p>","css":{"code":"picture.svelte-1gy5t1o.svelte-1gy5t1o{position:relative;width:100%;height:100%}picture.svelte-1gy5t1o img.svelte-1gy5t1o{width:100%;height:100%}\n.code-block.svelte-qgch0c.svelte-qgch0c{display:block;position:relative;background-color:var(--code-background-color);color:var(--code-text-color);font-family:var(--mono-font);font-size:1rem;line-height:1.33em;border-radius:8px;box-shadow:var(--card-shadow);padding:30px 15px;margin:30px 0}.code-block.svelte-qgch0c pre{overflow-x:auto;scrollbar-color:var(--primary-color) var(--scrollbar-track-color);scrollbar-width:thin;padding-bottom:5px}.code-block.svelte-qgch0c pre::-webkit-scrollbar{height:8px}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb{background:var(--primary-color)}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb:hover{background:var(--primary-light-color)}.code-block.svelte-qgch0c .lang.svelte-qgch0c{position:absolute;right:0;top:-15px;background:inherit;border-radius:8px;padding:5px 10px;z-index:2;font-size:0.85em}.code-block.svelte-qgch0c .filename.svelte-qgch0c{background:inherit;border-top-left-radius:8px;border-top-right-radius:8px;margin-bottom:-2px;padding:5px 10px;position:absolute;left:0px;top:-15px;z-index:1}","map":null},"head":"","readingTime":"6 min read","relatedPosts":[{"slug":"angular-pwa-how-to","title":"How to transform your Angular 6+ app into a PWA","date":"2019-03-10T00:00:00.000Z","excerpt":"Make your Angular app work like a native app on phones and desktop.","tags":["Angular","PWA","Guide","Front-End","JavaScript"],"html":"<p>Recently, I’ve converted my Angular 6 app into a PWA, allowing it to work offline and work like a native app on phones and desktop.</p>\n<p>Although there are many tutorials out there about turning Angular apps into PWAs, I’ve decided to write one simply because I faced some issues that were a bit hard to solve, so if you end up having them you don’t lose as much time as I did!</p>\n<div class=\"callout-block info svelte-1pi2pyj\"><div class=\"icon-wrapper svelte-1pi2pyj\"><svg width=\"100%\" height=\"100%\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M12 11.5V16.5\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path><path d=\"M12 7.51L12.01 7.49889\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path><path d=\"M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path></svg></div>\n\tThis tutorial assumes you are using Angular CLI. Possible issues are listed at the end of the tutorial.\n\n</div>\n<h2>Step 1. Installing the Angular PWA dependencies</h2>\n<p>This is the easiest part. Run <code>ng add @angular/pwa</code> in the root of your project (the folder where <code>package.json</code> is. The CLI will automagically add <code>@angular/pwa</code> and <code>@angular/service-worker</code> as dependencies in your package.json file, and add some placeholder icons in your <code>assets</code> folder.</p>\n<p>Besides that, it will create a file named <code>ngsw-config.json</code> in your root folder, as well as a <code>manifest.json</code> in your /src folder, and reference both in <code>index.html</code> and <code>app.module.ts</code>. These files are important as you’ll be using them to configure your PWA later.</p>\n<h2>Step 2. Setting up your manifest.json</h2>\n<p>The <code>manifest.json</code> file is the one that tells the browser/OS about your app. You can set the full and short names, theme color, icons, and more. <a href=\"https://developers.google.com/web/fundamentals/web-app-manifest/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">You can find more about its settings here.</a></p>\n<p>Don’t forget to update the auto-generated icons on <code>/assets/icons</code> folder! These are necessary so that your app icon shows up for devices of all DPI settings.</p>\n<h2>Step 3. Setting up ngsw-config.json</h2>\n<p>This file is the one that can configure how your PWA works. You can set up different installation behaviors, as well as handle cache updates. <a href=\"https://angular.io/guide/service-worker-config\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">The Angular documentation has got all options covered here.</a></p>\n<h2>Step 4. Test it out!</h2>\n<p>If you want to test out your app’s new PWA capabilities locally, <code>ng serve</code> won’t help you. Instead, you can run a web server in your machine easily by installing the <code>http-server</code> package from npm:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">shell</div>\n\t<pre class=\"language-shell\"><!-- HTML_TAG_START --><code class=\"language-shell\"><span class=\"token function\">npm</span> i http-server -g</code><!-- HTML_TAG_END --></pre>\n</div>\n<p>Then, compile your app in production mode:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">shell</div>\n\t<pre class=\"language-shell\"><!-- HTML_TAG_START --><code class=\"language-shell\">ng build --prod</code><!-- HTML_TAG_END --></pre>\n</div>\n<p>And finally, start the web server:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">shell</div>\n\t<pre class=\"language-shell\"><!-- HTML_TAG_START --><code class=\"language-shell\">http-server -p <span class=\"token number\">8080</span> -c-1 dist/<span class=\"token operator\">&lt;</span>project-name<span class=\"token operator\">></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>Your app should be up and running on <code>http://localhost:8080/</code> (or whichever port you chose). How do you know it’s a PWA? There are a few ways:</p>\n<h3>Check if the service worker is being registered</h3>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/angular-pwa-how-to/Service-Workers-1.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/angular-pwa-how-to/Service-Workers-1.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/angular-pwa-how-to/Service-Workers-1.png\" alt=\"Registered Service Worker\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->On dev console > Application > Service Workers, there should be a registered service worker for your app.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<h3>Use Chrome’s Audits feature to validate it as a PWA</h3>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/angular-pwa-how-to/Audits.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/angular-pwa-how-to/Audits.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/angular-pwa-how-to/Audits.png\" alt=\"Audits\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->On dev console > Audits, test it for Progressive Web Apps.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/angular-pwa-how-to/Passed-Audits.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/angular-pwa-how-to/Passed-Audits.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/angular-pwa-how-to/Passed-Audits.png\" alt=\"Audits passed\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->If everything went alright, you should see the highlighted results on the 'Passed audits' section.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<p>You may see some errors regarding the app not running over HTTPS. Don’t worry, that’s only because it’s running locally.</p>\n<h2>Step 5. Install it!</h2>\n<p>On Chrome, you may also see the option to install the app appear in the URL bar:</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/angular-pwa-how-to/Clipboard_2019-10-27-18-09-45.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/angular-pwa-how-to/Clipboard_2019-10-27-18-09-45.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/angular-pwa-how-to/Clipboard_2019-10-27-18-09-45.png\" alt=\"Chrome prompts you to install PWA\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  \n</picture>\n<p>After this, the app should already open on a separate window, and show up on your OS’s installed apps list!</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/angular-pwa-how-to/Clipboard_2019-10-27-18-11-28.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/angular-pwa-how-to/Clipboard_2019-10-27-18-11-28.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/angular-pwa-how-to/Clipboard_2019-10-27-18-11-28.png\" alt=\"Installed PWA on OS&#39; dock\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->Notice the PWA's own icon on my OS' dock! Success!<!-- HTML_TAG_END --></figcaption>\n</picture>\n<h2>Issues Encountered</h2>\n<p>Even though the proccess is quite straight-forward, I still faced some issues when running it in my app. They were because of Angular tools versions, and I probably had these issues because I’m still running an Angular 6 app (and Angular 7 is out as of now).</p>\n<h3>The <code>ng add @angular/pwa</code> command doesn’t create relevant files</h3>\n<p>This was a <a href=\"https://github.com/angular/angular-cli/issues/11914\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">reported bug</a> on the CLI. I had a bugged version (6.0.8) installed on my app. I updated it by running</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">shell</div>\n\t<pre class=\"language-shell\"><!-- HTML_TAG_START --><code class=\"language-shell\"><span class=\"token function\">npm</span> uninstall @angular/cli --save\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> @angular/cli@latest --save</code><!-- HTML_TAG_END --></pre>\n</div>\n<p>It updated itself to version 7.1.4 and worked flawlessly.</p>\n<p><em>Notice: this is related to the local cli version, the one displayed on your <code>package.json</code> file, not the global one installed in your machine.</em></p>\n<h3>Failed to register a ServiceWorker: A bad HTTP response code (404) was received when fetching the script.</h3>\n<p>This error shows up on the browser console after opening the app running on http-server. It happens because, when running <code>ng build --prod</code>, Angular isn’t sending the service worker’s files along with the ones from the app. You can confirm this by searching for the <code>ngsw-worker.js</code> file on the <code>/dist</code> folder of your app. If it’s not there, then you have this issue.</p>\n<p>This one took me the longest to find out. Another bug related to outdated versions of Angular tools. Simply changing <code>@angular-devkit/build-angular</code> version in devDependencies to <code>~0.10.0</code> solved it.</p>\n<h2>Finalizing</h2>\n<p>I hope you had success on setting up your PWA! Remember that, when published, it will only work if you serve your app through HTTPS.</p>\n<p>Thanks for reading!</p>","css":{"code":".callout-block.svelte-1pi2pyj.svelte-1pi2pyj{--bg-color:var(--callout-background-color);--accent-color:transparent;margin:40px 0 30px;padding:25px 25px;border-top-right-radius:10px;border-bottom-right-radius:10px;background:var(--bg-color);color:var(--text-color);border-left:4px solid var(--accent-color);position:relative}.callout-block.svelte-1pi2pyj .icon-wrapper.svelte-1pi2pyj{position:absolute;width:50px;height:50px;top:0;left:0;transform:translate(calc(-50% - 1.5px), -50%);background:var(--post-page-background-color);padding:8px;border-radius:50%;fill:var(--accent-color);color:var(--accent-color)}.callout-block.info.svelte-1pi2pyj.svelte-1pi2pyj{--bg-color:var(--callout-info-background-color);--accent-color:var(--callout-info-accent-color)}.callout-block.warning.svelte-1pi2pyj.svelte-1pi2pyj{--bg-color:var(--callout-warning-background-color);--accent-color:var(--callout-warning-accent-color)}.callout-block.error.svelte-1pi2pyj.svelte-1pi2pyj{--bg-color:var(--callout-error-background-color);--accent-color:var(--callout-error-accent-color)}.callout-block.success.svelte-1pi2pyj.svelte-1pi2pyj{--bg-color:var(--callout-success-background-color);--accent-color:var(--callout-success-accent-color)}\n.code-block.svelte-qgch0c.svelte-qgch0c{display:block;position:relative;background-color:var(--code-background-color);color:var(--code-text-color);font-family:var(--mono-font);font-size:1rem;line-height:1.33em;border-radius:8px;box-shadow:var(--card-shadow);padding:30px 15px;margin:30px 0}.code-block.svelte-qgch0c pre{overflow-x:auto;scrollbar-color:var(--primary-color) var(--scrollbar-track-color);scrollbar-width:thin;padding-bottom:5px}.code-block.svelte-qgch0c pre::-webkit-scrollbar{height:8px}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb{background:var(--primary-color)}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb:hover{background:var(--primary-light-color)}.code-block.svelte-qgch0c .lang.svelte-qgch0c{position:absolute;right:0;top:-15px;background:inherit;border-radius:8px;padding:5px 10px;z-index:2;font-size:0.85em}.code-block.svelte-qgch0c .filename.svelte-qgch0c{background:inherit;border-top-left-radius:8px;border-top-right-radius:8px;margin-bottom:-2px;padding:5px 10px;position:absolute;left:0px;top:-15px;z-index:1}\npicture.svelte-1gy5t1o.svelte-1gy5t1o{position:relative;width:100%;height:100%}picture.svelte-1gy5t1o img.svelte-1gy5t1o{width:100%;height:100%}","map":null},"head":""},{"slug":"css-scroll-snapping","title":"CSS Scroll Snapping - Improve Scrolling without JS","date":"2020-08-03T00:00:00.000Z","excerpt":"Learn how to snap scrolling positions with CSS only.","tags":["Front-End","CSS","Guide"],"html":"<p>CSS is evolving constantly and the past few years have brought us amazing stuff. It is getting easier to make smooth and complete experiences without having to use JavaScript at all. Case in point: Scroll Snapping.</p>\n<p>It is an easy way to guarantee that users will scroll to the correct portion of your page or of a container. Picture a landing page that is easily swipable/scrollable between sections, or swipable cards. Take in mind how Android’s Recent Apps screen works, for example:</p>\n<p><img src=\"/images/posts/css-scroll-snapping/android-scroll-snapping.gif\" alt=\"Android's Recent Apps screen has scroll mapping between app cards\"></p>\n<p>You can see that Android never allows the end of a scroll to be in a place between cards. There’s a certain threshold that determines that the scroll will snap into the nearest card and put it in the center. All that while still keeping scrolling momentum, allowing you to go from one edge of the list to another in a single scroll if you want to.</p>\n<p>Until recently, you’d have to resort to JavaScript code to make a similar behavior on the web. But now, all you need is CSS, which makes things more performant, consistent and reliable! Browser support is already pretty good, with all major browser engines already supporting it fully. Check out browser support on <a href=\"https://caniuse.com/#feat=css-snappoints\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">caniuse.com</a>.</p>\n<p>I’ve recently added scroll snapping to my own website. You can check it out on the “Work Experience” section in the <a href=\"https://fantinel.dev\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Home page</a>. It’s specially great on mobile!</p>\n<h2>How?</h2>\n<p>There are two main CSS properties that make the magic happen, one for the parent element, and one for its children.</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">css</div>\n\t<pre class=\"language-css\"><!-- HTML_TAG_START --><code class=\"language-css\"><span class=\"token selector\">.parent</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">scroll-snap-type</span><span class=\"token punctuation\">:</span> y mandatory<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.child</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">scroll-snap-align</span><span class=\"token punctuation\">:</span> start<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code><!-- HTML_TAG_END --></pre>\n</div>\n<h3>scroll-snap-type</h3>\n<p>This property tells the browser that the parent element uses scroll snapping. We are given some options on how snapping must work. <code>y</code> indicates that the scroll happens vertically, while <code>x</code> means horizontally. We can also pass the <code>mandatory</code> and <code>proximity</code> options. </p>\n<p>We use <code>mandatory</code> to tell that the browser <em>must</em> snap to a snap point when the user stops scrolling. This means that if the next snap point becomes visible on the screen and scrolling stops, the browser will automatically snap to the next one. In the other end, with <code>proximity</code>, things are less strict. The browser will only snap to the next snap point if scrolling gets past a certain threshold. Both values are useful, their use will depend on the situation you’re applying it to.</p>\n<iframe height=\"500\" style=\"width: 100%;\" scrolling=\"no\" title=\"scroll-snap-type: Mandatory vs Proximity\" src=\"https://codepen.io/matfantinel/embed/preview/LYNPdpE?default-tab=result&theme-id=dark\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">See the Pen <a href=\"https://codepen.io/matfantinel/pen/LYNPdpE\">scroll-snap-type: Mandatory vs Proximity</a> by Matheus Fantinel (<a href=\"https://codepen.io/matfantinel\">@matfantinel</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>\n<h3>scroll-snap-align</h3>\n<p>This is a property you add to the children that specifies where the snap points will be in the element. Which means that, whenever the browser automatically snaps the scroll to the element, it will either go to the left/top edge (<code>start</code>), center (<code>center</code>), or right/bottom edge (<code>end</code>) of the element. This property pretty much only makes a difference if the children are bigger than the parent’s display size.</p>\n<h3>scroll-padding and scroll-margin</h3>\n<p>To make things even better, we can use the <code>scroll-padding</code> (for parent) and <code>scroll-margin</code> (for children) properties. They add some space before/after the elements that are only considered when scrolling. The best way to implement them is by trying it out after you build your scroll snapping goodiness.</p>\n<p>You can check the documentation over on <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Scroll_Snap\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Mozilla Developer Network</a> for more info.</p>\n<h2>Wrapping Up</h2>\n<p>Scroll snapping is a sign that the web is maturing. For years we’ve been bloating websites with a lot of JavaScript for very simple visual tasks, and now CSS is slowly evolving to take some space back. It’s an important evolution because Web technologies are being used to build every kind of application, and its native feature set needs to be good enough to compete with native or native-ish counterparts like Flutter, Swift, or Kotlin.</p>\n<p>Thanks for reading!</p>","css":{"code":".code-block.svelte-qgch0c.svelte-qgch0c{display:block;position:relative;background-color:var(--code-background-color);color:var(--code-text-color);font-family:var(--mono-font);font-size:1rem;line-height:1.33em;border-radius:8px;box-shadow:var(--card-shadow);padding:30px 15px;margin:30px 0}.code-block.svelte-qgch0c pre{overflow-x:auto;scrollbar-color:var(--primary-color) var(--scrollbar-track-color);scrollbar-width:thin;padding-bottom:5px}.code-block.svelte-qgch0c pre::-webkit-scrollbar{height:8px}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb{background:var(--primary-color)}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb:hover{background:var(--primary-light-color)}.code-block.svelte-qgch0c .lang.svelte-qgch0c{position:absolute;right:0;top:-15px;background:inherit;border-radius:8px;padding:5px 10px;z-index:2;font-size:0.85em}.code-block.svelte-qgch0c .filename.svelte-qgch0c{background:inherit;border-top-left-radius:8px;border-top-right-radius:8px;margin-bottom:-2px;padding:5px 10px;position:absolute;left:0px;top:-15px;z-index:1}","map":null},"head":""},{"slug":"microfrontends","title":"Micro Frontends: Solving the Legacy JavaScript Problem","date":"2019-03-17T00:00:00.000Z","excerpt":"Finally a way to modernize that legacy project you keep complaining about!","tags":["Front-End","JavaScript","Guide"],"html":"<p>It’s a running joke in the development community that if a JS programmer goes into a coma for 6 months, he will need to learn everything again by the time he wakes up. This is a consequence of JavaScript’s open, decentralized nature. It’s both a blessing and a curse.</p>\n<p>All the time there are new frameworks and libraries meant to make it easier to develop in JS, at least for a specific use. Sometimes they are effectively better, sometimes they just bring a new workflow, and as a developer it can be quite fun to learn them and explore new paradigms.</p>\n<p>However, in the “enterprise world”, reality is different. We build big, complex applications that usually rely on a framework’s properties to work the way they do. Recent frameworks like React, Vue and Angular offer an easy way to break an application in smaller, more independent chunks that can be maintained separately, but they still rely on the main framework’s version.</p>\n<p>Front-end development is becoming more and more like back-end development, with more complex architectures. Naturally, the concept of microservices was brought over and is being called Micro Frontends.</p>\n<h2>What do Micro Frontends consist of?</h2>\n<p>First, we must define what monolithic frontends are. You probably work on one of them, since they are basically every web app that is made with a specific framework and version, and only works by itself without resorting to redirects and iframes. Hence the monolith-derived name.</p>\n<p>Micro Frontends, however, can be made of several pieces of different technologies - all in a “central” app that puts the puzzle pieces together.</p>\n<p>Since frameworks like React and Angular are already very popular, the concept of componentizing our apps is well known, and it’s basically what Micro Frontends consist of. It uses the Custom Elements API, a web standard that is being implemented by all major browsers (with polyfills for older ones!), to provide a common ground between different components written in Angular, React, Vue, or even good old pure JS!</p>\n<p>To do that, they work in a similar way modern frameworks do, with an Input/Output pattern and a very simple way to import them into the parent’s HTML. We’ll see more about this later.</p>\n<h2>How does that solve the legacy problem?</h2>\n<p>You’ve probably already worked on a big app that was made years ago, and used “ancient” technology. If you haven’t, lucky you! But in many enterprise environments, working with JQuery, KnockoutJS, AngularJS (v1.x) or even older JS technologies is the norm. While usually there is willingness to update the tech stack in order to gain more productivity and performance, it is usually not feasible to update an entire behemoth all at once. Add the fact that companies and their products must move fast with features and changes, and the chance to update is close to zero.</p>\n<p>One alternative is to create a second app with a new technology and make the change in multiple steps, with routes handling which app is to be shown. This however, has many issues:</p>\n<ul><li>You have to duplicate many things, like fixed menus, authentication handling, and all the base architecture. Even worse than duplicating is <strong>maintaining</strong> both of them afterwards;</li>\n<li>The user experience will be severely harmed when your app redirects to a different one frequently;</li>\n<li>When the new technology you use becomes obsolete, you’ll have to deal with the problem all over again.</li></ul>\n<p>Other alternative is to use iframes, which brings a lot of problems since communication between both pages is not very straightforward and the experience feels clunky. Not very good.</p>\n<p>However, when using Micro Frontends, you are able to:</p>\n<ul><li>Migrate technologies in small steps:</li>\n<li>Communication between both technologies is easy;</li>\n<li>The user does not notice the use of two different stacks - they all merge seamlessly in the same experience;</li>\n<li>There is no need to maintain more than one version of a component;</li>\n<li>Encourages good use of components and code reuse.</li></ul>\n<p>At my job, we had our main application written in AngularJS, and since it was a pretty huge application, migrating to a newer stack was just not feasible. We then had a project that included a complete overhaul of the design of the application, we felt it was a good time to use newer technologies.</p>\n<p>Since we had a side project written in Angular 6 and most of us had knowledge of this framework, we decided to write new components for our main app in Angular 7. While the plan was to update the entire app, rewriting it entirely and publishing all at once would bring a lot of problems.</p>\n<p>We then decided to use the Micro Frontends approach, rewriting our pages/components one by one and releasing it in “packages”. We did that by creating Custom Elements in Angular 7 and integrating them with the older AngularJS app. Since we would be modernizing entire pages at once, there wouldn’t be many changes on the older app. The tried-and-tested older app was still responsible for managing routes and authentication, and would just display our newer components as they were built. <em>This proved to be a successful approach that allowed us to both modernize our tech stack, minimize user impact, we kept delivering value to our customers and, since the project was broken in smaller pieces, we had flexibility to tackle other projects in between.</em></p>\n<h2>How do they work in practice?</h2>\n<p>For this article, I am going to create a custom element with Angular 7 and use it in a simple html file. I’ve created a sample app on GitHub. <a href=\"https://github.com/matfantinel/custom-elements-sample\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">You can check the full code here.</a></p>\n<h3>Creating the Custom Element</h3>\n<p>First, we create a new Angular 7 app:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">shell</div>\n\t<pre class=\"language-shell\"><!-- HTML_TAG_START --><code class=\"language-shell\">ng new angular-elements-sample --prefix custom</code><!-- HTML_TAG_END --></pre>\n</div>\n<p>The CLI will ask you for some settings, you can choose whatever you like. Since we’re just using Custom Components in this example, I chose not to apply Angular routing.</p>\n<p>Then, we need to add the Angular package that brings Custom Elements support:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">shell</div>\n\t<pre class=\"language-shell\"><!-- HTML_TAG_START --><code class=\"language-shell\">ng <span class=\"token function\">add</span> @angular/elements</code><!-- HTML_TAG_END --></pre>\n</div>\n<p>Now, on tsconfig.json file, change target to “es2015”.</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">json</div>\n\t<pre class=\"language-json\"><!-- HTML_TAG_START --><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"compileOnSave\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    ...\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"es2015\"</span><span class=\"token punctuation\">,</span>\n    ...\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>Then, create a new component in your app:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">shell</div>\n\t<pre class=\"language-shell\"><!-- HTML_TAG_START --><code class=\"language-shell\">ng g component button</code><!-- HTML_TAG_END --></pre>\n</div>\n<p>On this component, we should set its encapsulation to ShadowDom. This means that its styles will be limited to itself, and styles from the parent application won’t apply to the child component, or vice-versa. Also, we’ll be declaring an Input() property, that the element will receive from the parent, and a CustomEvent, a way to communicate events with other applications/components in the same page.</p>\n<p>Below is the full component Typescript code:</p>\n<div class=\"code-block svelte-qgch0c\"><div class=\"filename svelte-qgch0c\">button.component.ts</div>\n\t<div class=\"lang svelte-qgch0c\">typescript</div>\n\t<pre class=\"language-typescript\"><!-- HTML_TAG_START --><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Component<span class=\"token punctuation\">,</span> OnInit<span class=\"token punctuation\">,</span> ViewEncapsulation<span class=\"token punctuation\">,</span> Input<span class=\"token punctuation\">,</span> ElementRef <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/core'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Component</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  selector<span class=\"token operator\">:</span> <span class=\"token string\">'custom-button'</span><span class=\"token punctuation\">,</span>\n  templateUrl<span class=\"token operator\">:</span> <span class=\"token string\">'./button.component.html'</span><span class=\"token punctuation\">,</span>\n  styleUrls<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'./button.component.scss'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  encapsulation<span class=\"token operator\">:</span> ViewEncapsulation<span class=\"token punctuation\">.</span>ShadowDom\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ButtonComponent</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">OnInit</span> <span class=\"token punctuation\">&#123;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Input</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> label <span class=\"token operator\">=</span> <span class=\"token string\">'Default Label'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> clicksCount<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  htmlElement<span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">public</span> hostElement<span class=\"token operator\">:</span> ElementRef<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>htmlElement <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hostElement<span class=\"token punctuation\">.</span>nativeElement <span class=\"token keyword\">as</span> HTMLElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function\">ngOnInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token punctuation\">&#125;</span> \n\n  <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clicksCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> action <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CustomEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'action'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n      detail<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        clicksCount<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clicksCount\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>htmlElement<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>The HTML template is very simple:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">html</div>\n\t<pre class=\"language-html\"><!-- HTML_TAG_START --><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">(click)</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>handleClick()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>&#123;&#123; label &#125;&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>Then, we must declare our Custom Element in our app.module.ts file:</p>\n<div class=\"code-block svelte-qgch0c\"><div class=\"filename svelte-qgch0c\">app.module.ts</div>\n\t<div class=\"lang svelte-qgch0c\">typescript</div>\n\t<pre class=\"language-typescript\"><!-- HTML_TAG_START --><code class=\"language-typescript\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">NgModule</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  declarations<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token operator\">...</span>\n    ButtonComponent<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  entryComponents<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    ButtonComponent\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  providers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  bootstrap<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppModule</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> injector<span class=\"token operator\">:</span> Injector<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function\">ngDoBootstrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//Declares our component's Custom Element</span>\n    <span class=\"token comment\">//Then defines it in the DOM so it can be used in other projects</span>\n    <span class=\"token keyword\">const</span> buttonElement <span class=\"token operator\">=</span> <span class=\"token function\">createCustomElement</span><span class=\"token punctuation\">(</span>ButtonComponent<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> injector<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>injector <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    customElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'custom-button'</span><span class=\"token punctuation\">,</span> buttonElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>To make it easier to use our component in another app, we can use some script magic to concat all the .js files produced by <code>ng build --prod</code> into a single properly-named file. To do that, I created the following script in package.json’s script session:</p>\n<div class=\"code-block svelte-qgch0c\"><div class=\"filename svelte-qgch0c\">package.json</div>\n\t<div class=\"lang svelte-qgch0c\">json</div>\n\t<pre class=\"language-json\"><!-- HTML_TAG_START --><code class=\"language-json\"><span class=\"token property\">\"package\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ng build --prod &amp;&amp; cat ./dist/runtime.js ./dist/polyfills.js ./dist/scripts.js ./dist/main.js > CustomElementsSample.js\"</span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>If you’re on a Windows system, you won’t have access to cat. In that case install <code>jscat</code> from npm and change the cat command to jscat.</p>\n<p>For that to work though, we need to disable output hashing on the angular.json file. This makes sure that the generated file names are always the same. Just change <code>&quot;outputHashing&quot;: &quot;all&quot;</code> to <code>&quot;outputHashing&quot;: &quot;none&quot;</code>.</p>\n<p>Now we have a single js file that contains our custom element, and we can use it in our sample legacy app!</p>\n<h3>Using the Custom Element</h3>\n<p>Check this sample html file:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">html</div>\n\t<pre class=\"language-html\"><!-- HTML_TAG_START --><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>This is a legacy app that uses Angular 7 custom elements<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../angular-elements-sample/CustomElementsSample.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span>\n            button &#123;\n                background-color: red;\n                color: white;\n            &#125;\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>custom-button</span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Legacy app label<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>custom-button</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>counter<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span> clicks!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span>\n            const button = document.querySelector('custom-button');\n            button.addEventListener('action', event => &#123;\n                document.getElementById('counter').innerHTML = event.detail.clicksCount;\n            &#125;);\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>You can see that we are successfully being able to listen for events, pass the label parameter, and that the button style from the html does not apply to the component. Success!</p>\n<h2>Caveats</h2>\n<p>As with all things, there are some disadvantages in this approach:</p>\n<h3>Browser Support</h3>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/microfrontends/Browser-Support.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/microfrontends/Browser-Support.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/microfrontends/Browser-Support.png\" alt=\"Browser support table\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->You can check this information on the <a href='https://caniuse.com/custom-elementsv1' target='_blank'>Can I Use</a> website.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<p>As of March 2019, only Firefox, Chrome and Chromium-based browsers fully support custom elements, while Safari implements them only partially. However, <a href=\"https://github.com/webcomponents/custom-elements\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">there’s a polyfill available</a> to bring support to older browsers.</p>\n<h3>JS Bundle size</h3>\n<p>Since you’re running components using other frameworks, you’ll still have to load them on the user’s side. If your app uses AngularJS, Angular, JQuery and React in different components, you’ll have to load all their runtimes before the app is fully functional. In this case, your better option is to minimize the bundle as much as possible, and use <a href=\"/what-are-pwas-and-why-should-i-care-about-them\">Service Workers and PWA capabilities</a> to improve caching on your app.</p>\n<h3>Communication between components is not as good as within the same framework</h3>\n<p>This should not be much of an issue unless you break a page into too many components with different technologies. Even then, communication with other components is very doable, just not as good as it would be between Angular-Angular or React-React components.</p>\n<h2>Wrapping up</h2>\n<p>Micro Frontends are a consequence of the complexicity that front-end has developed in the last few years. It is very good to see technology move forward, and we may get lost amidst so much change, so it is good to know that we don’t have to be afraid to not migrate our apps to the latest and greatest. They bring us the advantages of newer frameworks while minimizing the disadvantages.</p>\n<p>Thanks for reading!</p>","css":{"code":".code-block.svelte-qgch0c.svelte-qgch0c{display:block;position:relative;background-color:var(--code-background-color);color:var(--code-text-color);font-family:var(--mono-font);font-size:1rem;line-height:1.33em;border-radius:8px;box-shadow:var(--card-shadow);padding:30px 15px;margin:30px 0}.code-block.svelte-qgch0c pre{overflow-x:auto;scrollbar-color:var(--primary-color) var(--scrollbar-track-color);scrollbar-width:thin;padding-bottom:5px}.code-block.svelte-qgch0c pre::-webkit-scrollbar{height:8px}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb{background:var(--primary-color)}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb:hover{background:var(--primary-light-color)}.code-block.svelte-qgch0c .lang.svelte-qgch0c{position:absolute;right:0;top:-15px;background:inherit;border-radius:8px;padding:5px 10px;z-index:2;font-size:0.85em}.code-block.svelte-qgch0c .filename.svelte-qgch0c{background:inherit;border-top-left-radius:8px;border-top-right-radius:8px;margin-bottom:-2px;padding:5px 10px;position:absolute;left:0px;top:-15px;z-index:1}\npicture.svelte-1gy5t1o.svelte-1gy5t1o{position:relative;width:100%;height:100%}picture.svelte-1gy5t1o img.svelte-1gy5t1o{width:100%;height:100%}","map":null},"head":""}]},{"slug":"github-profile-readme","title":"Spicing Up your GitHub Profile with HTML and CSS","date":"2021-01-02T00:00:00.000Z","excerpt":"Make your GitHub profile more appealing with what you do best: code!","tags":["GitHub","Guide","SVG","Online Presence"],"html":"<p>Last year, GitHub added a new cool feature for the user profile. You can now add a README file to it, and it will show up besides your profile pic. This is great for talking a bit about yourself and what you do, putting some contact info, or simply making a cool first impression.</p>\n<h2>Creating the Repository</h2>\n<p>For adding this to your profile, there’s a little secret. Instead of an option in your “Edit Profile” settings, this is achieved by <span class=\"wrapper svelte-1sgfl7c\">creating a new repository with the same name as your GitHub username.</span></p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/github-profile-readme/repo-creation.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/github-profile-readme/repo-creation.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/github-profile-readme/repo-creation.png\" alt=\"Screenshot of GitHub repository creation\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->🎉️ Creating a new repo with the same name as your username immediatelly makes GitHub praise you for finding out this secret.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<p>You can choose to initialize the repository with a README file already. After that, the content of this file will already start showing on your personal profile.</p>\n<p>The README is just a Markdown file, which may make you think initially that you can only write in stuff with GitHub’s default styling. However, when you get creative, there’s a lot more you can do. You can add images and GIFs to it, sure, but SVGs are the real heros here. By adding SVG files to the Markdown file, you enable a lot of possibilities. SVG files support HTML tags and CSS styles (including animations!)</p>\n<p>For adding HTML to the SVG, we can use the <code>&lt;foreignObject&gt;</code> tag. This is an element that can include elements from different XML namespaces. Which means that even though you’re in a SVG namespace, you can use XHTML elements and all the features it supports, including the <code>&lt;style&gt;</code> tag for adding CSS.</p>\n<p>As an example, check out the SVG file I use to add the “tags” with technologies to my profile:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">html</div>\n\t<pre class=\"language-html\"><!-- HTML_TAG_START --><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span> <span class=\"token attr-name\">fill</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>none<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">viewBox</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0 0 300 120<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>300<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>120<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2000/svg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>foreignObject</span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100%<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/1999/xhtml<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span>\n        .tags &#123;\n          display: flex;\n          flex-wrap: wrap;\n          height: 100%;\n          width: 100%;\n        &#125;\n        .tag &#123;\n          background-color: #E3FFFF;\n          border-radius: 0.25em;\n          color: #0ca4a5;\n          border: 1px solid #0ca4a5;\n          display: inline-block;\n          font-size: 0.75em;\n          line-height: 2em;\n          margin: 0.125em;\n          padding: 0 0.5em;\n          text-decoration: none;\n          font-family: sans-serif;\n        &#125;\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tags<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tag<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Angular<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tag<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Vue(X)<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tag<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>JavaScript<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tag<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>TypeScript<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tags<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tag<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>(S)CSS<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tag<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Building UIs<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tag<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Web Components<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tags<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tag<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Ionic<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tag<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Electron<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tag<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>.NET<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>foreignObject</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>From there on, the possibilities are endless. On my profile, I added my personal logo SVG and the same drawing animation used on my own website.</p>\n<figure markdown=\"1\"><p><img src=\"/images/posts/github-profile-readme/my-profile.gif\" alt=\"Animation on my GitHub Profile\"></p>\n<figcaption>Using CSS animations inside the SVG, I was able to mimic the animation on my website.</figcaption></figure>\n<p>Feel free to check out <a href=\"https://github.com/matfantinel/matfantinel\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">the source code</a> to find out how it works.</p>\n<h2>Inspiration</h2>\n<p>Some people have compiled <a href=\"https://github.com/abhisheknaiidu/awesome-github-profile-readme\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">a list of amazing examples and inspirations for your profile</a>. Some are minimalistic, others more complex, and some even get data from APIs (!). My favorite is <a href=\"https://github.com/BrunnerLivio\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">this one from Livio Brunner</a>, which definitely brings all the best things from 2000’s web.</p>","css":{"code":".wrapper.svelte-1sgfl7c{background:var(--highlight-marker-url)}\npicture.svelte-1gy5t1o.svelte-1gy5t1o{position:relative;width:100%;height:100%}picture.svelte-1gy5t1o img.svelte-1gy5t1o{width:100%;height:100%}\n.code-block.svelte-qgch0c.svelte-qgch0c{display:block;position:relative;background-color:var(--code-background-color);color:var(--code-text-color);font-family:var(--mono-font);font-size:1rem;line-height:1.33em;border-radius:8px;box-shadow:var(--card-shadow);padding:30px 15px;margin:30px 0}.code-block.svelte-qgch0c pre{overflow-x:auto;scrollbar-color:var(--primary-color) var(--scrollbar-track-color);scrollbar-width:thin;padding-bottom:5px}.code-block.svelte-qgch0c pre::-webkit-scrollbar{height:8px}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb{background:var(--primary-color)}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb:hover{background:var(--primary-light-color)}.code-block.svelte-qgch0c .lang.svelte-qgch0c{position:absolute;right:0;top:-15px;background:inherit;border-radius:8px;padding:5px 10px;z-index:2;font-size:0.85em}.code-block.svelte-qgch0c .filename.svelte-qgch0c{background:inherit;border-top-left-radius:8px;border-top-right-radius:8px;margin-bottom:-2px;padding:5px 10px;position:absolute;left:0px;top:-15px;z-index:1}","map":null},"head":"","readingTime":"6 min read","relatedPosts":[{"slug":"angular-pwa-how-to","title":"How to transform your Angular 6+ app into a PWA","date":"2019-03-10T00:00:00.000Z","excerpt":"Make your Angular app work like a native app on phones and desktop.","tags":["Angular","PWA","Guide","Front-End","JavaScript"],"html":"<p>Recently, I’ve converted my Angular 6 app into a PWA, allowing it to work offline and work like a native app on phones and desktop.</p>\n<p>Although there are many tutorials out there about turning Angular apps into PWAs, I’ve decided to write one simply because I faced some issues that were a bit hard to solve, so if you end up having them you don’t lose as much time as I did!</p>\n<div class=\"callout-block info svelte-1pi2pyj\"><div class=\"icon-wrapper svelte-1pi2pyj\"><svg width=\"100%\" height=\"100%\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M12 11.5V16.5\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path><path d=\"M12 7.51L12.01 7.49889\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path><path d=\"M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path></svg></div>\n\tThis tutorial assumes you are using Angular CLI. Possible issues are listed at the end of the tutorial.\n\n</div>\n<h2>Step 1. Installing the Angular PWA dependencies</h2>\n<p>This is the easiest part. Run <code>ng add @angular/pwa</code> in the root of your project (the folder where <code>package.json</code> is. The CLI will automagically add <code>@angular/pwa</code> and <code>@angular/service-worker</code> as dependencies in your package.json file, and add some placeholder icons in your <code>assets</code> folder.</p>\n<p>Besides that, it will create a file named <code>ngsw-config.json</code> in your root folder, as well as a <code>manifest.json</code> in your /src folder, and reference both in <code>index.html</code> and <code>app.module.ts</code>. These files are important as you’ll be using them to configure your PWA later.</p>\n<h2>Step 2. Setting up your manifest.json</h2>\n<p>The <code>manifest.json</code> file is the one that tells the browser/OS about your app. You can set the full and short names, theme color, icons, and more. <a href=\"https://developers.google.com/web/fundamentals/web-app-manifest/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">You can find more about its settings here.</a></p>\n<p>Don’t forget to update the auto-generated icons on <code>/assets/icons</code> folder! These are necessary so that your app icon shows up for devices of all DPI settings.</p>\n<h2>Step 3. Setting up ngsw-config.json</h2>\n<p>This file is the one that can configure how your PWA works. You can set up different installation behaviors, as well as handle cache updates. <a href=\"https://angular.io/guide/service-worker-config\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">The Angular documentation has got all options covered here.</a></p>\n<h2>Step 4. Test it out!</h2>\n<p>If you want to test out your app’s new PWA capabilities locally, <code>ng serve</code> won’t help you. Instead, you can run a web server in your machine easily by installing the <code>http-server</code> package from npm:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">shell</div>\n\t<pre class=\"language-shell\"><!-- HTML_TAG_START --><code class=\"language-shell\"><span class=\"token function\">npm</span> i http-server -g</code><!-- HTML_TAG_END --></pre>\n</div>\n<p>Then, compile your app in production mode:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">shell</div>\n\t<pre class=\"language-shell\"><!-- HTML_TAG_START --><code class=\"language-shell\">ng build --prod</code><!-- HTML_TAG_END --></pre>\n</div>\n<p>And finally, start the web server:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">shell</div>\n\t<pre class=\"language-shell\"><!-- HTML_TAG_START --><code class=\"language-shell\">http-server -p <span class=\"token number\">8080</span> -c-1 dist/<span class=\"token operator\">&lt;</span>project-name<span class=\"token operator\">></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>Your app should be up and running on <code>http://localhost:8080/</code> (or whichever port you chose). How do you know it’s a PWA? There are a few ways:</p>\n<h3>Check if the service worker is being registered</h3>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/angular-pwa-how-to/Service-Workers-1.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/angular-pwa-how-to/Service-Workers-1.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/angular-pwa-how-to/Service-Workers-1.png\" alt=\"Registered Service Worker\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->On dev console > Application > Service Workers, there should be a registered service worker for your app.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<h3>Use Chrome’s Audits feature to validate it as a PWA</h3>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/angular-pwa-how-to/Audits.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/angular-pwa-how-to/Audits.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/angular-pwa-how-to/Audits.png\" alt=\"Audits\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->On dev console > Audits, test it for Progressive Web Apps.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/angular-pwa-how-to/Passed-Audits.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/angular-pwa-how-to/Passed-Audits.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/angular-pwa-how-to/Passed-Audits.png\" alt=\"Audits passed\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->If everything went alright, you should see the highlighted results on the 'Passed audits' section.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<p>You may see some errors regarding the app not running over HTTPS. Don’t worry, that’s only because it’s running locally.</p>\n<h2>Step 5. Install it!</h2>\n<p>On Chrome, you may also see the option to install the app appear in the URL bar:</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/angular-pwa-how-to/Clipboard_2019-10-27-18-09-45.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/angular-pwa-how-to/Clipboard_2019-10-27-18-09-45.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/angular-pwa-how-to/Clipboard_2019-10-27-18-09-45.png\" alt=\"Chrome prompts you to install PWA\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  \n</picture>\n<p>After this, the app should already open on a separate window, and show up on your OS’s installed apps list!</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/angular-pwa-how-to/Clipboard_2019-10-27-18-11-28.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/angular-pwa-how-to/Clipboard_2019-10-27-18-11-28.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/angular-pwa-how-to/Clipboard_2019-10-27-18-11-28.png\" alt=\"Installed PWA on OS&#39; dock\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->Notice the PWA's own icon on my OS' dock! Success!<!-- HTML_TAG_END --></figcaption>\n</picture>\n<h2>Issues Encountered</h2>\n<p>Even though the proccess is quite straight-forward, I still faced some issues when running it in my app. They were because of Angular tools versions, and I probably had these issues because I’m still running an Angular 6 app (and Angular 7 is out as of now).</p>\n<h3>The <code>ng add @angular/pwa</code> command doesn’t create relevant files</h3>\n<p>This was a <a href=\"https://github.com/angular/angular-cli/issues/11914\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">reported bug</a> on the CLI. I had a bugged version (6.0.8) installed on my app. I updated it by running</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">shell</div>\n\t<pre class=\"language-shell\"><!-- HTML_TAG_START --><code class=\"language-shell\"><span class=\"token function\">npm</span> uninstall @angular/cli --save\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> @angular/cli@latest --save</code><!-- HTML_TAG_END --></pre>\n</div>\n<p>It updated itself to version 7.1.4 and worked flawlessly.</p>\n<p><em>Notice: this is related to the local cli version, the one displayed on your <code>package.json</code> file, not the global one installed in your machine.</em></p>\n<h3>Failed to register a ServiceWorker: A bad HTTP response code (404) was received when fetching the script.</h3>\n<p>This error shows up on the browser console after opening the app running on http-server. It happens because, when running <code>ng build --prod</code>, Angular isn’t sending the service worker’s files along with the ones from the app. You can confirm this by searching for the <code>ngsw-worker.js</code> file on the <code>/dist</code> folder of your app. If it’s not there, then you have this issue.</p>\n<p>This one took me the longest to find out. Another bug related to outdated versions of Angular tools. Simply changing <code>@angular-devkit/build-angular</code> version in devDependencies to <code>~0.10.0</code> solved it.</p>\n<h2>Finalizing</h2>\n<p>I hope you had success on setting up your PWA! Remember that, when published, it will only work if you serve your app through HTTPS.</p>\n<p>Thanks for reading!</p>","css":{"code":".callout-block.svelte-1pi2pyj.svelte-1pi2pyj{--bg-color:var(--callout-background-color);--accent-color:transparent;margin:40px 0 30px;padding:25px 25px;border-top-right-radius:10px;border-bottom-right-radius:10px;background:var(--bg-color);color:var(--text-color);border-left:4px solid var(--accent-color);position:relative}.callout-block.svelte-1pi2pyj .icon-wrapper.svelte-1pi2pyj{position:absolute;width:50px;height:50px;top:0;left:0;transform:translate(calc(-50% - 1.5px), -50%);background:var(--post-page-background-color);padding:8px;border-radius:50%;fill:var(--accent-color);color:var(--accent-color)}.callout-block.info.svelte-1pi2pyj.svelte-1pi2pyj{--bg-color:var(--callout-info-background-color);--accent-color:var(--callout-info-accent-color)}.callout-block.warning.svelte-1pi2pyj.svelte-1pi2pyj{--bg-color:var(--callout-warning-background-color);--accent-color:var(--callout-warning-accent-color)}.callout-block.error.svelte-1pi2pyj.svelte-1pi2pyj{--bg-color:var(--callout-error-background-color);--accent-color:var(--callout-error-accent-color)}.callout-block.success.svelte-1pi2pyj.svelte-1pi2pyj{--bg-color:var(--callout-success-background-color);--accent-color:var(--callout-success-accent-color)}\n.code-block.svelte-qgch0c.svelte-qgch0c{display:block;position:relative;background-color:var(--code-background-color);color:var(--code-text-color);font-family:var(--mono-font);font-size:1rem;line-height:1.33em;border-radius:8px;box-shadow:var(--card-shadow);padding:30px 15px;margin:30px 0}.code-block.svelte-qgch0c pre{overflow-x:auto;scrollbar-color:var(--primary-color) var(--scrollbar-track-color);scrollbar-width:thin;padding-bottom:5px}.code-block.svelte-qgch0c pre::-webkit-scrollbar{height:8px}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb{background:var(--primary-color)}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb:hover{background:var(--primary-light-color)}.code-block.svelte-qgch0c .lang.svelte-qgch0c{position:absolute;right:0;top:-15px;background:inherit;border-radius:8px;padding:5px 10px;z-index:2;font-size:0.85em}.code-block.svelte-qgch0c .filename.svelte-qgch0c{background:inherit;border-top-left-radius:8px;border-top-right-radius:8px;margin-bottom:-2px;padding:5px 10px;position:absolute;left:0px;top:-15px;z-index:1}\npicture.svelte-1gy5t1o.svelte-1gy5t1o{position:relative;width:100%;height:100%}picture.svelte-1gy5t1o img.svelte-1gy5t1o{width:100%;height:100%}","map":null},"head":""},{"slug":"css-scroll-snapping","title":"CSS Scroll Snapping - Improve Scrolling without JS","date":"2020-08-03T00:00:00.000Z","excerpt":"Learn how to snap scrolling positions with CSS only.","tags":["Front-End","CSS","Guide"],"html":"<p>CSS is evolving constantly and the past few years have brought us amazing stuff. It is getting easier to make smooth and complete experiences without having to use JavaScript at all. Case in point: Scroll Snapping.</p>\n<p>It is an easy way to guarantee that users will scroll to the correct portion of your page or of a container. Picture a landing page that is easily swipable/scrollable between sections, or swipable cards. Take in mind how Android’s Recent Apps screen works, for example:</p>\n<p><img src=\"/images/posts/css-scroll-snapping/android-scroll-snapping.gif\" alt=\"Android's Recent Apps screen has scroll mapping between app cards\"></p>\n<p>You can see that Android never allows the end of a scroll to be in a place between cards. There’s a certain threshold that determines that the scroll will snap into the nearest card and put it in the center. All that while still keeping scrolling momentum, allowing you to go from one edge of the list to another in a single scroll if you want to.</p>\n<p>Until recently, you’d have to resort to JavaScript code to make a similar behavior on the web. But now, all you need is CSS, which makes things more performant, consistent and reliable! Browser support is already pretty good, with all major browser engines already supporting it fully. Check out browser support on <a href=\"https://caniuse.com/#feat=css-snappoints\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">caniuse.com</a>.</p>\n<p>I’ve recently added scroll snapping to my own website. You can check it out on the “Work Experience” section in the <a href=\"https://fantinel.dev\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Home page</a>. It’s specially great on mobile!</p>\n<h2>How?</h2>\n<p>There are two main CSS properties that make the magic happen, one for the parent element, and one for its children.</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">css</div>\n\t<pre class=\"language-css\"><!-- HTML_TAG_START --><code class=\"language-css\"><span class=\"token selector\">.parent</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">scroll-snap-type</span><span class=\"token punctuation\">:</span> y mandatory<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.child</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">scroll-snap-align</span><span class=\"token punctuation\">:</span> start<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code><!-- HTML_TAG_END --></pre>\n</div>\n<h3>scroll-snap-type</h3>\n<p>This property tells the browser that the parent element uses scroll snapping. We are given some options on how snapping must work. <code>y</code> indicates that the scroll happens vertically, while <code>x</code> means horizontally. We can also pass the <code>mandatory</code> and <code>proximity</code> options. </p>\n<p>We use <code>mandatory</code> to tell that the browser <em>must</em> snap to a snap point when the user stops scrolling. This means that if the next snap point becomes visible on the screen and scrolling stops, the browser will automatically snap to the next one. In the other end, with <code>proximity</code>, things are less strict. The browser will only snap to the next snap point if scrolling gets past a certain threshold. Both values are useful, their use will depend on the situation you’re applying it to.</p>\n<iframe height=\"500\" style=\"width: 100%;\" scrolling=\"no\" title=\"scroll-snap-type: Mandatory vs Proximity\" src=\"https://codepen.io/matfantinel/embed/preview/LYNPdpE?default-tab=result&theme-id=dark\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">See the Pen <a href=\"https://codepen.io/matfantinel/pen/LYNPdpE\">scroll-snap-type: Mandatory vs Proximity</a> by Matheus Fantinel (<a href=\"https://codepen.io/matfantinel\">@matfantinel</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>\n<h3>scroll-snap-align</h3>\n<p>This is a property you add to the children that specifies where the snap points will be in the element. Which means that, whenever the browser automatically snaps the scroll to the element, it will either go to the left/top edge (<code>start</code>), center (<code>center</code>), or right/bottom edge (<code>end</code>) of the element. This property pretty much only makes a difference if the children are bigger than the parent’s display size.</p>\n<h3>scroll-padding and scroll-margin</h3>\n<p>To make things even better, we can use the <code>scroll-padding</code> (for parent) and <code>scroll-margin</code> (for children) properties. They add some space before/after the elements that are only considered when scrolling. The best way to implement them is by trying it out after you build your scroll snapping goodiness.</p>\n<p>You can check the documentation over on <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Scroll_Snap\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Mozilla Developer Network</a> for more info.</p>\n<h2>Wrapping Up</h2>\n<p>Scroll snapping is a sign that the web is maturing. For years we’ve been bloating websites with a lot of JavaScript for very simple visual tasks, and now CSS is slowly evolving to take some space back. It’s an important evolution because Web technologies are being used to build every kind of application, and its native feature set needs to be good enough to compete with native or native-ish counterparts like Flutter, Swift, or Kotlin.</p>\n<p>Thanks for reading!</p>","css":{"code":".code-block.svelte-qgch0c.svelte-qgch0c{display:block;position:relative;background-color:var(--code-background-color);color:var(--code-text-color);font-family:var(--mono-font);font-size:1rem;line-height:1.33em;border-radius:8px;box-shadow:var(--card-shadow);padding:30px 15px;margin:30px 0}.code-block.svelte-qgch0c pre{overflow-x:auto;scrollbar-color:var(--primary-color) var(--scrollbar-track-color);scrollbar-width:thin;padding-bottom:5px}.code-block.svelte-qgch0c pre::-webkit-scrollbar{height:8px}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb{background:var(--primary-color)}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb:hover{background:var(--primary-light-color)}.code-block.svelte-qgch0c .lang.svelte-qgch0c{position:absolute;right:0;top:-15px;background:inherit;border-radius:8px;padding:5px 10px;z-index:2;font-size:0.85em}.code-block.svelte-qgch0c .filename.svelte-qgch0c{background:inherit;border-top-left-radius:8px;border-top-right-radius:8px;margin-bottom:-2px;padding:5px 10px;position:absolute;left:0px;top:-15px;z-index:1}","map":null},"head":""},{"slug":"fixing-favicons","title":"How to fix your Favicons","date":"2021-01-06T00:00:00.000Z","excerpt":"Favicons suck. Luckily, there are ways to make them suck less.","tags":["Front-End","Guide","Favicon"],"html":"<p>Favicons kinda suck. They should be a simple icon that identifies your webpage on a bunch of scenarios, i.e. the icon displayed on the tab besides your website’s title, or the icon on the mobile browser’s bookmarks screen, or the icon on the phone’s home screen.</p>\n<p>Unfortunately, different browsers, OSs, and implementations throughout the years have ended up with many different files and meta tags, that we as developers need to handle otherwise we end up with missing or pixelated icons.</p>\n<h2>Easy Mode</h2>\n<p>I recently met my new best friend, <a href=\"https://realfavicongenerator.net/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Real Favicon Generator</a>. It took all these pains I just wrote about and just made it a breeze to handle. Best of all, it’s customizable!</p>\n<p>You just have to add in your existing favicon image (for best results, a SVG or high-quality PNG are recommended). From then on, the generator will display previews and allow customization of each category of favicon it will generate:</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/fixing-favicons/favicon-generator-customization.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/fixing-favicons/favicon-generator-customization.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/fixing-favicons/favicon-generator-customization.png\" alt=\"Screenshot of Real Favicon Generator&#39;s customization\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->The customization options allow you to set different icons depending on device and OS, and even generate icons with background colors if needed.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<p>At the bottom, you can even set up ways of avoiding caching issues, compression, and scaling algorithms (!). After all that, it will generate them all as set, give you a zip with all the files, and the HTML code to paste on your <code>&lt;head&gt;</code>. You can check the result on this very website (fantinel.dev). The favicon should look fantastic on every device/browser combination.</p>\n<h2>Manual Mode</h2>\n<p>So, there are 5 types of favicons that we need to add, if we want to support every current browser:</p>\n<h3>1. Desktop browsers</h3>\n<ul><li>`favicon.ico`, for IE and any other legacy browsers. Optional if you don&#39;t want to support it;</li>\n  <li>`favicon-16x16.png`, the classic one that displays on the tabs;</li>\n  <li>`favicon-32x32.png`, used on Safari for macOS.</li></ul>\n<h3>2. Android browsers</h3>\n<ul><li>`android-chrome-192x192.png`, shown on the tab card and when added to home screen;</li>\n  <li>`android-chrome-512x512.png`, shown on the splash screen for when the website is installed to the phone. Optional if it&#39;s not a PWA;</li></ul>\n<h3>3. iOS Safari, and some Android browsers like Samsung Internet</h3>\n<ul><li>`apple-touch-icon.png`, a 180x180 file displayed when the website is added to home screen;</li></ul>\n<h3>4. Windows 8/10 start menu (optional)</h3>\n<ul><li>`mstile-150x150.png`, only used when your website is added to the start menu as a tile on Windows 8/10, and when not declared, defaults to `apple-touch-icon.png` instead.</li></ul>\n<h3>5. macOS Safari Pinned Tabs (optional)</h3>\n<ul><li>`safari-pinned-tab.svg` is used when users pin a tab on Safari for macOS. Basically, you declare a monochrome SVG and a theme color. Safari does the rest.</li></ul>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/fixing-favicons/safari-pinned-tabs-demo.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/fixing-favicons/safari-pinned-tabs-demo.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/fixing-favicons/safari-pinned-tabs-demo.png\" alt=\"Demo of Safari pinned tabs favicon behavior\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->How Safari pinned tab favicon works, screenshot of realfavicongenerator.net<!-- HTML_TAG_END --></figcaption>\n</picture>\n<p>With those files, you should be good to go on every single browser, by adding this to your <code>&lt;head&gt;</code>:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">html</div>\n\t<pre class=\"language-html\"><!-- HTML_TAG_START --><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>apple-touch-icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">sizes</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>180x180<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/apple-touch-icon.png<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image/png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">sizes</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>32x32<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/favicon-32x32.png<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image/png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">sizes</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>16x16<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/favicon-16x16.png?<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>manifest<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/site.webmanifest<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mask-icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/safari-pinned-tab.svg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#000000<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>shortcut icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/favicon.ico<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<h2>Single SVG Favicon</h2>\n<p>Something that’s starting to become a thing is having a single SVG favicon. Theoretically, SVGs are infinitely scalable, and should look good on all sizes. Unfortunately, browser support is not there yet.</p>\n<p><a href=\"https://caniuse.com/link-icon-svg\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Can I Use</a> reports that, currently (January 2021), only recent versions of Firefox and Chromium-based browsers support this feature. This means that Safari, non-Chromium Edge, IE, and some mobile browsers do not support it. Therefore, unless you want your favicon to just not appear in those browsers, you’d still have to use other file formats as well. The downside of this approach is that all favicons would look the same, and you won’t be able to customize and have differently-shaped icons for mobile devices, for example.</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">html</div>\n\t<pre class=\"language-html\"><!-- HTML_TAG_START --><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>favicon.svg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<h2>Wrapping Up</h2>\n<p>Favicons suck. Luckily, there are people working to make it suck less. With the approach presented on this article, your website should be able to display its best favicon on all browsers for years to come.</p>","css":{"code":"picture.svelte-1gy5t1o.svelte-1gy5t1o{position:relative;width:100%;height:100%}picture.svelte-1gy5t1o img.svelte-1gy5t1o{width:100%;height:100%}\n.code-block.svelte-qgch0c.svelte-qgch0c{display:block;position:relative;background-color:var(--code-background-color);color:var(--code-text-color);font-family:var(--mono-font);font-size:1rem;line-height:1.33em;border-radius:8px;box-shadow:var(--card-shadow);padding:30px 15px;margin:30px 0}.code-block.svelte-qgch0c pre{overflow-x:auto;scrollbar-color:var(--primary-color) var(--scrollbar-track-color);scrollbar-width:thin;padding-bottom:5px}.code-block.svelte-qgch0c pre::-webkit-scrollbar{height:8px}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb{background:var(--primary-color)}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb:hover{background:var(--primary-light-color)}.code-block.svelte-qgch0c .lang.svelte-qgch0c{position:absolute;right:0;top:-15px;background:inherit;border-radius:8px;padding:5px 10px;z-index:2;font-size:0.85em}.code-block.svelte-qgch0c .filename.svelte-qgch0c{background:inherit;border-top-left-radius:8px;border-top-right-radius:8px;margin-bottom:-2px;padding:5px 10px;position:absolute;left:0px;top:-15px;z-index:1}","map":null},"head":""}]}]
[{"slug":"plausible-ethical-analytics","title":"Ethical Analytics are Plausible, at Last","date":"2022-02-01T00:00:00.000Z","excerpt":"Web Analytics is such a morally ambiguous area that I’ve avoided it for years, but now I can finally do it with peace of mind.","tags":["Analytics","Privacy","SEO"],"html":"<p>Analytics have become intrinsic to software development in the past decade. On the marketing side, analytics allow us to measure the success of marketing campaigns, optimize the wording, measure ad results, or simply keep track of the growth of the audience. On the development side, it allows to more easily detect points of failure, bad patterns or UX hiccups.</p>\n<p>These benefits however, usually come at a price: <span class=\"wrapper svelte-1sgfl7c\">in-depth analytics tend to store way too much information about the user</span>, and the user is often unaware of how much is being collected. It’s a decision the user doesn’t really make; we make it for them. <em>(Yes, I know, legally the user often accepts cookies or terms of service… but the reality is that almost nobody reads or understands that.)</em></p>\n<p>On platforms like Google Analytics, there is a lot of information we can see, however none of them personally identifies the user. That’s good, right? Well, not really: Google can personally identify (and does through its Ads business) them, and by using Google Analytics or similar products on your site, you’re feeding them your user’s information for a really low price - otherwise, why would these analytics be free?</p>\n<p>Luckily, there are ways to get most of the needed metrics without compromising anybody’s privacy, and even get a better experience in the end.</p>\n<h2 id=\"ethical-analytics\">Ethical Analytics<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#ethical-analytics\"><span class=\"heading-link\">#</span></a></h2>\n<p>Recently increasing concerns about online privacy have sprouted a lot of ethical analytics services, that aim to collect only necessary, anonymous data. Services like <a href=\"https://matomo.org/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Matomo</a> and <a href=\"https://usefathom.com/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Fathom</a> provide an experience that is simple and to-the-point, and I’ve heard nothing but praise about both services. For myself though, I’ve picked <a href=\"https://plausible.io/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Plausible Analytics</a>, which I use on this website and in some of my side projects.</p>\n<p>It’s important to point out, though, that none of those are free. Since they don’t collect personal data and don’t monetize it, they must charge for their service. The prices are pretty low though, and unless it’s a hobby project you have no intention of monetizing, that cost will be absorbed really quickly and the gains will make it worth it.</p>\n<h3 id=\"plausible\">Plausible<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#plausible\"><span class=\"heading-link\">#</span></a></h3>\n<p>Plausible is a small company from Europe that makes Plausible Analytics, a privacy-friendly alternative to Google Analytics. The reasons I’ve picked Plausible instead of others are that:</p>\n<ul><li>It’s open source;</li>\n<li>It can be self-hosted in case you already have your own server;</li>\n<li>It’s intuitive: a quick glance through the dashboard and you’re already able to understand everything that’s in there. <a href=\"https://plausible.io/fantinel.dev\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Check out mine</a>;</li>\n<li>It’s sustainable: their business model allows them to grow organically and <a href=\"https://plausible.io/blog/bootstrapping-saas\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">the project is already profitable</a> without any kind of external funding (and <a href=\"https://twitter.com/PlausibleHQ/status/1282678251148763137\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">they have no plans of accepting it</a>);</li>\n<li>They offer <a href=\"https://plausible.io/docs/proxy/introduction\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">ways of bypassing adblockers</a>;</li>\n<li>It’s simply a great product.</li></ul>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/plausible-ethical-analytics/dashboard.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/plausible-ethical-analytics/dashboard.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/plausible-ethical-analytics/dashboard.png\" alt=\"Screenshot of the dashboard of my personal website on Plausible Analytics.\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->Clicking on some data blocks allow you to filter data - so you can still understand how your users behave differently depending on a number of factors.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<h4 id=\"custom-goals\">Custom Goals<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#custom-goals\"><span class=\"heading-link\">#</span></a></h4>\n<p>The data that Plausible collects by default should be enough for most use cases. However, there is still some information that is not gathered that you might want to have. For cases like that, Plausible offers the <a href=\"https://plausible.io/docs/custom-event-goals\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Custom Event Goals API</a>.</p>\n<p>With a simple function call, you can send data to the Plausible API and track some behaviors or extra information. For example, if you want to track the percentage of your users that click on “Sign up”, you can fire a custom event for that. These are also filterable in the dashboard, which means you can compare where most of the users that sign up come from.</p>\n<p>In my case, I wanted to know the percentage of users that use light/dark mode in their browser or system. There is <a href=\"https://github.com/plausible/analytics/discussions/622\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">an open Feature Request to add this functionality</a> to Plausible that has received some interest, but while that isn’t implemented, I built my own detection using the Custom Events API:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">javascript</div>\n\t<pre class=\"language-javascript\"><!-- HTML_TAG_START --><code class=\"language-javascript\">  <span class=\"token comment\">// Use Plausible to track the % of people that have a dark/light mode preference</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>plausible<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>matchMedia <span class=\"token operator\">&amp;&amp;</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">matchMedia</span><span class=\"token punctuation\">(</span><span class=\"token string\">'(prefers-color-scheme: dark)'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>matches<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">plausible</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Dark Mode Enabled'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>matchMedia <span class=\"token operator\">&amp;&amp;</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">matchMedia</span><span class=\"token punctuation\">(</span><span class=\"token string\">'(prefers-color-scheme: light)'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>matches<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">plausible</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Light Mode Enabled'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">plausible</span><span class=\"token punctuation\">(</span><span class=\"token string\">'No Dark/Light Preference'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p><em><strong>Note:</strong> tracking Custom Events without user interaction like this breaks the “Bounce Rate” metric. By firing an event, Plausible interprets that the user has interacted with your site, and therefore the Bounce Rate goes to zero. If the Bounce Rate metric is important to you, this might not be a good idea.</em></p>\n<h2 id=\"wrapping-up\">Wrapping Up<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#wrapping-up\"><span class=\"heading-link\">#</span></a></h2>\n<p>I apologize if this post felt like an ad. It is not. Web Analytics is such a morally ambiguous area that I’ve avoided it for years, and now I can finally grab some metrics with a peace of mind. Regardless of what service you choose and prefer, having privacy-friendly alternatives is good for everyone. With Plausible being one of my favorite pieces of software at the moment, I felt it was right to write a bit about it and spread the word.</p>\n<p>Thanks for reading!</p>","css":{"code":".wrapper.svelte-1sgfl7c{background:var(--highlight-marker-url)}\npicture.svelte-1gy5t1o.svelte-1gy5t1o{position:relative;width:100%;height:100%}picture.svelte-1gy5t1o img.svelte-1gy5t1o{width:100%;height:100%}\n.code-block.svelte-qgch0c.svelte-qgch0c{display:block;position:relative;background-color:var(--code-background-color);color:var(--code-text-color);font-family:var(--mono-font);font-size:1rem;line-height:1.33em;border-radius:8px;box-shadow:var(--card-shadow);padding:30px 15px;margin:30px 0}.code-block.svelte-qgch0c pre{overflow-x:auto;scrollbar-color:var(--primary-color) var(--scrollbar-track-color);scrollbar-width:thin;padding-bottom:5px}.code-block.svelte-qgch0c pre::-webkit-scrollbar{height:8px}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb{background:var(--primary-color)}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb:hover{background:var(--primary-light-color)}.code-block.svelte-qgch0c .lang.svelte-qgch0c{position:absolute;right:0;top:-15px;background:inherit;border-radius:8px;padding:5px 10px;z-index:2;font-size:0.85em}.code-block.svelte-qgch0c .filename.svelte-qgch0c{background:inherit;border-top-left-radius:8px;border-top-right-radius:8px;margin-bottom:-2px;padding:5px 10px;position:absolute;left:0px;top:-15px;z-index:1}","map":null},"head":"","readingTime":"6 min read","relatedPosts":[]},{"slug":"2021-year-in-review","title":"2021 In Review","date":"2021-12-09T00:00:00.000Z","excerpt":"Another year, another yearly review post. 2021 felt like pretty much 2020 part II for a lot of people, me included.","tags":["Meta"],"html":"<p>Another year, another yearly review post. 2021 felt like pretty much 2020 part II for a lot of people, me included. The ongoing pandemic still affected our lives, and even though most people in my country are now vaccinated (including me), the danger still exists and preventive measures are still necessary. But it’s nice to be able to start doing things and going places we haven’t been able to for a while. I personally think this situation is still going to drag on for a while, but we’ll adapt to it with time.</p>\n<h2 id=\"mental-health\">Mental Health<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#mental-health\"><span class=\"heading-link\">#</span></a></h2>\n<p><a href=\"/2020-year-in-review\">Last year</a>, I wrote a bit about doomscrolling, and how it started affecting me until I decided to avoid this behavior. I tried to keep avoiding it this year, and I think I succeeded. I’m not blind to what’s going on - I still know <div class=\"sparkle-wrapper svelte-exdx8u\">\n\t<div class=\"slot-wrapper svelte-exdx8u\"><strong class=\"text-secondary\">the world is a dumpster fire</strong></div>\n</div> at the moment and in many ways it was even worse than 2020 - but I think I was successful in not dwelling on the bad news and the daily absurdities going on.</p>\n<p>That doesn’t mean my mental health didn’t take a hit though. The year started with the loss of a person I held dear - a victim of the inexcusable vaccination delays and genocidal actions of our leaders - and I felt like I lost a bit of control over my work-life-balance for a portion of the year.</p>\n<p>This year I also started therapy though, which I feel is a good way to deal with the growing anxiety from the past few years. I’ve been able to know more about myself and how my brain works, so I can focus on what I found out to improve my life, one day at a time.</p>\n<h2 id=\"work-life\">Work Life<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#work-life\"><span class=\"heading-link\">#</span></a></h2>\n<p>Early this year I changed jobs, and started working as a contractor. This has given me more freedom to make my own hours and allowed me to work with a more diverse set of people. It took me a while to use this freedom the right way, though. For a few months I felt like my work-life balance was off, and I felt like my energy was being drained fast. Luckily I was able to notice the early signs of a burnout and took a step back to avoid it. I am now working on my 2nd project as a contractor and I feel that getting the work hours under control allowed me to do my work better, since my mind gets the time to rest.</p>\n<h2 id=\"learning-and-comparing\">Learning and Comparing<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#learning-and-comparing\"><span class=\"heading-link\">#</span></a></h2>\n<p>Most of the learning I did this year was on my day job, and not personal projects. Last year, I worked a lot with Angular and Vue 2. This year, I worked with Vue 3, React and PHP (😩), and on my personal time I started to practice my Svelte skills. That’s a lot of frameworks!</p>\n<p>Although every project is different, working with components makes you solve similar problems all the time. And after having worked with basically all mainstream frameworks for a bit, I feel like I can see pros and cons to each of them:</p>\n<h3 id=\"angular\">Angular<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#angular\"><span class=\"heading-link\">#</span></a></h3>\n<ul><li><p><strong>Pros:</strong> it’s very opinionated, which means there are always recommended ways of doing something. This makes the code consistent, and using TypeScript by default makes it much easier to maintain big projects. I like the template syntax and the separation between HTML, CSS and TS. I also can definitely see why it’s a choice in many enterprise environments: the majority of Angular projects I’ve seen have similar structure, which makes devs productive really quickly after being hired.</p></li>\n<li><p><strong>Cons:</strong> it’s very opinionated, which means it’s not as flexible as other options. The focus on clear separation of concerns and TypeScript can also be a burden for smaller apps. Sometimes you want to make a quick prototype or just build something simpler, and it’s easy to find Angular overkill.</p></li></ul>\n<h3 id=\"vue\">Vue<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#vue\"><span class=\"heading-link\">#</span></a></h3>\n<ul><li><p><strong>Pros:</strong> I really like the premise of Vue being “incrementally adoptable”. This makes Vue really simple on the surface and hides many of its complexities. The template syntax is similar to Angular and it’s easy to keep concerns separated if you want to.</p></li>\n<li><p><strong>Cons:</strong> In my personal experience I felt like the Composition API, introduced in Vue 3, goes against my favorite things in Vue previously. Instead of being an extension to HTML/JS, it makes you completely rethink how to build the components, and I feel like it makes things more complicated than they should be. Also, the ecosystem around it (plugins, components, etc) took a big hit with the transition from v2 to v3, because it had many breaking changes.</p></li></ul>\n<h3 id=\"react\">React<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#react\"><span class=\"heading-link\">#</span></a></h3>\n<p>My experience with React has not been as extensive as the other ones here, so I think I’m still not past the point of “initial impressions”. Still, here are my thoughts:</p>\n<ul><li><p><strong>Pros:</strong> Super flexible, and with a ginormous ecosystem to back it up. You can write a React app in so many ways and there’s always an open-source plugin or component for what you want to do. The existence of NextJS makes using React a better experience.</p></li>\n<li><p><strong>Cons:</strong> Ok, I really don’t like JSX. I usually like to keep concerns separated and using JS to build the HTML like this is not my cup of tea. I find it hard to understand at a glance, and feel like it overrides the default web stack too much. Unlike the other frameworks, when I use React I feel like I’m developing a React app instead of a web app. Also, in contrast to Angular, the flexibility of React makes it so that React projects can be so different from one another you’d have a difficult time adapting, even though they use the same framework (this is mitigated by meta-frameworks like NextJS, which are very opinionated, thankfully).</p></li></ul>\n<h3 id=\"svelte\">Svelte<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#svelte\"><span class=\"heading-link\">#</span></a></h3>\n<p>I have a clear favorite here, but I feel that Svelte hits the sweet spot in many ways.</p>\n<ul><li><p><strong>Pros:</strong> I like the template syntax (not as clean as Vue’s or Angular’s, but similar enough), the clear separation of concerns, and how it likes to stay out of your way. Most of all though, I love how Svelte makes me just feel like I’m building a “vanilla” web page, but with added goodies. <span class=\"wrapper svelte-1sgfl7c\">It extends the web instead of replacing it.</span></p></li>\n<li><p>The fact that it is a compiler frees it from the need for a Virtual DOM, which then makes the code you need to write much simpler. No need for <em>useState</em>, <em>useEffect</em>, or keeping track of two-way binding to maintain state between components - you just have to set the variables and Svelte does the rest. I just think about my logic, not about how the framework works.</p></li>\n<li><p>Its official meta-framework, SvelteKit, also has great defaults. It works by using native HTML tags instead of trying to emulate them. Instead of a <code>&lt;Link&gt;</code>, just use <code>&lt;a&gt;</code>. Instead of using JS to post data, just use a <code>&lt;form&gt;</code>. This makes the app leaner, more accessible, and work with JS disabled by default.</p></li>\n<li><p><strong>Cons:</strong> Svelte is relatively new, and therefore its ecosystem is still lacking. I’ve had trouble properly integrating a SvelteKit project with Storybook or Jest, for example, since Kit is still in Beta. There are also many components that don’t have a Svelte version yet, and while some of them have a “Vanilla JS” option that usually works, it’s still not as seamless as it could be.</p></li></ul>\n<h2 id=\"personal-projects\">Personal Projects<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#personal-projects\"><span class=\"heading-link\">#</span></a></h2>\n<p>I didn’t work on many personal projects this year, as I was already learning a lot on my day job. I did, however, <span class=\"wrapper svelte-1sgfl7c\">completely rewrite my website!</span></p>\n<p>I really liked the previous one, but I wanted to change some things about it and use something more flexible than Jekyll. So I completely redesigned it using Figma - while retaining some design elements from before - and rewrote it with SvelteKit. <a href=\"https://fantinel.dev/blog-development-sveltekit/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">I wrote a blog post talking more about the experience</a>, which also became my most-read post of all time. Nice!</p>\n<p>Speaking of blog posts, <div class=\"sparkle-wrapper svelte-exdx8u\">\n\t<div class=\"slot-wrapper svelte-exdx8u\"><strong class=\"text-secondary\">I doubled the amount of posts published compared to last year!</strong></div>\n</div> Which means I wrote… <strong>4</strong> (excluding this one). I wanted to write more, but compared to the 2 posts from last year, it’s still an improvement, <em>right</em>?</p>\n<h2 id=\"fun\">Fun<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#fun\"><span class=\"heading-link\">#</span></a></h2>\n<p>Not everything is code and gloom - I also do some fun things every once in a while.</p>\n<h3 id=\"tv-and-movies\">TV and Movies<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#tv-and-movies\"><span class=\"heading-link\">#</span></a></h3>\n<ul><li><p><strong>Ted Lasso</strong> is the TV equivalent of a hug. I’ve never seen a show that can balance comedy, wholesomeness and an enthralling story and characters so well. It touches on delicate subjects in a way that still makes you feel good, and yet is capable of sending the intended message. Honestly can’t find anything I dislike about it.</p></li>\n<li><p><strong>Better Call Saul</strong> was surprisingly good. I initially dismissed it as being just a spin-off of a popular show, but it slowly evolved into a tightly-woven drama that keeps me at the edge of my seat. The stakes are lower here than they are in Breaking Bad, but I feel like I care more about the characters on this one.</p></li></ul>\n<h3 id=\"games\">Games<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#games\"><span class=\"heading-link\">#</span></a></h3>\n<ul><li><p><strong>The Last of Us</strong> was surprisingly surprising for me. I am 8 years late to the party here, but I didn’t have a PlayStation since the PS1, and not only I hadn’t played this game, I never felt like doing so. I usually favor creative gameplay instead of a complex story, but finally gave it a go this year. Wow. It was an amazing experience from start to finish, though I admit it felt more like a more immersive movie than a game. That being said, I don’t think any movie can match the immersion that a game with a good story can provide.</p></li>\n<li><p><strong>No Man’s Sky</strong> is a mix of exploration and existential crisis. There are a lot of things to do (though not all of them have much depth), but the main gameplay loop of exploring planets and seamlessly traversing between them is addictive. Plus, the main story was surprisingly good, with a lot of amazing quotes from the Travellers in that universe. A bit of existential crisis was the icing on the cake.</p></li></ul>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/2021-year-in-review/no-mans-sky.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/2021-year-in-review/no-mans-sky.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/2021-year-in-review/no-mans-sky.png\" alt=\"Screenshot of a character in No Man&#39;s Sky saying: &#39;Existence is beautiful, if you let it be. Life is not a question. There does not need to be an answer.&#39;\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  \n</picture>\n<ul><li><p><strong>Metroid Dread</strong> was a lot of fun! I never liked games of this genre (Metroidvania) until I played Hollow Knight, last year. I felt like finally giving Metroid a chance since it was the first main entry in 19 years and the reviews were stellar. I was not disappointed. I feel like it doesn’t match Hollow Knight in its worldbuilding and ambientation, but the gameplay in Metroid Dread felt much more fluid, making almost everything in it a joy.</p></li>\n<li><p><strong>Dungeons &amp; Dragons</strong> has continued to be one of the highlights of my weeks. My party still played online this year, but it was a lot of fun. We finally finished the Curse of Strahd campaign after 502 days. The finale was so epic we decided to have it illustrated by the amazing <a href=\"https://www.gholz.art/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Guilherme Holz</a>.</p></li></ul>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/2021-year-in-review/dnd.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/2021-year-in-review/dnd.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/2021-year-in-review/dnd.png\" alt=\"Illustration of a Dungeons and Dragons party dealing the killing blow to the vampire Strahd\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->It was kind of poetic to have a bolt of holy light (in the form of a spear) be the end of one who brought so much darkness to the land. From left to right: Ylanis, Alesteir (me), Aliana and Garreth. The guy getting stabbed is Strahd, the big bad evil guy.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<h2 id=\"what-to-expect-in-2022\">What to Expect in 2022<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#what-to-expect-in-2022\"><span class=\"heading-link\">#</span></a></h2>\n<p>First of all, <div class=\"sparkle-wrapper svelte-exdx8u\">\n\t<div class=\"slot-wrapper svelte-exdx8u\"><strong class=\"text-secondary\">I’m getting married! 💍</strong></div>\n</div> The love of my life and I are finally making it official. </p>\n<p>Later in the year I’m also temporarily moving to Italy for a few months with my (soon-to-be) wife. It’s going to be some sort of test drive - we’ll return to Brazil before the year ends and then decide if living abroad is something we want or not.</p>\n<p>As for this blog, I hope to again write more than I did this year. I have a few ideas in the oven, but have been struggling to write them down. Hopefully the big life changes are the inspiration I need.</p>\n<p>I also have some ideas for some personal projects that may or may not see the light of day. Let’s see how it goes.</p>\n<h2 id=\"wrapping-up\">Wrapping Up<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#wrapping-up\"><span class=\"heading-link\">#</span></a></h2>\n<p>2021 was overall a weird year, but I feel 2022 is going to have more going on. I wish you happy holidays and that you have a memorable 2022. See you then!</p>","css":{"code":".sparkle-wrapper.svelte-exdx8u.svelte-exdx8u{position:relative;display:inline-block}.sparkle-wrapper.svelte-exdx8u .slot-wrapper.svelte-exdx8u{position:relative;z-index:1}\n.wrapper.svelte-1sgfl7c{background:var(--highlight-marker-url)}\npicture.svelte-1gy5t1o.svelte-1gy5t1o{position:relative;width:100%;height:100%}picture.svelte-1gy5t1o img.svelte-1gy5t1o{width:100%;height:100%}","map":null},"head":"","readingTime":"12 min read","relatedPosts":[{"slug":"2020-year-in-review","title":"Looking Back at 2020","date":"2020-12-28T00:00:00.000Z","excerpt":"2020 definitely wasn't our best year... but let's remember what was good about it.","tags":["Meta"],"html":"<p>We all know this year hasn’t been easy. That doesn’t mean it had to be wasted. Regardless of how bad or good it has been for oneself individually, there are always lots of lessons we can learn from what we’ve been through.</p>\n<h2 id=\"more-than-one-pandemic\">More Than One Pandemic<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#more-than-one-pandemic\"><span class=\"heading-link\">#</span></a></h2>\n<p>I think one of the most obvious takeaways from this year is that we are not living just one pandemic (COVID-19), but also one that’s equally worrisome and potentially even deadlier: misinformation. The sheer amount of false information and hatred being spread through both social media and real life is becoming bigger every passing day.</p>\n<p>They can be shared by ignorance, personal or political interest, or simply to “watch the world burn”. It is painful to watch the world go backwards like this; especially when people close to you are affected as well. </p>\n<h2 id=\"mental-health\">Mental Health<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#mental-health\"><span class=\"heading-link\">#</span></a></h2>\n<p>I am sure that regardless of any individual impact the pandemics have had, your mental health must have been impacted by all of this somehow. “Doomscrolling” became a thing, fueled by our time watching and reading terrible news while quarantining in the safety of our homes.</p>\n<p>Initially, I was guilty of that too. Checking many times a day for news, how the pandemic was growing, getting angry at how our leaders were dealing with it, and more. Fortunately, I ended up realizing how harmful that was to my mental health, and that there was no good coming out of it. <span class=\"wrapper svelte-1sgfl7c\">A few minutes a day is enough to catch up on important news, the rest of the day can be spent on myself.</span> So instead of mindlessly scrolling through the doom and gloom on the internet, I started to work on more personal projects, learning new stuff, and playing games.</p>\n<h2 id=\"learning-with-personal-projects\">Learning with Personal Projects<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#learning-with-personal-projects\"><span class=\"heading-link\">#</span></a></h2>\n<p>This year I worked on a few personal projects, and tried different approaches with them so I could learn new things. I didn’t necessarily get really in-depth into most of the things I learned, but the knowledge I got definitely made me a better developer.</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/2020-year-in-review/pocket-companion.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/2020-year-in-review/pocket-companion.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/2020-year-in-review/pocket-companion.png\" alt=\"Screenshot of my Pocket Companion app\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  \n</picture>\n<ul><li><a href=\"/ionic-animal-crossing-companion/\">I built an Animal Crossing companion app</a>, with great utilities for when playing the game. I focused a lot on CSS animations for this one, while trying to mimic the official Nintendo app in looks. Learned a lot of things while building it:<ul><li>State management in Angular projects, with <a href=\"https://ngrx.io/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">NgRx</a>;</li>\n<li>Offline functionality with IndexedDB in the browser;</li>\n<li>Improved CSS Animations;</li>\n<li>Improved Ionic and PWA knowledge;</li>\n<li>Improved performance knowledge, with Web Workers, Virtual Scrolling and Lazy Loading;</li></ul></li>\n<li>I redesigned part of my website - I decided to change things up a bit, with an animated (but still lightweight) header background, a new logo, typography improvements, code highlighting, and more. I think it looks more professional than before, and represents my way of building things better as well;</li>\n<li>I built <a href=\"https://github.com/matfantinel/resume\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">my Resume as a Web Component</a> - using StencilJS to build it, and CSS Grid for the layout. Both of those things were new to me, so it was pretty interesting;</li>\n<li>I learned about <a href=\"/css-scroll-snapping/\">CSS Scroll Snapping</a> - a fantastic new CSS capability that helps with reducing the amount of JS in our websites;</li>\n<li>I focused a lot on improving my design skills this year. While I’m still a developer (and plan on continuing to be), designing things is something I find very fun. I learned messing with a few design-related things this year:<ul><li>Edit SVG files in Inkscape - still a lot to learn, but I’m already capable of doing some edits to existing files;</li>\n<li>Build high-fidelity mockups in Figma - being able to design more quickly than I was by building it was great for speeding up the process, and being able to collect feedback earlier was fantastic as well;</li></ul></li>\n<li>I started to contribute a bit more to Open Source projects, like <a href=\"https://elementary.io\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">elementary OS</a>. Mainly with a still-in-progress website rebuild, but also with tons of feedback, issue reports, offering support and participating on discussions.</li></ul>\n<h2 id=\"fun\">Fun<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#fun\"><span class=\"heading-link\">#</span></a></h2>\n<p>Since I committed myself to stop seeing bad things and focus on good ones, I resorted to at-home entertainment a lot this year. My highlights:</p>\n<h3 id=\"tv-and-movies\">TV and Movies<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#tv-and-movies\"><span class=\"heading-link\">#</span></a></h3>\n<ul><li><p><strong>Mr. Robot</strong> was a jaw-dropping series. I started watching it just this year, and binged to the finale quickly. It was an incredibly powerful series, with genius writing and cinematography. Highly recommend it to anyone, even if not a fan of the tech/hacking theme;</p></li>\n<li><p><strong>Community</strong> was a great find; It’s not a series I had ever heard of when it was still airing, as it never got popular here in Brazil. However, after hearing about it on the web and finding it on Netflix, I’m so glad I started watching it. Loads of fun, full of references, internal jokes and Dan Harmon genius;</p></li></ul>\n<h3 id=\"games\">Games<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#games\"><span class=\"heading-link\">#</span></a></h3>\n<ul><li><p><strong>Animal Crossing New Horizons</strong> was one of the best things to happen this year. It’s far from a perfect game, but it could not have been better for the current situation, providing an easy escape into a world free of our current burdens. It came out at the beginning of quarantine and still provides daily wholesomeness to this day;</p></li>\n<li><p><strong>Dungeons &amp; Dragons</strong> was a surprising source of fun considering my party only played online this year. But even with social distancing, we managed to have a lot of fun. With <a href=\"https://foundryvtt.com/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">FoundryVTT</a>, things are much easier to handle and it’s not much harder to get immersed. I’m even trying to be a DM of my own campaign… I’m not sure it’s going as well as I hoped, but hey, at least I’m trying.</p></li>\n<li><p><strong>Hollow Knight</strong>… I’m so glad I played it. Being a Metroidvania, a genre I’m not really a fan of, it completely hooked me with its worldbuilding, art style, atmosphere and frustratingly satisfying difficulty. A 10/10 for me, for sure;</p></li></ul>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/2020-year-in-review/hollow-knight.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/2020-year-in-review/hollow-knight.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/2020-year-in-review/hollow-knight.png\" alt=\"Hollow Knight official artwork\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->Hollow Knight official artwork, by Team Cherry<!-- HTML_TAG_END --></figcaption>\n</picture>\n<h2 id=\"writing\">Writing<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#writing\"><span class=\"heading-link\">#</span></a></h2>\n<p>Well, since this is only the third blog post this year, I definitely did not do much writing. I haven’t felt inspired to do so, as I was often busy building nice things or winding down from all the mess that was going on. I’ll repeat my intention of trying to write more next year, of course, since it shouldn’t be hard to do at least more than in 2020.</p>\n<h2 id=\"wrapping-up\">Wrapping Up<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#wrapping-up\"><span class=\"heading-link\">#</span></a></h2>\n<p>If you’re still reading, thanks! You’re probably my mom or fiancée. Anyway, 2020 was a very exciting year, even if not in a good way. Let’s hope 2021 is a more boring one. See you then!</p>","css":{"code":".wrapper.svelte-1sgfl7c{background:var(--highlight-marker-url)}\npicture.svelte-1gy5t1o.svelte-1gy5t1o{position:relative;width:100%;height:100%}picture.svelte-1gy5t1o img.svelte-1gy5t1o{width:100%;height:100%}","map":null},"head":"","readingTime":"6 min read"},{"slug":"2019-year-in-review","title":"Cool things I did and learned in 2019","date":"2019-12-29T00:00:00.000Z","excerpt":"A quick look back at 2019 and what I learned during this year.","tags":["Meta","Open Source"],"html":"<p>Another year went by - Year 6 of my software development journey! I wanted to write this blog post to sum up stuff that I’ve done or learned this year. Keep in mind this is being written off the top of my head - I did not keep a journal throughout the year, but hopefully that’s something I’ll do in 2020.</p>\n<h2 id=\"complexity-is-your-enemy\">Complexity is your enemy<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#complexity-is-your-enemy\"><span class=\"heading-link\">#</span></a></h2>\n<p>As programmers, we are puzzle-solvers. We like to think outside the box, applying different concepts, putting all of those nice things we’ve learned everywhere. This… often backfires. Most of the time what works best are the simplest solutions, which are also easier to maintain in the future by you or others. I’ve seen this quote somewhere a while back: “Programmers spend the first years of their careers mastering complexity only to realize they should master simplicity instead”. I guess I’m not in my first years anymore?</p>\n<p>I’ve changed my process in writing code to this:</p>\n<ol><li>Understand the problem/goal;</li>\n<li>Draw a simple mental picture of how to solve it (really simplify it);</li>\n<li>Code in small steps and test them as you go;</li>\n<li>Make it work. Code can look quite ugly in this step;</li>\n<li>Optimize it, performance-wise;</li>\n<li>⭐️ Try to explain how it works to yourself (mentally or by text), and then refactor the code to be as simple as possible;</li></ol>\n<p>This last step might make the initial release take a little longer, but oh boy does it pay off whenever you or someone else has to maintain it.</p>\n<h2 id=\"vanilla-js-is-the-best\">Vanilla JS is the best<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#vanilla-js-is-the-best\"><span class=\"heading-link\">#</span></a></h2>\n<p>Wait, I’m not saying you shouldn’t use any framework. If it helps you do your work better, go ahead! But “Vanilla” JS has come such a long way and there are so many amazing APIs coming out that using it solely is a valid option again. But more than that, those APIs are built in a way that popular frameworks can use them and communicate with each other with little effort. I’ve covered a bit of this on <a href=\"/microfrontends/\">my Microfrontends post</a>, but there are more APIs that I’ve discovered this year that are pretty awesome:</p>\n<ul><li><a href=\"/microfrontends/\">Web Components/Shadow DOM/Custom Elements</a>;</li>\n<li><a href=\"/web-workers/\">Web Workers</a>;</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">IntersectionObserver</a>;</li>\n<li>Not exactly new, but <a href=\"/what-are-pwas-and-why-should-i-care-about-them/\">PWAs</a> are increasingly awesome;</li></ul>\n<h2 id=\"jekyll\">Jekyll<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#jekyll\"><span class=\"heading-link\">#</span></a></h2>\n<p>I’m a bit late to the party, but this is still something I’ve found out about in 2019. This website/blog you’re seeing is built on top of Jekyll, a tool for making static websites.</p>\n<p>Basically, you have HTML, CSS and JS. Add some special powers for using variables/loops inside that HTML code and ta-da! It works. Jekyll also allows you to create pages from Markdown (.md) files. I use it for blog posts like this one.</p>\n<p>Since it’s a static website, it means the code that’s served to users/visitors is compiled just once and then served as HTML files. No servers or APIs necessary. It’s pretty cool. You can check more about Jekyll <a href=\"https://jekyllrb.com/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">here</a> and can check the source code for my website <a href=\"https://github.com/matfantinel/matfantinel.github.io\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">here</a>.</p>\n<h2 id=\"open-source-is-awesome\">Open Source is awesome<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#open-source-is-awesome\"><span class=\"heading-link\">#</span></a></h2>\n<p>I have released two open-source apps this year for elementaryOS (<a href=\"https://github.com/matfantinel/reminduck\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Reminduck</a> and <a href=\"https://github.com/matfantinel/moneta\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Moneta</a>). I gotta say, besides the fact that I was learning an entirely different development stack (Vala, GTK, Desktop native), the best “new” thing I enjoyed was doing it in the open.</p>\n<p>These are not complex, commercial apps or anything like that. They’re small utilities that I use on a daily basis and that were made open and released in hopes of helping anyone out there too. And I gotta say, having users like your software is great, but having them actively contribute to it is even better. As soon as they were released/made public, I started receiving pull requests, bug reports, feature requests, and translations from everywhere. <strong>It’s so amazing that people from all over the world took interest in my little idea and helped improve them any way they could.</strong></p>\n<p>But open source is not just other people contributing to your projects, it’s also the opposite! I can improve other people’s apps that I use, I can report bugs openly and help out, or just download the source code, change a few things just to fit my workflow better and run it. And not only apps, I can do that with the entire OS I run on my PC! Not to mention having access to other people’s code allows you to learn from their work and saves you tons of time. Having a problem on your app and you know one that has solved that? Just check out what they did. Copy it, modify it, learn it, ship it. It’s all good.  <span class=\"wrapper svelte-1sgfl7c\">We wouldn’t have to spend so much time reinventing wheels if more of our code was open.</span></p>\n<p>Ah, this website is also open source. I used others as inspiration and took some code snippets too! So can you, feel free to fork it and modify anyway you want.</p>\n<h2 id=\"working-remotely-is-fun-at-least-for-some-people\">Working remotely is fun, at least for some people<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#working-remotely-is-fun-at-least-for-some-people\"><span class=\"heading-link\">#</span></a></h2>\n<p>In August I started working remotely for the first time. I work from my home in Brazil with people from US, Europe and India. It was definitely refreshing to not have to commute and always be at a place that makes you feel good. Not only that, but the flexible hours allow me to work whenever I want and I can enjoy things that weren’t possible on a regular “9 to 5” routine.</p>\n<p>Although… I end up working the same hours as I did before. It feels “right” to work at this time, and I can enjoy my family at night, since they also work during the day. But it’s nice to have the flexibility to have a break and a coffee somewhere else during the day if needed.</p>\n<p>One of the main things people say about working from home is that sometimes it’s hard to separate work time from free time. Fortunately, I didn’t have that issue. My apartment is quite small, so I don’t have a proper office and instead work on a desk on my bedroom, which means the temptation of lying down and sleeping is always beside me. I’m so thankful I am able to resist that and get work done. And after work hours I can fully disconnect from it and not be stressed out, even if I stay on the computer. I totally understand why some people would not enjoy this and would be less productive, fortunately I was not the case.</p>\n<p>The one thing I’d say is worse in my case is communication. I’m not an extremely social person - therefore I don’t miss chitchat during the day with colleagues or anything like that. It’s just that it’s harder to explain code and concepts over a call or screen share. Not everyone is always readily available to explain things because of different timezones, so you have to figure more things out on your own. It’s still doable though, and the days of “just coding” without interruptions are a dream. The pros outweight the cons.</p>\n<h2 id=\"theres-never-enough-time\">There’s never enough time<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#theres-never-enough-time\"><span class=\"heading-link\">#</span></a></h2>\n<p>This year, I started getting into writing more open source software and started working from home. The latter means I can work more on house chores since there’s no commute and I’m always around! Still, there’s never enough time for me to do what I want to do. I took time to write some elementaryOS apps, but I want to do some web apps too, and code some more, and play some games, watch series, movies, hang out with family, work, write on this blog, oof. This isn’t a new discovery by any means, but I feel like it’s getting worse every year. This is adult life, I guess.</p>\n<h2 id=\"wrapping-up\">Wrapping up<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#wrapping-up\"><span class=\"heading-link\">#</span></a></h2>\n<p>Anyway, 2019 was a good year. I (of course) hope to do more and better in 2020, hopefully including more articles here. Hope you all have some nice holidays and a great new year!</p>","css":{"code":".wrapper.svelte-1sgfl7c{background:var(--highlight-marker-url)}","map":null},"head":"","readingTime":"7 min read"},{"slug":"purpose-of-this-blog","title":"The purpose of this blog","date":"2019-03-08T00:00:00.000Z","excerpt":"Why does it exist?","tags":["Meta"],"html":"<p>There are many developer blogs out there, probably because developers like to ramble about the tech they enjoy. I’m guilty of that too! This blog was created mainly for that - sharing about development stuff that I like or that I’m learning. </p>\n<p>The purpose is to help myself learn about the subjects better, since there’s no better way to learn than trying to reach someone. Of course, it won’t be made of tutorials only - I intend to write about some theoretical concepts, and maybe tech stuff not related to development.</p>\n<p>I consider myself a tech enthusiast. Which means I like to talk about software and gadgets in a way that most other people would find me annoying. This can be a great place to be able to share this with people that may care, hopefully you!</p>\n<p>I hope to see you here in future posts, and I hope you enjoy reading what I have to say!</p>","css":{"code":"","map":null},"head":"","readingTime":"1 min read"}]},{"slug":"blog-development-sveltekit","title":"How I built a blog with Svelte and SvelteKit","date":"2021-09-08T00:00:00.000Z","excerpt":"An overview of the experience I've had using these amazing projects.","tags":["Front-End","Svelte","SvelteKit"],"html":"<p>I’ve recently re-launched my personal website and blog, that’s now reached its 3rd version. There was nothing wrong with the previous one, but I wanted to both give it a small visual refresh and learn something new. So, after a month or so of working on it on my free time, <div class=\"sparkle-wrapper svelte-exdx8u\">\n\t<div class=\"slot-wrapper svelte-exdx8u\"><strong class=\"text-secondary\">voilà</strong></div>\n</div>, you’re seeing it right now!</p>\n<div style=\"display: grid;place-items: center;max-width: 300px;margin: 20px auto 0;\"><a href=\"https://github.com/matfantinel/matfantinel.github.io\" target=\"_blank\" class=\"button secondary\"><svg width=\"100%\" height=\"100%\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M16 22.0268V19.1568C16.0375 18.68 15.9731 18.2006 15.811 17.7506C15.6489 17.3006 15.3929 16.8902 15.06 16.5468C18.2 16.1968 21.5 15.0068 21.5 9.54679C21.4997 8.15062 20.9627 6.80799 20 5.79679C20.4558 4.5753 20.4236 3.22514 19.91 2.02679C19.91 2.02679 18.73 1.67679 16 3.50679C13.708 2.88561 11.292 2.88561 8.99999 3.50679C6.26999 1.67679 5.08999 2.02679 5.08999 2.02679C4.57636 3.22514 4.54413 4.5753 4.99999 5.79679C4.03011 6.81549 3.49251 8.17026 3.49999 9.57679C3.49999 14.9968 6.79998 16.1868 9.93998 16.5768C9.61098 16.9168 9.35725 17.3222 9.19529 17.7667C9.03334 18.2112 8.96679 18.6849 8.99999 19.1568V22.0268\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path><path d=\"M9 20.0267C6 20.9999 3.5 20.0267 2 17.0267\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path></svg>See source code on GitHub</a></div>\n<h2 id=\"about-svelte-and-sveltekit\">About Svelte and SvelteKit<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#about-svelte-and-sveltekit\"><span class=\"heading-link\">#</span></a></h2>\n<p><a href=\"https://svelte.dev/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Svelte</a> is a new cool kid on the JS block - it was launched in 2016, but it really started getting traction when its 3.0 version was launched in 2019. It is a competitor to the big JS frameworks - React, Vue, Angular - but, instead of simply being an alternative way of doing things, it differentiates itself on a fundamental level: <span class=\"wrapper svelte-1sgfl7c\">it is a compiler, not a framework.</span></p>\n<p>This means that it does its job at build time, not at runtime. While other frameworks (React, for example) need JavaScript code that runs on the client in order for your components to work properly, Svelte does not, because it interprets your code on build time, and only ships exactly what it needs to run. This means websites made with Svelte can be much smaller in size and faster because it has less code to run.</p>\n<p><a href=\"https://kit.svelte.dev/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">SvelteKit</a> is a framework built on top of that. It is an opinionated set of rules that helps you get a Svelte app built pretty quickly. You can compare it to NextJS (for React) or Nuxt (for Vue). It has great defaults and encourages good practices, like server-side rendering, for example. At the time of building this website, SvelteKit was still in Beta. However, progress is steady and its API seems to be already stable, so it’s unlikely there will be any breaking changes before 1.0 arrives.</p>\n<p>Using both of the above allowed my website to have two important characteristics:</p>\n<ul><li>Every single page is rendered at build time (server-side rendering). This means that as long as the HTML and CSS files are downloaded, it will look as it was meant to be;</li>\n<li>JavaScript is not needed. Try disabling JavaScript on your browser. You’ll still be able to read this blog post and everything will look the same.</li></ul>\n<h2 id=\"progressive-enhancement\">Progressive Enhancement<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#progressive-enhancement\"><span class=\"heading-link\">#</span></a></h2>\n<p>One of the concepts that really caught my eye with Svelte is the idea of Progressive Enhancement: <span class=\"wrapper svelte-1sgfl7c\">making sure your app runs for everyone, and making it progressively more featureful if the user’s device supports it</span>. My website is a pretty simple project, but still there are instances of this:</p>\n<p>If there’s no JavaScript, the website uses the browser’s native navigation API. Which means you can navigate between pages normally without any client-side code. <em>However</em>, if JavaScript is available, a client-side router will be used to make the transition between pages smoother and faster. This means that even if the user’s device doesn’t support JS for any reason<span class=\"text-info\">*</span>, the site will still be completely functional.</p>\n<div class=\"callout-block info svelte-1pi2pyj\"><div class=\"icon-wrapper svelte-1pi2pyj\"><svg width=\"100%\" height=\"100%\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M12 11.5V16.5\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path><path d=\"M12 7.51L12.01 7.49889\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path><path d=\"M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path></svg></div>\n\t<span class=\"text-info\">*</span> We tend to think of JavaScript being disabled as a user choice, but that is not always the case. Think of someone using their phone on a weak 3G connection that fails to load the .js files, or someone in a metro that lost signal while loading the page. It happens often and being able to show your content even in these conditions is a great way of not losing a visitor.\n\n</div>\n<p>And you know what I had to do to support this? <em>Nothing</em>. Just using <code>&lt;a&gt;</code> elements is enough, as SvelteKit will intercept those if needed (JS enabled), or simply leave it to the browser otherwise.</p>\n<h2 id=\"design\">Design<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#design\"><span class=\"heading-link\">#</span></a></h2>\n<p>I’m not a designer, but I like the subject. So, instead of designing-as-I-go when developing the website, I decided to fully design it on <a href=\"https://www.figma.com/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Figma</a> before starting development. I figured that using it to design stuff is the best way to learn the platform, and I really finished this design much better at Figma than I was before. Auto-layout is fantastic since it works so much like CSS Flexbox, so I was able to approach it with a similar thought-process as I have when developing stuff.</p>\n<p>The design itself was something I came up with, and it’s an amalgamation of ideas and inspirations that were stored in my head. When building it, I wasn’t entirely sure where the inspiration came from, but now it is apparent to me that most of it comes from some websites I love: <a href=\"https://www.joshwcomeau.com/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Josh Comeau’s</a> and <a href=\"https://georgefrancis.dev/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">George Francis’</a>.</p>\n<p>After the design was complete, I finally began developing it. Since there are some things that you can only find out while developing it and giving it more attention, I made some small tweaks to the design while implementing it. Still, the final result was <em>really</em> similar to the initial design. I count that as a success!</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/blog-development-sveltekit/design-vs-result.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/blog-development-sveltekit/design-vs-result.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/blog-development-sveltekit/design-vs-result.png\" alt=\"Screenshot showing the intial design versus the final result, with minimal differences\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->The design (left) and the result (right)<!-- HTML_TAG_END --></figcaption>\n</picture>\n<h2 id=\"routing\">Routing<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#routing\"><span class=\"heading-link\">#</span></a></h2>\n<p>SvelteKit uses filesystem-based routing, which means that anything inside a <code>routes</code> folder will be accessible via its own path, without the need of manually declaring routes.</p>\n<p>My website has 4 different pages in total: home, blog, blog post and resume. This means that I can create these pages like this, and their path will already work:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t\n\t<pre class=\"language-bash\"><!-- HTML_TAG_START --><code class=\"language-bash\">└── routes\n    ├── __layout.svelte\n    ├── blog.svelte <span class=\"token comment\"># /blog</span>\n    ├── index.svelte <span class=\"token comment\"># /</span>\n    ├── resume.svelte <span class=\"token comment\"># /resume</span>\n    ├── <span class=\"token punctuation\">[</span>slug<span class=\"token punctuation\">]</span>.svelte <span class=\"token comment\"># Dynamic route (blog posts)</span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>The <code>__layout.svelte</code> file is a base layout for all the pages inside the route. Which means that I can have shared code for all pages in there. See the example below, where I added the header and footer components to the __layout, and load the content of the route itself in the <code>&lt;slot&gt;</code> element:</p>\n<div class=\"code-block svelte-qgch0c\"><div class=\"filename svelte-qgch0c\">__layout.svelte</div>\n\t<div class=\"lang svelte-qgch0c\">svelte</div>\n\t<pre class=\"language-svelte\"><!-- HTML_TAG_START --><code class=\"language-svelte\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Header</span> <span class=\"token punctuation\">/></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>main</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>slot</span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>main</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Footer</span> <span class=\"token punctuation\">/></span></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<h3 id=\"blog-post-page--dynamic-routing\">Blog Post Page / Dynamic Routing<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#blog-post-page--dynamic-routing\"><span class=\"heading-link\">#</span></a></h3>\n<p>But what about the blog post page? Well, that one is a special case. If you look at the URL loaded right now, you’ll see that it is specific to this blog post. However, that doesn’t mean there is one Svelte page for each blog post on the routes directory.</p>\n<p>You see, every blog post page is the same one, however its content is loaded based on the URL it receives. To achieve this, I used SvelteKit’s dynamic routing with a file called <code>[slug].svelte</code>. The brackets indicate that the route might be dynamic, and whatever URL comes in, it will be caught by this file (unless it’s caught by explicit routes like /blog shown above). Not only that, but that part of the URL will be accessible in the page as a parameter (called, in this case, <em>slug</em>). This parameter allows the page to know which blog post to display.</p>\n<p>However, there’s still an extra step I wanted to take. Blog posts only have their own content, but I wanted to add a few extra things on the page that weren’t present in the main __layout.svelte file, like the post title and related posts at the bottom. For that, I used a <strong>layout reset</strong>, defining that the post page shouldn’t use the main one, but instead have its own.</p>\n<p>To avoid repeating [slug] many times, I wrapped both files in a new folder. My routes directory stayed like this:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t\n\t<pre class=\"language-bash\"><!-- HTML_TAG_START --><code class=\"language-bash\">└── routes\n    ├── __layout.svelte\n    ├── blog.svelte <span class=\"token comment\"># /blog</span>\n    ├── index.svelte <span class=\"token comment\"># /</span>\n    ├── resume.svelte <span class=\"token comment\"># /resume</span>\n    └── <span class=\"token punctuation\">[</span>slug<span class=\"token punctuation\">]</span> <span class=\"token comment\"># Dynamic route (blog posts)</span>\n        ├── __layout.reset.svelte\n        ├── index.svelte</code><!-- HTML_TAG_END --></pre>\n</div>\n<h2 id=\"the-blog\">The blog<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#the-blog\"><span class=\"heading-link\">#</span></a></h2>\n<p>The main challenge for me was in processing Markdown(.md) files of the blog posts into actual Svelte code. Unlike Jekyll, which I was using previously for this blog, SvelteKit doesn’t have anything built-in for this (yet) and online resources are a bit scarce (which is normal, since it’s still in beta).</p>\n<p>I had three requisites for this:</p>\n<ul><li>I wanted to write blog posts in Markdown, because of its ease, and also so I wouldn’t have to rewrite all the existing posts;</li>\n<li>I wanted to be able to use Svelte components inside the blog posts as well, for more interactive elements;</li>\n<li>It has to be rendered on build time so the blog can be deployed to GitHub Pages;</li></ul>\n<p>I had heard about something similar to what I wanted, called MDX. It allows everything I wanted, however, it was React-based and I couldn’t use it. Luckily, I found out about <a href=\"https://mdsvex.com/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">MDsveX</a>, a project with the same goal as MDX, but for Svelte!</p>\n<p>After setting it up, I had to figure out how to actually use it. I found some examples on the internet, which seemed very straightforward. Most of them created a <code>/posts</code> folder inside the routes, and then put the .md files in there. MDsveX would do the work of transforming them into HTML pages on build, and that was it. However, that meant the post URL would have to become <code>https://fantinel.dev/posts/blog-post-name</code>. That isn’t a huge problem by itself, but it was for me because it wouldn’t be backwards-compatible with my previous blog URLs, that have been linked to a few times in other sites. I wanted to remove the need for “/posts” in the URL to keep that compatibility.</p>\n<p>That means my page on <code>routes/[slug]/index.svelte</code> should need some kind of logic that finds the correct blog post to show and dynamically loads the Svelte component generated by MDsveX. Not only that, but I needed to be able to extract the metadata of the post - its title, image, and date - to be able to display it on the __layout.reset.svelte file, and also displaying the “Recent posts” cards on the home page.</p>\n<h3 id=\"extracting-post-data\">Extracting post data<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#extracting-post-data\"><span class=\"heading-link\">#</span></a></h3>\n<p>I found out when searching that we can import all the .md files as modules, and process them via JS, since this code will run on the server. I ended up creating a <code>posts.js</code> file to centralize this logic, and did the following:</p>\n<div class=\"code-block svelte-qgch0c\"><div class=\"filename svelte-qgch0c\">posts.js</div>\n\t<div class=\"lang svelte-qgch0c\">javascript</div>\n\t<pre class=\"language-javascript\"><!-- HTML_TAG_START --><code class=\"language-javascript\"><span class=\"token comment\">// Import the markdown files for each post</span>\n<span class=\"token keyword\">const</span> imports <span class=\"token operator\">=</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">.</span>meta<span class=\"token punctuation\">.</span><span class=\"token function\">globEager</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./posts/*.md'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> posts <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> path <span class=\"token keyword\">in</span> imports<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">const</span> post <span class=\"token operator\">=</span> imports<span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// For each of them, MDsveX will do the heavy lifting. The \"metadata\"</span>\n    <span class=\"token comment\">// is automatically recovered from the Frontmatter, and we're also</span>\n    <span class=\"token comment\">// asking it to render the blog post so we're able to use it </span>\n    <span class=\"token comment\">// as a component later on.</span>\n\t\tposts<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token operator\">...</span>post<span class=\"token punctuation\">.</span>metadata<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token operator\">...</span>post<span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// Filter the post and order them by published date</span>\n<span class=\"token keyword\">const</span> filteredPosts <span class=\"token operator\">=</span> posts\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">post</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>post<span class=\"token punctuation\">.</span>hidden<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token operator\">?</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n\t\t\t<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token operator\">?</span> <span class=\"token number\">1</span>\n\t\t\t<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n\t<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Expose this info to other files</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> filteredPosts<span class=\"token punctuation\">;</span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>With that data being exported from that file, I can reuse it in the places I need:</p>\n<h4 id=\"blog-post-page\">Blog post page<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#blog-post-page\"><span class=\"heading-link\">#</span></a></h4>\n<p>On the <code>routes/[slug]/index.svelte</code> file, I can now import the posts and look for the one I should display (by comparing slugs). After that, I’ll get its module and use the special <code>&lt;svelte:component&gt;</code> (<a href=\"https://svelte.dev/docs#svelte_component\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">see docs</a>) tag to use it inside the page.</p>\n<div class=\"code-block svelte-qgch0c\"><div class=\"filename svelte-qgch0c\">index.svelte</div>\n\t<div class=\"lang svelte-qgch0c\">svelte</div>\n\t<pre class=\"language-svelte\"><!-- HTML_TAG_START --><code class=\"language-svelte\"><span class=\"token comment\">&lt;!-- By using context=\"module\", I declare that this code will run on the server --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">context</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>module<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token comment\">// Get posts info</span>\n\t<span class=\"token keyword\">const</span> allPosts <span class=\"token operator\">=</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">.</span>meta<span class=\"token punctuation\">.</span><span class=\"token function\">globEager</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">&#96;</span><span class=\"token string\">../../lib/posts/*.md</span><span class=\"token template-punctuation string\">&#96;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">let</span> posts <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Get the posts' slugs</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> path <span class=\"token keyword\">in</span> allPosts<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">const</span> post <span class=\"token operator\">=</span> allPosts<span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> slug <span class=\"token operator\">=</span> post<span class=\"token punctuation\">.</span>metadata<span class=\"token punctuation\">.</span>slug<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> post<span class=\"token punctuation\">,</span> slug <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t\tposts<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> page <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> slug <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> page<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Find the post with the slug</span>\n\t\t<span class=\"token keyword\">const</span> filteredPost <span class=\"token operator\">=</span> posts<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> p<span class=\"token punctuation\">.</span>slug<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> slug<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tprops<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// Tell page to load that post's module</span>\n\t\t\t\tpage<span class=\"token operator\">:</span> filteredPost<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">.</span>default\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token comment\">// Declare the page variable to use on the client</span>\n\t<span class=\"token keyword\">export</span> <span class=\"token keyword\">let</span> page<span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">&lt;!-- Here we'll load the component of the blog post page itself --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">svelte:</span>component</span> <span class=\"token attr-name\">this=</span><span class=\"token language-javascript\"><span class=\"token punctuation\">&#123;</span>page<span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">/></span></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<h4 id=\"listing-all-posts\">Listing all posts<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#listing-all-posts\"><span class=\"heading-link\">#</span></a></h4>\n<p>Now the post page is done, we need a way to display all the posts on the main blog page. We already have them sorted and filtered on the <code>posts.js</code> file, so all I have to do is fetch that data and iterate on it to display them all.</p>\n<p>Since the posts data comes from the server, it needs to run there. I’ll use <a href=\"https://kit.svelte.dev/docs#routing-endpoints\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">SvelteKit’s endpoints</a> to create a JSON file on build that will contain the posts data.</p>\n<div class=\"code-block svelte-qgch0c\"><div class=\"filename svelte-qgch0c\">blog.json.js</div>\n\t<div class=\"lang svelte-qgch0c\">javascript</div>\n\t<pre class=\"language-javascript\"><!-- HTML_TAG_START --><code class=\"language-javascript\"><span class=\"token keyword\">import</span> posts <span class=\"token keyword\">from</span> <span class=\"token string\">'$lib/posts'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>posts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">slug</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    slug<span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">...</span>posts<span class=\"token punctuation\">[</span>slug<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n    status<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n\t\tbody<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>And, on the page itself:</p>\n<div class=\"code-block svelte-qgch0c\"><div class=\"filename svelte-qgch0c\">blog.svelte</div>\n\t<div class=\"lang svelte-qgch0c\">svelte</div>\n\t<pre class=\"language-svelte\"><!-- HTML_TAG_START --><code class=\"language-svelte\"><span class=\"token comment\">&lt;!-- By using context=\"module\", I declare that this code will run on the server \nand fetch this data before page actually loads --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">context</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>module<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n\t<span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> fetch <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token string\">'/blog.json'</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n      props<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        posts<span class=\"token operator\">:</span> <span class=\"token keyword\">await</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token language-javascript\"><span class=\"token punctuation\">&#123;</span><span class=\"token operator\">...</span><span class=\"token punctuation\">&#125;</span></span>\n\n<span class=\"token each\"><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">#each</span> <span class=\"token language-javascript\">posts </span><span class=\"token keyword\">as</span> <span class=\"token language-javascript\">post<span class=\"token punctuation\">&#125;</span></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>BlogPostCard</span> <span class=\"token language-javascript\"><span class=\"token punctuation\">&#123;</span>post<span class=\"token punctuation\">&#125;</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token each\"><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">/each</span><span class=\"token punctuation\">&#125;</span></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<h3 id=\"rss\">RSS<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#rss\"><span class=\"heading-link\">#</span></a></h3>\n<p>Something that SvelteKit currently does not provide a solution for is a RSS feed. Previously, mine was built automatically by Jekyll and I never had to do anything to get it working. While this wasn’t the case right now, I’m sure once SvelteKit is stable and mature, solutions for this will be available so no manual work has to be done.</p>\n<p>I made mine by taking advantage of <a href=\"https://kit.svelte.dev/docs#routing-endpoints\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">SvelteKit’s endpoints</a>, and serving a XML file that is generated at build time. I import the filtered posts from the <code>posts.js</code> file I created earlier, and use the metadata to build the content of the RSS file. You can check out <a href=\"https://github.com/matfantinel/matfantinel.github.io/blob/main/src/routes/rss.xml.js\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">the source code</a> for implementation details.</p>\n<h3 id=\"sitemap\">Sitemap<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#sitemap\"><span class=\"heading-link\">#</span></a></h3>\n<p>Another thing that’s still not built-in to SvelteKit is the sitemap. It’s great for SEO, especially for newer websites, so I researched a good way of adding one. Luckily, someone already built a tool to generate them automatically, and there is already a discussion to build it into SvelteKit directly. Check out <a href=\"https://github.com/bartholomej/svelte-sitemap\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">svelte-sitemap</a> for generating your own.</p>\n<h2 id=\"wrapping-up\">Wrapping Up<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#wrapping-up\"><span class=\"heading-link\">#</span></a></h2>\n<p>My first experience with Svelte and SvelteKit was, overall, fantastic. It simplifies many parts of development and having server-side-rendering as a default option really drives forward their purpose of simplifying web both for users and developers.</p>\n<p>Though I definitely did not use all of Svelte’s strengths on this project, since it doesn’t need dynamic data and an application state, I’ll be working with that soon enough. Its ecosystem is not as big as its competitors’, since Svelte is still small compared to them, but they’re doing something right with their new approach, as Svelte is the most loved web framework according to <a href=\"https://insights.stackoverflow.com/survey/2021#section-most-loved-dreaded-and-wanted-web-frameworks\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">the latest StackOverflow survey</a>. Not to mention that Svelte itself doesn’t try to reinvent the wheel, and therefore is compatible with almost everything JavaScript.</p>\n<p>The small issues I’ve had while building this will definitely be gone soon, as they were caused by SvelteKit not being on a stable version yet. I’m excited to see how much the ecosystem grows the next year; I’ll definitely be keeping an eye on it!</p>\n<p>Don’t forget all the code for this website and blog are open source, feel free to use it and to propose changes if you’d like!</p>\n<p>Thanks for reading!</p>\n<div style=\"display: grid;place-items: center;max-width: 300px;margin: 20px auto 0;\"><a href=\"https://github.com/matfantinel/matfantinel.github.io\" target=\"_blank\" class=\"button secondary\"><svg width=\"100%\" height=\"100%\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M16 22.0268V19.1568C16.0375 18.68 15.9731 18.2006 15.811 17.7506C15.6489 17.3006 15.3929 16.8902 15.06 16.5468C18.2 16.1968 21.5 15.0068 21.5 9.54679C21.4997 8.15062 20.9627 6.80799 20 5.79679C20.4558 4.5753 20.4236 3.22514 19.91 2.02679C19.91 2.02679 18.73 1.67679 16 3.50679C13.708 2.88561 11.292 2.88561 8.99999 3.50679C6.26999 1.67679 5.08999 2.02679 5.08999 2.02679C4.57636 3.22514 4.54413 4.5753 4.99999 5.79679C4.03011 6.81549 3.49251 8.17026 3.49999 9.57679C3.49999 14.9968 6.79998 16.1868 9.93998 16.5768C9.61098 16.9168 9.35725 17.3222 9.19529 17.7667C9.03334 18.2112 8.96679 18.6849 8.99999 19.1568V22.0268\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path><path d=\"M9 20.0267C6 20.9999 3.5 20.0267 2 17.0267\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path></svg>See source code on GitHub</a></div>","css":{"code":".sparkle-wrapper.svelte-exdx8u.svelte-exdx8u{position:relative;display:inline-block}.sparkle-wrapper.svelte-exdx8u .slot-wrapper.svelte-exdx8u{position:relative;z-index:1}\n.wrapper.svelte-1sgfl7c{background:var(--highlight-marker-url)}\n.callout-block.svelte-1pi2pyj.svelte-1pi2pyj{--bg-color:var(--callout-background-color);--accent-color:transparent;margin:40px 0 30px;padding:25px 25px;border-top-right-radius:10px;border-bottom-right-radius:10px;background:var(--bg-color);color:var(--text-color);border-left:4px solid var(--accent-color);position:relative}.callout-block.svelte-1pi2pyj .icon-wrapper.svelte-1pi2pyj{position:absolute;width:50px;height:50px;top:0;left:0;transform:translate(calc(-50% - 1.5px), -50%);background:var(--post-page-background-color);padding:8px;border-radius:50%;fill:var(--accent-color);color:var(--accent-color)}.callout-block.info.svelte-1pi2pyj.svelte-1pi2pyj{--bg-color:var(--callout-info-background-color);--accent-color:var(--callout-info-accent-color)}.callout-block.warning.svelte-1pi2pyj.svelte-1pi2pyj{--bg-color:var(--callout-warning-background-color);--accent-color:var(--callout-warning-accent-color)}.callout-block.error.svelte-1pi2pyj.svelte-1pi2pyj{--bg-color:var(--callout-error-background-color);--accent-color:var(--callout-error-accent-color)}.callout-block.success.svelte-1pi2pyj.svelte-1pi2pyj{--bg-color:var(--callout-success-background-color);--accent-color:var(--callout-success-accent-color)}\npicture.svelte-1gy5t1o.svelte-1gy5t1o{position:relative;width:100%;height:100%}picture.svelte-1gy5t1o img.svelte-1gy5t1o{width:100%;height:100%}\n.code-block.svelte-qgch0c.svelte-qgch0c{display:block;position:relative;background-color:var(--code-background-color);color:var(--code-text-color);font-family:var(--mono-font);font-size:1rem;line-height:1.33em;border-radius:8px;box-shadow:var(--card-shadow);padding:30px 15px;margin:30px 0}.code-block.svelte-qgch0c pre{overflow-x:auto;scrollbar-color:var(--primary-color) var(--scrollbar-track-color);scrollbar-width:thin;padding-bottom:5px}.code-block.svelte-qgch0c pre::-webkit-scrollbar{height:8px}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb{background:var(--primary-color)}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb:hover{background:var(--primary-light-color)}.code-block.svelte-qgch0c .lang.svelte-qgch0c{position:absolute;right:0;top:-15px;background:inherit;border-radius:8px;padding:5px 10px;z-index:2;font-size:0.85em}.code-block.svelte-qgch0c .filename.svelte-qgch0c{background:inherit;border-top-left-radius:8px;border-top-right-radius:8px;margin-bottom:-2px;padding:5px 10px;position:absolute;left:0px;top:-15px;z-index:1}","map":null},"head":"","readingTime":"20 min read","relatedPosts":[{"slug":"web-images-modern-formats","title":"Smarter, Lighter, Better Images: A Guide to Optimization","date":"2021-01-30T00:00:00.000Z","excerpt":"Learn how to reduce page loading times and bounce rate.","tags":["Front-End","Guide","HTML","CSS","Optimization"],"html":"<p>Do you know how big the images displayed on your website are? When you open a page, the browser starts downloading a bunch of files in order to display it. Research shows that <a href=\"https://httparchive.org/reports/state-of-images\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">images are the most requested asset type</a> and take up more bandwidth than any other resource. So, making sure they are as small as they can be can greatly improve the load times for your website. (spoiler alert: mine’s become 85% faster!)</p>\n<h2 id=\"more-efficient-formats\">More efficient formats<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#more-efficient-formats\"><span class=\"heading-link\">#</span></a></h2>\n<p>For a long time, JPGs and PNGs have been our standard image formats. However, they are not optimized for the web - their quality is often unnecessarily high and the download size is too big. Over time, many new formats have appeared, but two of them have become quite notable: <a href=\"https://en.wikipedia.org/wiki/WebP\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">WebP</a> and <a href=\"https://www.lambdatest.com/blog/avif-image-format/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">AVIF</a>.</p>\n<p>WebP has been introduced in 2010, and has slowly gained adoption since then. Since 2020, <a href=\"https://caniuse.com/webp\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">WebP is now supported in all modern browsers</a>. AVIF <a href=\"https://jakearchibald.com/2020/avif-has-landed/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">was launched in 2020</a>, and its adoption has been faster. As of January 2021 it is supported by all Chromium-based browsers, and Firefox will start supporting it on version 86, scheduled to release before March.</p>\n<p><em>But how do we use those shiny new formats if not all browsers support them?</em></p>\n<p>With the HTML <code>&lt;picture&gt;</code> element, we can make the browsers do the work for us. We can declare multiple sources for the same image, and the browser will try to load them in order. If they do not support a format, they will immediatelly jump to the next one.</p>\n<p>So, what we want to do is declare those different sources in the following order:</p>\n<p>AVIF -&gt; WebP -&gt; JPG (or PNG)</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">html</div>\n\t<pre class=\"language-html\"><!-- HTML_TAG_START --><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>picture</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token comment\">&lt;!-- If this type(avif) is supported, use this src --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span>\n    <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image/avif<span class=\"token punctuation\">\"</span></span> \n    <span class=\"token attr-name\">srcset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>my-image.avif<span class=\"token punctuation\">\"</span></span> \n  <span class=\"token punctuation\">/></span></span>\n  <span class=\"token comment\">&lt;!-- Else, if this type(webp) is supported, use this src instead --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span>\n    <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image/webp<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">srcset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>my-image.webp<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token punctuation\">/></span></span>\n  <span class=\"token comment\">&lt;!-- Else, fall back to jpg --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> \n    <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>my-image.jpg<span class=\"token punctuation\">\"</span></span> \n    <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>A test image<span class=\"token punctuation\">\"</span></span> \n    <span class=\"token attr-name\">loading</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lazy<span class=\"token punctuation\">\"</span></span> \n    <span class=\"token attr-name\">decoding</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>async<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>picture</span><span class=\"token punctuation\">></span></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>If you look at the resulting HTML in your website, you can see that the <code>&lt;img&gt;</code> element has a <code>src</code> defined, but when you hover over it, it shows what is the actual file that’s being loaded. If you’re on a supported browser, it will have loaded the AVIF file. If you’re on Safari, it will have loaded the WebP one. Otherwise, if you’re using IE or something (I’m sorry), the original JPG or PNG file will be loaded.</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/web-images-modern-formats/generated-html.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/web-images-modern-formats/generated-html.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/web-images-modern-formats/generated-html.png\" alt=\"Screenshot of the generated HTML code\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->The img tag shows the PNG file as source, but hovering the mouse over it reveals that the AVIF file is the one that actually loaded.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<h2 id=\"load-smaller-images\">Load smaller images<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#load-smaller-images\"><span class=\"heading-link\">#</span></a></h2>\n<p>You can optimize even further than that. See, in my example, I am loading an image with a width of 1200px, however, the size it’s being displayed is only 319px wide. The <code>srcset</code> property supports different widths to load, depending on the screen size.</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">html</div>\n\t<pre class=\"language-html\"><!-- HTML_TAG_START --><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>picture</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token comment\">&lt;!-- Here, we declare the widths our different files have: 380px, 640px and 960px --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span>\n    <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image/avif<span class=\"token punctuation\">\"</span></span> \n    <span class=\"token attr-name\">srcset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>\n      my-image-380w.avif 380w,\n      my-image-640w.avif 640w,\n      my-image-960w.avif 960w\n    <span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">sizes</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>(max-width: 979px) 100vw, 640px<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> \n    <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>my-image.jpg<span class=\"token punctuation\">\"</span></span> \n    <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>A test image<span class=\"token punctuation\">\"</span></span> \n    <span class=\"token attr-name\">loading</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lazy<span class=\"token punctuation\">\"</span></span> \n    <span class=\"token attr-name\">decoding</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>async<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>picture</span><span class=\"token punctuation\">></span></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>The <code>srcset</code> property is smart. As the name implies, it is a set of sources, not just a single one. When we declare multiple file paths and add a width unit besides it, the browser looks at this data and tries to display the smallest possible image.</p>\n<p>On the code snippet above, the browser will follow this: <span class=\"wrapper svelte-1sgfl7c\">If the size of the displayed image (on the page) is smaller or equal to 380px, it will load the file with 380px of width. Otherwise, it will try to load the next declared path (640px).</span></p>\n<p><strong>However,</strong> not all parts of this process are smarty. The browser cannot know what is the final size of the image on the page before it actually loads it. Which is why the <code>sizes</code> property exists. Let’s see how it works:</p>\n<p>The <code>sizes</code> property defines what rule the browser will use to get the width it uses to choose the correct file in <code>srcset</code>. The default value is <code>100vw</code>. That means that, to check what width the image will have, the browser just gets the width of the browser window. If we know the exact size the image will have on load, we can declare it here, or if we don’t know the exact size, we can estimate. We can use media queries to help us specify the sizes better as well.</p>\n<p>Check out the value on the example: <code>(max-width: 979px) 100vw, 640px</code>. What that code does is: if the width of the viewport is equal or smaller than 979px, use 100vw. Else, use 640px.</p>\n<p>It is easier to understand if we visualize it like this:</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/web-images-modern-formats/sizes.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/web-images-modern-formats/sizes.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/web-images-modern-formats/sizes.png\" alt=\"Screenshots picturing how the sizes property affects the image loading on both mobile and desktop\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->On mobile, the image width is almost the same as the viewport, so it's okay to use 100vw. On desktop, we usually limit the image width, so 640px was the sweet spot in this particular case.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<p>Of course, different websites have different needs and situations. Make sure to adapt the code to your specific need. </p>\n<p>It’s also worth noting that most phones use a HiDPI mode. This means that <span class=\"wrapper svelte-1sgfl7c\">even though the reported width for the phone above is 375px, the browser will likely use a higher resolution to load the images</span> (usually 2x), in order to serve a higher quality image.</p>\n<h2 id=\"lazy-loading-and-async-decoding\">Lazy Loading and Async Decoding<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#lazy-loading-and-async-decoding\"><span class=\"heading-link\">#</span></a></h2>\n<p>You might have noticed the <code>loading=&quot;lazy&quot;</code> and <code>decoding=&quot;async&quot;</code> attributes in the code above. Those are relatively new options that are part of an ongoing effort to make the web faster.</p>\n<p><code>decoding=&quot;async&quot;</code> tells your browser it can try to parallelize loading your image. When your page is loading, it tries to decode both text and images at the same time. On lower-end devices though, decoding heavy images can take a while, and this might block the rendering of the rest of the content. With this option, the browser will try to proceed rendering the rest of the content and render the image later. This can be a great improvement to perceived performance.</p>\n<p><code>loading=&quot;lazy&quot;</code> is probably the most important of the two. It is an easy way of telling the browser to <span class=\"wrapper svelte-1sgfl7c\">only load the images when they get close to appearing in the viewport</span>. There is a threshold that is defined by the browser that controls how close it needs to be before it gets loaded, so you don’t have to worry about them not showing up if the user scrolls fast. <span class=\"wrapper svelte-1sgfl7c\">This ensures that the initial load of the website is as lean as it can get, improving perceived performance and also saving you some money on server requests.</span></p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/web-images-modern-formats/first-load-requests.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/web-images-modern-formats/first-load-requests.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/web-images-modern-formats/first-load-requests.png\" alt=\"Screenshot of the image requests made on first load of my website\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->When the website is initially loaded, it only downloads what's needed: my avatar image and the preview of the first blog post, that will show up after scrolling a bit.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/web-images-modern-formats/after-scrolling-requests.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/web-images-modern-formats/after-scrolling-requests.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/web-images-modern-formats/after-scrolling-requests.png\" alt=\"Screenshot of the image requests made after scrolling a bit\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->When I scroll down the page, the images are downloaded as they're close to appearing.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<h2 id=\"results-in-practice\">Results In Practice<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#results-in-practice\"><span class=\"heading-link\">#</span></a></h2>\n<p>Since I like using my own website and blog as a testbed for new stuff that I learn, I have applied these optimizations to it. The results were incredible!</p>\n<p>Note: after doing some tests, I have decided that the benefits of serving differently-sized images on my website were too small to justify the extra effort of handling all these extra images. So, the only optimizations I have really applied were the optimized file formats, lazy loading and async decoding. I also chose PNG as fallback type instead of JPG because some of my images have transparency in them, which JPG does not support.</p>\n<p>The following data is taken from the home page of the website, since it has a lot of images:</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/web-images-modern-formats/results.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/web-images-modern-formats/results.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/web-images-modern-formats/results.png\" alt=\"Screenshot showing the difference in download size before and after the optimizations\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  \n</picture>\n<span class=\"wrapper svelte-1sgfl7c\">The total download size decreased by a whopping 85%!!</span> That&#39;s an incredible difference, with no noticeable difference in quality. Your results may vary, as they depend on how much of your website&#39;s size is images.\n<p>Before the changes, out of 1.6MB total, 92% of it were images, 5% were fonts, 1% was HTML, and the remaining 2% were of JS and other things like the web manifest.</p>\n<p>Now, out of 249kB, just 24% of it are images. Fonts now make up 27% of page size, and are likely the target of a future optimization post!</p>\n<h2 id=\"the-hard-part\">The Hard Part<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#the-hard-part\"><span class=\"heading-link\">#</span></a></h2>\n<p>The hardest part of this process is converting the images to all necessary formats and sizes. It is a lot of effort to do manually even for a single image, and even worse if you’re trying to optimize existing images like I was. </p>\n<h3 id=\"generating-the-images\">Generating the Images<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#generating-the-images\"><span class=\"heading-link\">#</span></a></h3>\n<p>For my needs, I have developed a NodeJS script that uses the <a href=\"https://github.com/lovell/sharp\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Sharp</a> library to do the magic for me. It accepts as parameters a source and a target folder, input file types (what files it will look for in the source folder), output file types (what types it will convert to), as well as the desired widths.</p>\n<p>The script is at the time of writing this currently usable only via command line. I have plans to turn this into a part of the build process of my website, with a <a href=\"https://github.com/features/actions\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">GitHub Action</a>, so that I don’t have to run it manually. </p>\n<p>So, to check out how to use the script, please <a href=\"https://github.com/matfantinel/image-transmutation\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">check out its GitHub page</a> for up-to-date instructions.</p>\n<h3 id=\"using-the-images\">Using the images<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#using-the-images\"><span class=\"heading-link\">#</span></a></h3>\n<p>To make this setup work, I had to do some changes on how images were used on my website.</p>\n<p>Pre-existing conditions:</p>\n<ul><li>All the images on my website were initially in a folder called “images”, with various subfolders;</li>\n<li>The images I wanted to convert were all in either PNG or JPG formats;</li></ul>\n<p>Modifications I did:</p>\n<ul><li>I have created a folder called “optimized-images”, where all the converted images are saved automatically by my script;</li>\n<li>I have created a component to centralize all image-loading logic. With Jekyll, I just had to create an HTML file in the <code>_includes</code> folder, but how you do this might vary depending on what technology you use;</li>\n<li>This component receives as parameters: the relative file path, the filename (without file extension), and the alt text;</li></ul>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">html</div>\n\t<pre class=\"language-html\"><!-- HTML_TAG_START --><code class=\"language-html\">&#123;% assign alt = include.alt %&#125;\n&#123;% assign path = include.path %&#125;\n&#123;% assign filename = include.filename %&#125;\n<span class=\"token comment\">&lt;!-- Here I build the full path to the image, minus the extension --></span>\n<span class=\"token comment\">&lt;!-- In case the process of generating the images is automated, you can check here if it's --></span>\n<span class=\"token comment\">&lt;!-- running locally or not, and swap between /images and /optimized-images accordingly --></span>\n&#123;% assign imageSrc = '/optimized-images/' | append: path | append: '/' | append: filename %&#125;\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>picture</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- And here I use that path and add the extensions inside the srcsets only --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span>\n    <span class=\"token attr-name\">srcset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#123;&#123; imageSrc &#125;&#125;.avif<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image/avif<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span>\n    <span class=\"token attr-name\">srcset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#123;&#123; imageSrc &#125;&#125;.webp<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image/webp<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#123;&#123; imageSrc &#125;&#125;.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#123;&#123; alt &#125;&#125;<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">loading</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lazy<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">decoding</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>async<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>picture</span><span class=\"token punctuation\">></span></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>And to use this component inside another page:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">liquid</div>\n\t<pre class=\"language-liquid\"><!-- HTML_TAG_START --><code class=\"language-liquid\"><span class=\"token liquid language-liquid\"><span class=\"token delimiter punctuation\">&#123;%</span> <span class=\"token keyword\">include</span> base/smart<span class=\"token operator\">-</span>image<span class=\"token punctuation\">.</span>html \n  path<span class=\"token operator\">=</span><span class=\"token string\">\"posts/my-post-url\"</span>\n  filename<span class=\"token operator\">=</span><span class=\"token string\">\"my-image\"</span>\n  alt<span class=\"token operator\">=</span><span class=\"token string\">\"A sample image\"</span>\n<span class=\"token delimiter punctuation\">%&#125;</span></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>My folder structure looks like this: </p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/web-images-modern-formats/folder-images.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/web-images-modern-formats/folder-images.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/web-images-modern-formats/folder-images.png\" alt=\"Screenshot showing the optimized files in their folder and comparing to the original one\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->Llamas are great<!-- HTML_TAG_END --></figcaption>\n</picture>\n<h2 id=\"wrapping-up\">Wrapping Up<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#wrapping-up\"><span class=\"heading-link\">#</span></a></h2>\n<p>With such amazing results, it’s hard not to recommend you to optimize the images in your website ASAP. There sure are more approaches and optimizations that can be done besides the ones presented on this article, as the web world is always changing. But optimizations are a great way of showing respect to your users (as well as gathering more of them). Your site loads more quickly, and it uses less data and resources.</p>\n<p>As front-end developers, we must acknowledge that all we write runs on someone else’s computer, the user’s. So it is important that we respect them and make sure we just use the resources we need to.</p>\n<p>I hope you enjoyed reading this! Take care and happy coding!</p>","css":{"code":".code-block.svelte-qgch0c.svelte-qgch0c{display:block;position:relative;background-color:var(--code-background-color);color:var(--code-text-color);font-family:var(--mono-font);font-size:1rem;line-height:1.33em;border-radius:8px;box-shadow:var(--card-shadow);padding:30px 15px;margin:30px 0}.code-block.svelte-qgch0c pre{overflow-x:auto;scrollbar-color:var(--primary-color) var(--scrollbar-track-color);scrollbar-width:thin;padding-bottom:5px}.code-block.svelte-qgch0c pre::-webkit-scrollbar{height:8px}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb{background:var(--primary-color)}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb:hover{background:var(--primary-light-color)}.code-block.svelte-qgch0c .lang.svelte-qgch0c{position:absolute;right:0;top:-15px;background:inherit;border-radius:8px;padding:5px 10px;z-index:2;font-size:0.85em}.code-block.svelte-qgch0c .filename.svelte-qgch0c{background:inherit;border-top-left-radius:8px;border-top-right-radius:8px;margin-bottom:-2px;padding:5px 10px;position:absolute;left:0px;top:-15px;z-index:1}\npicture.svelte-1gy5t1o.svelte-1gy5t1o{position:relative;width:100%;height:100%}picture.svelte-1gy5t1o img.svelte-1gy5t1o{width:100%;height:100%}\n.wrapper.svelte-1sgfl7c{background:var(--highlight-marker-url)}","map":null},"head":"","readingTime":"14 min read"},{"slug":"fixing-favicons","title":"How to fix your Favicons","date":"2021-01-06T00:00:00.000Z","excerpt":"Favicons suck. Luckily, there are ways to make them suck less.","tags":["Front-End","Guide","Favicon"],"html":"<p>Favicons kinda suck. They should be a simple icon that identifies your webpage on a bunch of scenarios, i.e. the icon displayed on the tab besides your website’s title, or the icon on the mobile browser’s bookmarks screen, or the icon on the phone’s home screen.</p>\n<p>Unfortunately, different browsers, OSs, and implementations throughout the years have ended up with many different files and meta tags, that we as developers need to handle otherwise we end up with missing or pixelated icons.</p>\n<h2 id=\"easy-mode\">Easy Mode<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#easy-mode\"><span class=\"heading-link\">#</span></a></h2>\n<p>I recently met my new best friend, <a href=\"https://realfavicongenerator.net/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Real Favicon Generator</a>. It took all these pains I just wrote about and just made it a breeze to handle. Best of all, it’s customizable!</p>\n<p>You just have to add in your existing favicon image (for best results, a SVG or high-quality PNG are recommended). From then on, the generator will display previews and allow customization of each category of favicon it will generate:</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/fixing-favicons/favicon-generator-customization.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/fixing-favicons/favicon-generator-customization.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/fixing-favicons/favicon-generator-customization.png\" alt=\"Screenshot of Real Favicon Generator&#39;s customization\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->The customization options allow you to set different icons depending on device and OS, and even generate icons with background colors if needed.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<p>At the bottom, you can even set up ways of avoiding caching issues, compression, and scaling algorithms (!). After all that, it will generate them all as set, give you a zip with all the files, and the HTML code to paste on your <code>&lt;head&gt;</code>. You can check the result on this very website (fantinel.dev). The favicon should look fantastic on every device/browser combination.</p>\n<h2 id=\"manual-mode\">Manual Mode<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#manual-mode\"><span class=\"heading-link\">#</span></a></h2>\n<p>So, there are 5 types of favicons that we need to add, if we want to support every current browser:</p>\n<h3 id=\"1-desktop-browsers\">1. Desktop browsers<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#1-desktop-browsers\"><span class=\"heading-link\">#</span></a></h3>\n<ul><li>`favicon.ico`, for IE and any other legacy browsers. Optional if you don&#39;t want to support it;</li>\n  <li>`favicon-16x16.png`, the classic one that displays on the tabs;</li>\n  <li>`favicon-32x32.png`, used on Safari for macOS.</li></ul>\n<h3 id=\"2-android-browsers\">2. Android browsers<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#2-android-browsers\"><span class=\"heading-link\">#</span></a></h3>\n<ul><li>`android-chrome-192x192.png`, shown on the tab card and when added to home screen;</li>\n  <li>`android-chrome-512x512.png`, shown on the splash screen for when the website is installed to the phone. Optional if it&#39;s not a PWA;</li></ul>\n<h3 id=\"3-ios-safari-and-some-android-browsers-like-samsung-internet\">3. iOS Safari, and some Android browsers like Samsung Internet<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#3-ios-safari-and-some-android-browsers-like-samsung-internet\"><span class=\"heading-link\">#</span></a></h3>\n<ul><li>`apple-touch-icon.png`, a 180x180 file displayed when the website is added to home screen;</li></ul>\n<h3 id=\"4-windows-810-start-menu-optional\">4. Windows 8/10 start menu (optional)<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#4-windows-810-start-menu-optional\"><span class=\"heading-link\">#</span></a></h3>\n<ul><li>`mstile-150x150.png`, only used when your website is added to the start menu as a tile on Windows 8/10, and when not declared, defaults to `apple-touch-icon.png` instead.</li></ul>\n<h3 id=\"5-macos-safari-pinned-tabs-optional\">5. macOS Safari Pinned Tabs (optional)<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#5-macos-safari-pinned-tabs-optional\"><span class=\"heading-link\">#</span></a></h3>\n<ul><li>`safari-pinned-tab.svg` is used when users pin a tab on Safari for macOS. Basically, you declare a monochrome SVG and a theme color. Safari does the rest.</li></ul>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/fixing-favicons/safari-pinned-tabs-demo.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/fixing-favicons/safari-pinned-tabs-demo.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/fixing-favicons/safari-pinned-tabs-demo.png\" alt=\"Demo of Safari pinned tabs favicon behavior\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->How Safari pinned tab favicon works, screenshot of realfavicongenerator.net<!-- HTML_TAG_END --></figcaption>\n</picture>\n<p>With those files, you should be good to go on every single browser, by adding this to your <code>&lt;head&gt;</code>:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">html</div>\n\t<pre class=\"language-html\"><!-- HTML_TAG_START --><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>apple-touch-icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">sizes</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>180x180<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/apple-touch-icon.png<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image/png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">sizes</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>32x32<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/favicon-32x32.png<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image/png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">sizes</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>16x16<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/favicon-16x16.png?<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>manifest<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/site.webmanifest<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mask-icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/safari-pinned-tab.svg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#000000<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>shortcut icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/favicon.ico<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<h2 id=\"single-svg-favicon\">Single SVG Favicon<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#single-svg-favicon\"><span class=\"heading-link\">#</span></a></h2>\n<p>Something that’s starting to become a thing is having a single SVG favicon. Theoretically, SVGs are infinitely scalable, and should look good on all sizes. Unfortunately, browser support is not there yet.</p>\n<p><a href=\"https://caniuse.com/link-icon-svg\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Can I Use</a> reports that, currently (January 2021), only recent versions of Firefox and Chromium-based browsers support this feature. This means that Safari, non-Chromium Edge, IE, and some mobile browsers do not support it. Therefore, unless you want your favicon to just not appear in those browsers, you’d still have to use other file formats as well. The downside of this approach is that all favicons would look the same, and you won’t be able to customize and have differently-shaped icons for mobile devices, for example.</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">html</div>\n\t<pre class=\"language-html\"><!-- HTML_TAG_START --><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>favicon.svg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<h2 id=\"wrapping-up\">Wrapping Up<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#wrapping-up\"><span class=\"heading-link\">#</span></a></h2>\n<p>Favicons suck. Luckily, there are people working to make it suck less. With the approach presented on this article, your website should be able to display its best favicon on all browsers for years to come.</p>","css":{"code":"picture.svelte-1gy5t1o.svelte-1gy5t1o{position:relative;width:100%;height:100%}picture.svelte-1gy5t1o img.svelte-1gy5t1o{width:100%;height:100%}\n.code-block.svelte-qgch0c.svelte-qgch0c{display:block;position:relative;background-color:var(--code-background-color);color:var(--code-text-color);font-family:var(--mono-font);font-size:1rem;line-height:1.33em;border-radius:8px;box-shadow:var(--card-shadow);padding:30px 15px;margin:30px 0}.code-block.svelte-qgch0c pre{overflow-x:auto;scrollbar-color:var(--primary-color) var(--scrollbar-track-color);scrollbar-width:thin;padding-bottom:5px}.code-block.svelte-qgch0c pre::-webkit-scrollbar{height:8px}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb{background:var(--primary-color)}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb:hover{background:var(--primary-light-color)}.code-block.svelte-qgch0c .lang.svelte-qgch0c{position:absolute;right:0;top:-15px;background:inherit;border-radius:8px;padding:5px 10px;z-index:2;font-size:0.85em}.code-block.svelte-qgch0c .filename.svelte-qgch0c{background:inherit;border-top-left-radius:8px;border-top-right-radius:8px;margin-bottom:-2px;padding:5px 10px;position:absolute;left:0px;top:-15px;z-index:1}","map":null},"head":"","readingTime":"6 min read"},{"slug":"css-scroll-snapping","title":"CSS Scroll Snapping - Improve Scrolling without JS","date":"2020-08-03T00:00:00.000Z","excerpt":"Learn how to snap scrolling positions with CSS only.","tags":["Front-End","CSS","Guide"],"html":"<p>CSS is evolving constantly and the past few years have brought us amazing stuff. It is getting easier to make smooth and complete experiences without having to use JavaScript at all. Case in point: Scroll Snapping.</p>\n<p>It is an easy way to guarantee that users will scroll to the correct portion of your page or of a container. Picture a landing page that is easily swipable/scrollable between sections, or swipable cards. Take in mind how Android’s Recent Apps screen works, for example:</p>\n<p><img src=\"/images/posts/css-scroll-snapping/android-scroll-snapping.gif\" alt=\"Android's Recent Apps screen has scroll mapping between app cards\"></p>\n<p>You can see that Android never allows the end of a scroll to be in a place between cards. There’s a certain threshold that determines that the scroll will snap into the nearest card and put it in the center. All that while still keeping scrolling momentum, allowing you to go from one edge of the list to another in a single scroll if you want to.</p>\n<p>Until recently, you’d have to resort to JavaScript code to make a similar behavior on the web. But now, all you need is CSS, which makes things more performant, consistent and reliable! Browser support is already pretty good, with all major browser engines already supporting it fully. Check out browser support on <a href=\"https://caniuse.com/#feat=css-snappoints\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">caniuse.com</a>.</p>\n<p>I’ve recently added scroll snapping to my own website. You can check it out on the “Work Experience” section in the <a href=\"https://fantinel.dev\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Home page</a>. It’s specially great on mobile!</p>\n<h2 id=\"how\">How?<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#how\"><span class=\"heading-link\">#</span></a></h2>\n<p>There are two main CSS properties that make the magic happen, one for the parent element, and one for its children.</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">css</div>\n\t<pre class=\"language-css\"><!-- HTML_TAG_START --><code class=\"language-css\"><span class=\"token selector\">.parent</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">scroll-snap-type</span><span class=\"token punctuation\">:</span> y mandatory<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.child</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">scroll-snap-align</span><span class=\"token punctuation\">:</span> start<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code><!-- HTML_TAG_END --></pre>\n</div>\n<h3 id=\"scroll-snap-type\">scroll-snap-type<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#scroll-snap-type\"><span class=\"heading-link\">#</span></a></h3>\n<p>This property tells the browser that the parent element uses scroll snapping. We are given some options on how snapping must work. <code>y</code> indicates that the scroll happens vertically, while <code>x</code> means horizontally. We can also pass the <code>mandatory</code> and <code>proximity</code> options. </p>\n<p>We use <code>mandatory</code> to tell that the browser <em>must</em> snap to a snap point when the user stops scrolling. This means that if the next snap point becomes visible on the screen and scrolling stops, the browser will automatically snap to the next one. In the other end, with <code>proximity</code>, things are less strict. The browser will only snap to the next snap point if scrolling gets past a certain threshold. Both values are useful, their use will depend on the situation you’re applying it to.</p>\n<iframe height=\"500\" style=\"width: 100%;\" scrolling=\"no\" title=\"scroll-snap-type: Mandatory vs Proximity\" src=\"https://codepen.io/matfantinel/embed/preview/LYNPdpE?default-tab=result&theme-id=dark\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">See the Pen <a href=\"https://codepen.io/matfantinel/pen/LYNPdpE\">scroll-snap-type: Mandatory vs Proximity</a> by Matheus Fantinel (<a href=\"https://codepen.io/matfantinel\">@matfantinel</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>\n<h3 id=\"scroll-snap-align\">scroll-snap-align<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#scroll-snap-align\"><span class=\"heading-link\">#</span></a></h3>\n<p>This is a property you add to the children that specifies where the snap points will be in the element. Which means that, whenever the browser automatically snaps the scroll to the element, it will either go to the left/top edge (<code>start</code>), center (<code>center</code>), or right/bottom edge (<code>end</code>) of the element. This property pretty much only makes a difference if the children are bigger than the parent’s display size.</p>\n<h3 id=\"scroll-padding-and-scroll-margin\">scroll-padding and scroll-margin<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#scroll-padding-and-scroll-margin\"><span class=\"heading-link\">#</span></a></h3>\n<p>To make things even better, we can use the <code>scroll-padding</code> (for parent) and <code>scroll-margin</code> (for children) properties. They add some space before/after the elements that are only considered when scrolling. The best way to implement them is by trying it out after you build your scroll snapping goodiness.</p>\n<p>You can check the documentation over on <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Scroll_Snap\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Mozilla Developer Network</a> for more info.</p>\n<h2 id=\"wrapping-up\">Wrapping Up<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#wrapping-up\"><span class=\"heading-link\">#</span></a></h2>\n<p>Scroll snapping is a sign that the web is maturing. For years we’ve been bloating websites with a lot of JavaScript for very simple visual tasks, and now CSS is slowly evolving to take some space back. It’s an important evolution because Web technologies are being used to build every kind of application, and its native feature set needs to be good enough to compete with native or native-ish counterparts like Flutter, Swift, or Kotlin.</p>\n<p>Thanks for reading!</p>","css":{"code":".code-block.svelte-qgch0c.svelte-qgch0c{display:block;position:relative;background-color:var(--code-background-color);color:var(--code-text-color);font-family:var(--mono-font);font-size:1rem;line-height:1.33em;border-radius:8px;box-shadow:var(--card-shadow);padding:30px 15px;margin:30px 0}.code-block.svelte-qgch0c pre{overflow-x:auto;scrollbar-color:var(--primary-color) var(--scrollbar-track-color);scrollbar-width:thin;padding-bottom:5px}.code-block.svelte-qgch0c pre::-webkit-scrollbar{height:8px}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb{background:var(--primary-color)}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb:hover{background:var(--primary-light-color)}.code-block.svelte-qgch0c .lang.svelte-qgch0c{position:absolute;right:0;top:-15px;background:inherit;border-radius:8px;padding:5px 10px;z-index:2;font-size:0.85em}.code-block.svelte-qgch0c .filename.svelte-qgch0c{background:inherit;border-top-left-radius:8px;border-top-right-radius:8px;margin-bottom:-2px;padding:5px 10px;position:absolute;left:0px;top:-15px;z-index:1}","map":null},"head":"","readingTime":"4 min read"}]},{"slug":"web-images-modern-formats","title":"Smarter, Lighter, Better Images: A Guide to Optimization","date":"2021-01-30T00:00:00.000Z","excerpt":"Learn how to reduce page loading times and bounce rate.","tags":["Front-End","Guide","HTML","CSS","Optimization"],"html":"<p>Do you know how big the images displayed on your website are? When you open a page, the browser starts downloading a bunch of files in order to display it. Research shows that <a href=\"https://httparchive.org/reports/state-of-images\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">images are the most requested asset type</a> and take up more bandwidth than any other resource. So, making sure they are as small as they can be can greatly improve the load times for your website. (spoiler alert: mine’s become 85% faster!)</p>\n<h2 id=\"more-efficient-formats\">More efficient formats<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#more-efficient-formats\"><span class=\"heading-link\">#</span></a></h2>\n<p>For a long time, JPGs and PNGs have been our standard image formats. However, they are not optimized for the web - their quality is often unnecessarily high and the download size is too big. Over time, many new formats have appeared, but two of them have become quite notable: <a href=\"https://en.wikipedia.org/wiki/WebP\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">WebP</a> and <a href=\"https://www.lambdatest.com/blog/avif-image-format/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">AVIF</a>.</p>\n<p>WebP has been introduced in 2010, and has slowly gained adoption since then. Since 2020, <a href=\"https://caniuse.com/webp\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">WebP is now supported in all modern browsers</a>. AVIF <a href=\"https://jakearchibald.com/2020/avif-has-landed/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">was launched in 2020</a>, and its adoption has been faster. As of January 2021 it is supported by all Chromium-based browsers, and Firefox will start supporting it on version 86, scheduled to release before March.</p>\n<p><em>But how do we use those shiny new formats if not all browsers support them?</em></p>\n<p>With the HTML <code>&lt;picture&gt;</code> element, we can make the browsers do the work for us. We can declare multiple sources for the same image, and the browser will try to load them in order. If they do not support a format, they will immediatelly jump to the next one.</p>\n<p>So, what we want to do is declare those different sources in the following order:</p>\n<p>AVIF -&gt; WebP -&gt; JPG (or PNG)</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">html</div>\n\t<pre class=\"language-html\"><!-- HTML_TAG_START --><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>picture</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token comment\">&lt;!-- If this type(avif) is supported, use this src --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span>\n    <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image/avif<span class=\"token punctuation\">\"</span></span> \n    <span class=\"token attr-name\">srcset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>my-image.avif<span class=\"token punctuation\">\"</span></span> \n  <span class=\"token punctuation\">/></span></span>\n  <span class=\"token comment\">&lt;!-- Else, if this type(webp) is supported, use this src instead --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span>\n    <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image/webp<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">srcset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>my-image.webp<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token punctuation\">/></span></span>\n  <span class=\"token comment\">&lt;!-- Else, fall back to jpg --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> \n    <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>my-image.jpg<span class=\"token punctuation\">\"</span></span> \n    <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>A test image<span class=\"token punctuation\">\"</span></span> \n    <span class=\"token attr-name\">loading</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lazy<span class=\"token punctuation\">\"</span></span> \n    <span class=\"token attr-name\">decoding</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>async<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>picture</span><span class=\"token punctuation\">></span></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>If you look at the resulting HTML in your website, you can see that the <code>&lt;img&gt;</code> element has a <code>src</code> defined, but when you hover over it, it shows what is the actual file that’s being loaded. If you’re on a supported browser, it will have loaded the AVIF file. If you’re on Safari, it will have loaded the WebP one. Otherwise, if you’re using IE or something (I’m sorry), the original JPG or PNG file will be loaded.</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/web-images-modern-formats/generated-html.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/web-images-modern-formats/generated-html.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/web-images-modern-formats/generated-html.png\" alt=\"Screenshot of the generated HTML code\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->The img tag shows the PNG file as source, but hovering the mouse over it reveals that the AVIF file is the one that actually loaded.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<h2 id=\"load-smaller-images\">Load smaller images<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#load-smaller-images\"><span class=\"heading-link\">#</span></a></h2>\n<p>You can optimize even further than that. See, in my example, I am loading an image with a width of 1200px, however, the size it’s being displayed is only 319px wide. The <code>srcset</code> property supports different widths to load, depending on the screen size.</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">html</div>\n\t<pre class=\"language-html\"><!-- HTML_TAG_START --><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>picture</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token comment\">&lt;!-- Here, we declare the widths our different files have: 380px, 640px and 960px --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span>\n    <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image/avif<span class=\"token punctuation\">\"</span></span> \n    <span class=\"token attr-name\">srcset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>\n      my-image-380w.avif 380w,\n      my-image-640w.avif 640w,\n      my-image-960w.avif 960w\n    <span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">sizes</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>(max-width: 979px) 100vw, 640px<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> \n    <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>my-image.jpg<span class=\"token punctuation\">\"</span></span> \n    <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>A test image<span class=\"token punctuation\">\"</span></span> \n    <span class=\"token attr-name\">loading</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lazy<span class=\"token punctuation\">\"</span></span> \n    <span class=\"token attr-name\">decoding</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>async<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>picture</span><span class=\"token punctuation\">></span></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>The <code>srcset</code> property is smart. As the name implies, it is a set of sources, not just a single one. When we declare multiple file paths and add a width unit besides it, the browser looks at this data and tries to display the smallest possible image.</p>\n<p>On the code snippet above, the browser will follow this: <span class=\"wrapper svelte-1sgfl7c\">If the size of the displayed image (on the page) is smaller or equal to 380px, it will load the file with 380px of width. Otherwise, it will try to load the next declared path (640px).</span></p>\n<p><strong>However,</strong> not all parts of this process are smarty. The browser cannot know what is the final size of the image on the page before it actually loads it. Which is why the <code>sizes</code> property exists. Let’s see how it works:</p>\n<p>The <code>sizes</code> property defines what rule the browser will use to get the width it uses to choose the correct file in <code>srcset</code>. The default value is <code>100vw</code>. That means that, to check what width the image will have, the browser just gets the width of the browser window. If we know the exact size the image will have on load, we can declare it here, or if we don’t know the exact size, we can estimate. We can use media queries to help us specify the sizes better as well.</p>\n<p>Check out the value on the example: <code>(max-width: 979px) 100vw, 640px</code>. What that code does is: if the width of the viewport is equal or smaller than 979px, use 100vw. Else, use 640px.</p>\n<p>It is easier to understand if we visualize it like this:</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/web-images-modern-formats/sizes.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/web-images-modern-formats/sizes.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/web-images-modern-formats/sizes.png\" alt=\"Screenshots picturing how the sizes property affects the image loading on both mobile and desktop\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->On mobile, the image width is almost the same as the viewport, so it's okay to use 100vw. On desktop, we usually limit the image width, so 640px was the sweet spot in this particular case.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<p>Of course, different websites have different needs and situations. Make sure to adapt the code to your specific need. </p>\n<p>It’s also worth noting that most phones use a HiDPI mode. This means that <span class=\"wrapper svelte-1sgfl7c\">even though the reported width for the phone above is 375px, the browser will likely use a higher resolution to load the images</span> (usually 2x), in order to serve a higher quality image.</p>\n<h2 id=\"lazy-loading-and-async-decoding\">Lazy Loading and Async Decoding<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#lazy-loading-and-async-decoding\"><span class=\"heading-link\">#</span></a></h2>\n<p>You might have noticed the <code>loading=&quot;lazy&quot;</code> and <code>decoding=&quot;async&quot;</code> attributes in the code above. Those are relatively new options that are part of an ongoing effort to make the web faster.</p>\n<p><code>decoding=&quot;async&quot;</code> tells your browser it can try to parallelize loading your image. When your page is loading, it tries to decode both text and images at the same time. On lower-end devices though, decoding heavy images can take a while, and this might block the rendering of the rest of the content. With this option, the browser will try to proceed rendering the rest of the content and render the image later. This can be a great improvement to perceived performance.</p>\n<p><code>loading=&quot;lazy&quot;</code> is probably the most important of the two. It is an easy way of telling the browser to <span class=\"wrapper svelte-1sgfl7c\">only load the images when they get close to appearing in the viewport</span>. There is a threshold that is defined by the browser that controls how close it needs to be before it gets loaded, so you don’t have to worry about them not showing up if the user scrolls fast. <span class=\"wrapper svelte-1sgfl7c\">This ensures that the initial load of the website is as lean as it can get, improving perceived performance and also saving you some money on server requests.</span></p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/web-images-modern-formats/first-load-requests.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/web-images-modern-formats/first-load-requests.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/web-images-modern-formats/first-load-requests.png\" alt=\"Screenshot of the image requests made on first load of my website\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->When the website is initially loaded, it only downloads what's needed: my avatar image and the preview of the first blog post, that will show up after scrolling a bit.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/web-images-modern-formats/after-scrolling-requests.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/web-images-modern-formats/after-scrolling-requests.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/web-images-modern-formats/after-scrolling-requests.png\" alt=\"Screenshot of the image requests made after scrolling a bit\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->When I scroll down the page, the images are downloaded as they're close to appearing.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<h2 id=\"results-in-practice\">Results In Practice<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#results-in-practice\"><span class=\"heading-link\">#</span></a></h2>\n<p>Since I like using my own website and blog as a testbed for new stuff that I learn, I have applied these optimizations to it. The results were incredible!</p>\n<p>Note: after doing some tests, I have decided that the benefits of serving differently-sized images on my website were too small to justify the extra effort of handling all these extra images. So, the only optimizations I have really applied were the optimized file formats, lazy loading and async decoding. I also chose PNG as fallback type instead of JPG because some of my images have transparency in them, which JPG does not support.</p>\n<p>The following data is taken from the home page of the website, since it has a lot of images:</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/web-images-modern-formats/results.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/web-images-modern-formats/results.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/web-images-modern-formats/results.png\" alt=\"Screenshot showing the difference in download size before and after the optimizations\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  \n</picture>\n<span class=\"wrapper svelte-1sgfl7c\">The total download size decreased by a whopping 85%!!</span> That&#39;s an incredible difference, with no noticeable difference in quality. Your results may vary, as they depend on how much of your website&#39;s size is images.\n<p>Before the changes, out of 1.6MB total, 92% of it were images, 5% were fonts, 1% was HTML, and the remaining 2% were of JS and other things like the web manifest.</p>\n<p>Now, out of 249kB, just 24% of it are images. Fonts now make up 27% of page size, and are likely the target of a future optimization post!</p>\n<h2 id=\"the-hard-part\">The Hard Part<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#the-hard-part\"><span class=\"heading-link\">#</span></a></h2>\n<p>The hardest part of this process is converting the images to all necessary formats and sizes. It is a lot of effort to do manually even for a single image, and even worse if you’re trying to optimize existing images like I was. </p>\n<h3 id=\"generating-the-images\">Generating the Images<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#generating-the-images\"><span class=\"heading-link\">#</span></a></h3>\n<p>For my needs, I have developed a NodeJS script that uses the <a href=\"https://github.com/lovell/sharp\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Sharp</a> library to do the magic for me. It accepts as parameters a source and a target folder, input file types (what files it will look for in the source folder), output file types (what types it will convert to), as well as the desired widths.</p>\n<p>The script is at the time of writing this currently usable only via command line. I have plans to turn this into a part of the build process of my website, with a <a href=\"https://github.com/features/actions\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">GitHub Action</a>, so that I don’t have to run it manually. </p>\n<p>So, to check out how to use the script, please <a href=\"https://github.com/matfantinel/image-transmutation\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">check out its GitHub page</a> for up-to-date instructions.</p>\n<h3 id=\"using-the-images\">Using the images<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#using-the-images\"><span class=\"heading-link\">#</span></a></h3>\n<p>To make this setup work, I had to do some changes on how images were used on my website.</p>\n<p>Pre-existing conditions:</p>\n<ul><li>All the images on my website were initially in a folder called “images”, with various subfolders;</li>\n<li>The images I wanted to convert were all in either PNG or JPG formats;</li></ul>\n<p>Modifications I did:</p>\n<ul><li>I have created a folder called “optimized-images”, where all the converted images are saved automatically by my script;</li>\n<li>I have created a component to centralize all image-loading logic. With Jekyll, I just had to create an HTML file in the <code>_includes</code> folder, but how you do this might vary depending on what technology you use;</li>\n<li>This component receives as parameters: the relative file path, the filename (without file extension), and the alt text;</li></ul>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">html</div>\n\t<pre class=\"language-html\"><!-- HTML_TAG_START --><code class=\"language-html\">&#123;% assign alt = include.alt %&#125;\n&#123;% assign path = include.path %&#125;\n&#123;% assign filename = include.filename %&#125;\n<span class=\"token comment\">&lt;!-- Here I build the full path to the image, minus the extension --></span>\n<span class=\"token comment\">&lt;!-- In case the process of generating the images is automated, you can check here if it's --></span>\n<span class=\"token comment\">&lt;!-- running locally or not, and swap between /images and /optimized-images accordingly --></span>\n&#123;% assign imageSrc = '/optimized-images/' | append: path | append: '/' | append: filename %&#125;\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>picture</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- And here I use that path and add the extensions inside the srcsets only --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span>\n    <span class=\"token attr-name\">srcset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#123;&#123; imageSrc &#125;&#125;.avif<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image/avif<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span>\n    <span class=\"token attr-name\">srcset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#123;&#123; imageSrc &#125;&#125;.webp<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image/webp<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#123;&#123; imageSrc &#125;&#125;.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#123;&#123; alt &#125;&#125;<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">loading</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lazy<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">decoding</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>async<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>picture</span><span class=\"token punctuation\">></span></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>And to use this component inside another page:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">liquid</div>\n\t<pre class=\"language-liquid\"><!-- HTML_TAG_START --><code class=\"language-liquid\"><span class=\"token liquid language-liquid\"><span class=\"token delimiter punctuation\">&#123;%</span> <span class=\"token keyword\">include</span> base/smart<span class=\"token operator\">-</span>image<span class=\"token punctuation\">.</span>html \n  path<span class=\"token operator\">=</span><span class=\"token string\">\"posts/my-post-url\"</span>\n  filename<span class=\"token operator\">=</span><span class=\"token string\">\"my-image\"</span>\n  alt<span class=\"token operator\">=</span><span class=\"token string\">\"A sample image\"</span>\n<span class=\"token delimiter punctuation\">%&#125;</span></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>My folder structure looks like this: </p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/web-images-modern-formats/folder-images.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/web-images-modern-formats/folder-images.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/web-images-modern-formats/folder-images.png\" alt=\"Screenshot showing the optimized files in their folder and comparing to the original one\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->Llamas are great<!-- HTML_TAG_END --></figcaption>\n</picture>\n<h2 id=\"wrapping-up\">Wrapping Up<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#wrapping-up\"><span class=\"heading-link\">#</span></a></h2>\n<p>With such amazing results, it’s hard not to recommend you to optimize the images in your website ASAP. There sure are more approaches and optimizations that can be done besides the ones presented on this article, as the web world is always changing. But optimizations are a great way of showing respect to your users (as well as gathering more of them). Your site loads more quickly, and it uses less data and resources.</p>\n<p>As front-end developers, we must acknowledge that all we write runs on someone else’s computer, the user’s. So it is important that we respect them and make sure we just use the resources we need to.</p>\n<p>I hope you enjoyed reading this! Take care and happy coding!</p>","css":{"code":".code-block.svelte-qgch0c.svelte-qgch0c{display:block;position:relative;background-color:var(--code-background-color);color:var(--code-text-color);font-family:var(--mono-font);font-size:1rem;line-height:1.33em;border-radius:8px;box-shadow:var(--card-shadow);padding:30px 15px;margin:30px 0}.code-block.svelte-qgch0c pre{overflow-x:auto;scrollbar-color:var(--primary-color) var(--scrollbar-track-color);scrollbar-width:thin;padding-bottom:5px}.code-block.svelte-qgch0c pre::-webkit-scrollbar{height:8px}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb{background:var(--primary-color)}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb:hover{background:var(--primary-light-color)}.code-block.svelte-qgch0c .lang.svelte-qgch0c{position:absolute;right:0;top:-15px;background:inherit;border-radius:8px;padding:5px 10px;z-index:2;font-size:0.85em}.code-block.svelte-qgch0c .filename.svelte-qgch0c{background:inherit;border-top-left-radius:8px;border-top-right-radius:8px;margin-bottom:-2px;padding:5px 10px;position:absolute;left:0px;top:-15px;z-index:1}\npicture.svelte-1gy5t1o.svelte-1gy5t1o{position:relative;width:100%;height:100%}picture.svelte-1gy5t1o img.svelte-1gy5t1o{width:100%;height:100%}\n.wrapper.svelte-1sgfl7c{background:var(--highlight-marker-url)}","map":null},"head":"","readingTime":"14 min read","relatedPosts":[{"slug":"css-scroll-snapping","title":"CSS Scroll Snapping - Improve Scrolling without JS","date":"2020-08-03T00:00:00.000Z","excerpt":"Learn how to snap scrolling positions with CSS only.","tags":["Front-End","CSS","Guide"],"html":"<p>CSS is evolving constantly and the past few years have brought us amazing stuff. It is getting easier to make smooth and complete experiences without having to use JavaScript at all. Case in point: Scroll Snapping.</p>\n<p>It is an easy way to guarantee that users will scroll to the correct portion of your page or of a container. Picture a landing page that is easily swipable/scrollable between sections, or swipable cards. Take in mind how Android’s Recent Apps screen works, for example:</p>\n<p><img src=\"/images/posts/css-scroll-snapping/android-scroll-snapping.gif\" alt=\"Android's Recent Apps screen has scroll mapping between app cards\"></p>\n<p>You can see that Android never allows the end of a scroll to be in a place between cards. There’s a certain threshold that determines that the scroll will snap into the nearest card and put it in the center. All that while still keeping scrolling momentum, allowing you to go from one edge of the list to another in a single scroll if you want to.</p>\n<p>Until recently, you’d have to resort to JavaScript code to make a similar behavior on the web. But now, all you need is CSS, which makes things more performant, consistent and reliable! Browser support is already pretty good, with all major browser engines already supporting it fully. Check out browser support on <a href=\"https://caniuse.com/#feat=css-snappoints\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">caniuse.com</a>.</p>\n<p>I’ve recently added scroll snapping to my own website. You can check it out on the “Work Experience” section in the <a href=\"https://fantinel.dev\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Home page</a>. It’s specially great on mobile!</p>\n<h2 id=\"how\">How?<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#how\"><span class=\"heading-link\">#</span></a></h2>\n<p>There are two main CSS properties that make the magic happen, one for the parent element, and one for its children.</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">css</div>\n\t<pre class=\"language-css\"><!-- HTML_TAG_START --><code class=\"language-css\"><span class=\"token selector\">.parent</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">scroll-snap-type</span><span class=\"token punctuation\">:</span> y mandatory<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.child</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">scroll-snap-align</span><span class=\"token punctuation\">:</span> start<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code><!-- HTML_TAG_END --></pre>\n</div>\n<h3 id=\"scroll-snap-type\">scroll-snap-type<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#scroll-snap-type\"><span class=\"heading-link\">#</span></a></h3>\n<p>This property tells the browser that the parent element uses scroll snapping. We are given some options on how snapping must work. <code>y</code> indicates that the scroll happens vertically, while <code>x</code> means horizontally. We can also pass the <code>mandatory</code> and <code>proximity</code> options. </p>\n<p>We use <code>mandatory</code> to tell that the browser <em>must</em> snap to a snap point when the user stops scrolling. This means that if the next snap point becomes visible on the screen and scrolling stops, the browser will automatically snap to the next one. In the other end, with <code>proximity</code>, things are less strict. The browser will only snap to the next snap point if scrolling gets past a certain threshold. Both values are useful, their use will depend on the situation you’re applying it to.</p>\n<iframe height=\"500\" style=\"width: 100%;\" scrolling=\"no\" title=\"scroll-snap-type: Mandatory vs Proximity\" src=\"https://codepen.io/matfantinel/embed/preview/LYNPdpE?default-tab=result&theme-id=dark\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">See the Pen <a href=\"https://codepen.io/matfantinel/pen/LYNPdpE\">scroll-snap-type: Mandatory vs Proximity</a> by Matheus Fantinel (<a href=\"https://codepen.io/matfantinel\">@matfantinel</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>\n<h3 id=\"scroll-snap-align\">scroll-snap-align<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#scroll-snap-align\"><span class=\"heading-link\">#</span></a></h3>\n<p>This is a property you add to the children that specifies where the snap points will be in the element. Which means that, whenever the browser automatically snaps the scroll to the element, it will either go to the left/top edge (<code>start</code>), center (<code>center</code>), or right/bottom edge (<code>end</code>) of the element. This property pretty much only makes a difference if the children are bigger than the parent’s display size.</p>\n<h3 id=\"scroll-padding-and-scroll-margin\">scroll-padding and scroll-margin<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#scroll-padding-and-scroll-margin\"><span class=\"heading-link\">#</span></a></h3>\n<p>To make things even better, we can use the <code>scroll-padding</code> (for parent) and <code>scroll-margin</code> (for children) properties. They add some space before/after the elements that are only considered when scrolling. The best way to implement them is by trying it out after you build your scroll snapping goodiness.</p>\n<p>You can check the documentation over on <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Scroll_Snap\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Mozilla Developer Network</a> for more info.</p>\n<h2 id=\"wrapping-up\">Wrapping Up<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#wrapping-up\"><span class=\"heading-link\">#</span></a></h2>\n<p>Scroll snapping is a sign that the web is maturing. For years we’ve been bloating websites with a lot of JavaScript for very simple visual tasks, and now CSS is slowly evolving to take some space back. It’s an important evolution because Web technologies are being used to build every kind of application, and its native feature set needs to be good enough to compete with native or native-ish counterparts like Flutter, Swift, or Kotlin.</p>\n<p>Thanks for reading!</p>","css":{"code":".code-block.svelte-qgch0c.svelte-qgch0c{display:block;position:relative;background-color:var(--code-background-color);color:var(--code-text-color);font-family:var(--mono-font);font-size:1rem;line-height:1.33em;border-radius:8px;box-shadow:var(--card-shadow);padding:30px 15px;margin:30px 0}.code-block.svelte-qgch0c pre{overflow-x:auto;scrollbar-color:var(--primary-color) var(--scrollbar-track-color);scrollbar-width:thin;padding-bottom:5px}.code-block.svelte-qgch0c pre::-webkit-scrollbar{height:8px}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb{background:var(--primary-color)}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb:hover{background:var(--primary-light-color)}.code-block.svelte-qgch0c .lang.svelte-qgch0c{position:absolute;right:0;top:-15px;background:inherit;border-radius:8px;padding:5px 10px;z-index:2;font-size:0.85em}.code-block.svelte-qgch0c .filename.svelte-qgch0c{background:inherit;border-top-left-radius:8px;border-top-right-radius:8px;margin-bottom:-2px;padding:5px 10px;position:absolute;left:0px;top:-15px;z-index:1}","map":null},"head":"","readingTime":"4 min read"},{"slug":"fixing-favicons","title":"How to fix your Favicons","date":"2021-01-06T00:00:00.000Z","excerpt":"Favicons suck. Luckily, there are ways to make them suck less.","tags":["Front-End","Guide","Favicon"],"html":"<p>Favicons kinda suck. They should be a simple icon that identifies your webpage on a bunch of scenarios, i.e. the icon displayed on the tab besides your website’s title, or the icon on the mobile browser’s bookmarks screen, or the icon on the phone’s home screen.</p>\n<p>Unfortunately, different browsers, OSs, and implementations throughout the years have ended up with many different files and meta tags, that we as developers need to handle otherwise we end up with missing or pixelated icons.</p>\n<h2 id=\"easy-mode\">Easy Mode<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#easy-mode\"><span class=\"heading-link\">#</span></a></h2>\n<p>I recently met my new best friend, <a href=\"https://realfavicongenerator.net/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Real Favicon Generator</a>. It took all these pains I just wrote about and just made it a breeze to handle. Best of all, it’s customizable!</p>\n<p>You just have to add in your existing favicon image (for best results, a SVG or high-quality PNG are recommended). From then on, the generator will display previews and allow customization of each category of favicon it will generate:</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/fixing-favicons/favicon-generator-customization.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/fixing-favicons/favicon-generator-customization.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/fixing-favicons/favicon-generator-customization.png\" alt=\"Screenshot of Real Favicon Generator&#39;s customization\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->The customization options allow you to set different icons depending on device and OS, and even generate icons with background colors if needed.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<p>At the bottom, you can even set up ways of avoiding caching issues, compression, and scaling algorithms (!). After all that, it will generate them all as set, give you a zip with all the files, and the HTML code to paste on your <code>&lt;head&gt;</code>. You can check the result on this very website (fantinel.dev). The favicon should look fantastic on every device/browser combination.</p>\n<h2 id=\"manual-mode\">Manual Mode<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#manual-mode\"><span class=\"heading-link\">#</span></a></h2>\n<p>So, there are 5 types of favicons that we need to add, if we want to support every current browser:</p>\n<h3 id=\"1-desktop-browsers\">1. Desktop browsers<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#1-desktop-browsers\"><span class=\"heading-link\">#</span></a></h3>\n<ul><li>`favicon.ico`, for IE and any other legacy browsers. Optional if you don&#39;t want to support it;</li>\n  <li>`favicon-16x16.png`, the classic one that displays on the tabs;</li>\n  <li>`favicon-32x32.png`, used on Safari for macOS.</li></ul>\n<h3 id=\"2-android-browsers\">2. Android browsers<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#2-android-browsers\"><span class=\"heading-link\">#</span></a></h3>\n<ul><li>`android-chrome-192x192.png`, shown on the tab card and when added to home screen;</li>\n  <li>`android-chrome-512x512.png`, shown on the splash screen for when the website is installed to the phone. Optional if it&#39;s not a PWA;</li></ul>\n<h3 id=\"3-ios-safari-and-some-android-browsers-like-samsung-internet\">3. iOS Safari, and some Android browsers like Samsung Internet<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#3-ios-safari-and-some-android-browsers-like-samsung-internet\"><span class=\"heading-link\">#</span></a></h3>\n<ul><li>`apple-touch-icon.png`, a 180x180 file displayed when the website is added to home screen;</li></ul>\n<h3 id=\"4-windows-810-start-menu-optional\">4. Windows 8/10 start menu (optional)<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#4-windows-810-start-menu-optional\"><span class=\"heading-link\">#</span></a></h3>\n<ul><li>`mstile-150x150.png`, only used when your website is added to the start menu as a tile on Windows 8/10, and when not declared, defaults to `apple-touch-icon.png` instead.</li></ul>\n<h3 id=\"5-macos-safari-pinned-tabs-optional\">5. macOS Safari Pinned Tabs (optional)<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#5-macos-safari-pinned-tabs-optional\"><span class=\"heading-link\">#</span></a></h3>\n<ul><li>`safari-pinned-tab.svg` is used when users pin a tab on Safari for macOS. Basically, you declare a monochrome SVG and a theme color. Safari does the rest.</li></ul>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/fixing-favicons/safari-pinned-tabs-demo.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/fixing-favicons/safari-pinned-tabs-demo.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/fixing-favicons/safari-pinned-tabs-demo.png\" alt=\"Demo of Safari pinned tabs favicon behavior\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->How Safari pinned tab favicon works, screenshot of realfavicongenerator.net<!-- HTML_TAG_END --></figcaption>\n</picture>\n<p>With those files, you should be good to go on every single browser, by adding this to your <code>&lt;head&gt;</code>:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">html</div>\n\t<pre class=\"language-html\"><!-- HTML_TAG_START --><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>apple-touch-icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">sizes</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>180x180<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/apple-touch-icon.png<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image/png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">sizes</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>32x32<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/favicon-32x32.png<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image/png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">sizes</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>16x16<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/favicon-16x16.png?<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>manifest<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/site.webmanifest<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mask-icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/safari-pinned-tab.svg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#000000<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>shortcut icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/favicon.ico<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<h2 id=\"single-svg-favicon\">Single SVG Favicon<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#single-svg-favicon\"><span class=\"heading-link\">#</span></a></h2>\n<p>Something that’s starting to become a thing is having a single SVG favicon. Theoretically, SVGs are infinitely scalable, and should look good on all sizes. Unfortunately, browser support is not there yet.</p>\n<p><a href=\"https://caniuse.com/link-icon-svg\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Can I Use</a> reports that, currently (January 2021), only recent versions of Firefox and Chromium-based browsers support this feature. This means that Safari, non-Chromium Edge, IE, and some mobile browsers do not support it. Therefore, unless you want your favicon to just not appear in those browsers, you’d still have to use other file formats as well. The downside of this approach is that all favicons would look the same, and you won’t be able to customize and have differently-shaped icons for mobile devices, for example.</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">html</div>\n\t<pre class=\"language-html\"><!-- HTML_TAG_START --><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>favicon.svg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<h2 id=\"wrapping-up\">Wrapping Up<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#wrapping-up\"><span class=\"heading-link\">#</span></a></h2>\n<p>Favicons suck. Luckily, there are people working to make it suck less. With the approach presented on this article, your website should be able to display its best favicon on all browsers for years to come.</p>","css":{"code":"picture.svelte-1gy5t1o.svelte-1gy5t1o{position:relative;width:100%;height:100%}picture.svelte-1gy5t1o img.svelte-1gy5t1o{width:100%;height:100%}\n.code-block.svelte-qgch0c.svelte-qgch0c{display:block;position:relative;background-color:var(--code-background-color);color:var(--code-text-color);font-family:var(--mono-font);font-size:1rem;line-height:1.33em;border-radius:8px;box-shadow:var(--card-shadow);padding:30px 15px;margin:30px 0}.code-block.svelte-qgch0c pre{overflow-x:auto;scrollbar-color:var(--primary-color) var(--scrollbar-track-color);scrollbar-width:thin;padding-bottom:5px}.code-block.svelte-qgch0c pre::-webkit-scrollbar{height:8px}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb{background:var(--primary-color)}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb:hover{background:var(--primary-light-color)}.code-block.svelte-qgch0c .lang.svelte-qgch0c{position:absolute;right:0;top:-15px;background:inherit;border-radius:8px;padding:5px 10px;z-index:2;font-size:0.85em}.code-block.svelte-qgch0c .filename.svelte-qgch0c{background:inherit;border-top-left-radius:8px;border-top-right-radius:8px;margin-bottom:-2px;padding:5px 10px;position:absolute;left:0px;top:-15px;z-index:1}","map":null},"head":"","readingTime":"6 min read"},{"slug":"web-workers","title":"Web Workers - Bringing Multithreading to the Front-End","date":"2019-08-14T00:00:00.000Z","excerpt":"Improve your client-side performance by breaking heavy operations into multiple threads - backend style.","tags":["Front-End","Guide","JavaScript"],"html":"<p>In times of complex, feature-filled front-ends, we often get reports of freezes, frame drops, or overall slugginess in our apps. This is due to JavaScript’s default behavior - a single thread is responsible for the interface, animations, and whatever CPU-intensive logic or I/O your app is doing.</p>\n<p>This is because when JavaScript was created, back in 1995, it was never meant to be such a capable language, powering complex systems and heavy loads.</p>\n<p>Usually, the best idea is to perform CPU-intensive work on the back-end, usually with a more performant language. This makes the experience similar to everyone, as it won’t require much power from the user’s machine. However, there are cases where we need to do this on the front-end, such as (but not limited to):</p>\n<ul><li>Heavy filtering of data;</li>\n<li>Conversions (like printing data to a PDF);</li>\n<li>Deserializing huge and complex objects or arrays;</li>\n<li>Complex calculations, like 3D objects for example.</li></ul>\n<p>All of these heavy operations would cause the main thread - responsible for drawing your interface quickly and playing your animations smoothly - to not be that smooth.</p>\n<p>This is where our star of the day comes in - Web Workers.</p>\n<h2 id=\"what-do-these-web-workers-do\">What do these Web Workers do?<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#what-do-these-web-workers-do\"><span class=\"heading-link\">#</span></a></h2>\n<p>Imagine you are the boss (main thread). You call one of your employees (a worker) and tell them to do a specific task (a function). Then they go back to their own room (another thread) to do what you asked. In the meantime, you can do whatever you want, and as soon as your employee finishes the task, it comes back to you with the result. Now, in real life things aren’t that simple, but you get the main idea, right? </p>\n<p>Let’s make something clear: Web Workers are an universal JavaScript feature, not limited to any specific framework. <a href=\"https://caniuse.com/#search=Worker\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">It even works on IE10+</a>!!! Pretty much the only requirement is that the worker logic stays in a different js file (worker.js, for example).</p>\n<h2 id=\"lets-try-it-out\">Let’s try it out<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#lets-try-it-out\"><span class=\"heading-link\">#</span></a></h2>\n<p><a href=\"https://github.com/mdn/simple-web-worker\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Mozilla Developer Network (MDN)</a> has a great, simple example of how to use them. I’ll explain it below:</p>\n<p>First of all, on our main.js file, we need to create our Worker object, passing our Worker file as a parameter:</p>\n<div class=\"code-block svelte-qgch0c\"><div class=\"filename svelte-qgch0c\">main.js</div>\n\t<div class=\"lang svelte-qgch0c\">javascript</div>\n\t<pre class=\"language-javascript\"><!-- HTML_TAG_START --><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>Worker<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//just to make sure our browser supports it</span>\n\t<span class=\"token keyword\">const</span> myWorker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"worker.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>The main thread is able to communicate with workers using the <code>postMessage</code> and <code>onMessage</code> functions.</p>\n<p>Let’s make our worker multiply two numbers for us!</p>\n<div class=\"code-block svelte-qgch0c\"><div class=\"filename svelte-qgch0c\">main.js</div>\n\t<div class=\"lang svelte-qgch0c\">javascript</div>\n\t<pre class=\"language-javascript\"><!-- HTML_TAG_START --><code class=\"language-javascript\"><span class=\"token comment\">// we pass an array with all the parameters we want</span>\nmyWorker<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token number\">456</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>And then listen to a message sent back from our worker:</p>\n<div class=\"code-block svelte-qgch0c\"><div class=\"filename svelte-qgch0c\">main.js</div>\n\t<div class=\"lang svelte-qgch0c\">javascript</div>\n\t<pre class=\"language-javascript\"><!-- HTML_TAG_START --><code class=\"language-javascript\">myWorker<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    result<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>We are now successfully passing and receiving data to/from our worker. Now, for the worker.js file:</p>\n<div class=\"code-block svelte-qgch0c\"><div class=\"filename svelte-qgch0c\">worker.js</div>\n\t<div class=\"lang svelte-qgch0c\">javascript</div>\n\t<pre class=\"language-javascript\"><!-- HTML_TAG_START --><code class=\"language-javascript\"><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>Very simple, right? The multiplication was done in a different thread, and therefore did not interfere with our main thread. Keep in mind though, that <strong>setting up a Worker, starting another thread and passing parameters still take up minor resources from the main thread</strong>. For simple examples like this, performance will likely be worse than before. <strong>Web Workers are made for heavy tasks, so don’t just use them everywhere</strong>.</p>\n<h2 id=\"just-a-last-little-thing\">Just a last little thing…<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#just-a-last-little-thing\"><span class=\"heading-link\">#</span></a></h2>\n<p>When trying it out locally, you may find that your code… does not work. Neither Chrome nor Firefox allow running worker files from a local file system. This means that you have to be running your website in some sort of HTTP server in order for it to work.</p>\n<p>If you have Python installed (most Linux or MacOS systems already do), just run: <code>python -m SimpleHTTPServer 8000</code> and you’re good to go. You can access your files through localhost:8000.</p>\n<p>If you don’t, you can also use <a href=\"https://chrome.google.com/webstore/detail/web-server-for-chrome/ofhbbkphhbklhfoeikjpcbhemlocgigb\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">this Chrome extension</a> or any other method you prefer.</p>\n<p>Thanks for reading!</p>","css":{"code":".code-block.svelte-qgch0c.svelte-qgch0c{display:block;position:relative;background-color:var(--code-background-color);color:var(--code-text-color);font-family:var(--mono-font);font-size:1rem;line-height:1.33em;border-radius:8px;box-shadow:var(--card-shadow);padding:30px 15px;margin:30px 0}.code-block.svelte-qgch0c pre{overflow-x:auto;scrollbar-color:var(--primary-color) var(--scrollbar-track-color);scrollbar-width:thin;padding-bottom:5px}.code-block.svelte-qgch0c pre::-webkit-scrollbar{height:8px}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb{background:var(--primary-color)}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb:hover{background:var(--primary-light-color)}.code-block.svelte-qgch0c .lang.svelte-qgch0c{position:absolute;right:0;top:-15px;background:inherit;border-radius:8px;padding:5px 10px;z-index:2;font-size:0.85em}.code-block.svelte-qgch0c .filename.svelte-qgch0c{background:inherit;border-top-left-radius:8px;border-top-right-radius:8px;margin-bottom:-2px;padding:5px 10px;position:absolute;left:0px;top:-15px;z-index:1}","map":null},"head":"","readingTime":"5 min read"}]}]
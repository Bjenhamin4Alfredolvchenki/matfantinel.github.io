[{"slug":"web-images-modern-formats","title":"Smarter, Lighter, Better Images: A Guide to Optimization","date":"2021-01-30T00:00:00.000Z","excerpt":"Learn how to reduce page loading times and bounce rate.","tags":["Front-End","Guide","HTML","CSS","Optimization"],"html":"<p>Do you know how big the images displayed on your website are? When you open a page, the browser starts downloading a bunch of files in order to display it. Research shows that <a href=\"https://httparchive.org/reports/state-of-images\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">images are the most requested asset type</a> and take up more bandwidth than any other resource. So, making sure they are as small as they can be can greatly improve the load times for your website. (spoiler alert: mine’s become 85% faster!)</p>\n<h2>More efficient formats</h2>\n<p>For a long time, JPGs and PNGs have been our standard image formats. However, they are not optimized for the web - their quality is often unnecessarily high and the download size is too big. Over time, many new formats have appeared, but two of them have become quite notable: <a href=\"https://en.wikipedia.org/wiki/WebP\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">WebP</a> and <a href=\"https://www.lambdatest.com/blog/avif-image-format/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">AVIF</a>.</p>\n<p>WebP has been introduced in 2010, and has slowly gained adoption since then. Since 2020, <a href=\"https://caniuse.com/webp\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">WebP is now supported in all modern browsers</a>. AVIF <a href=\"https://jakearchibald.com/2020/avif-has-landed/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">was launched in 2020</a>, and its adoption has been faster. As of January 2021 it is supported by all Chromium-based browsers, and Firefox will start supporting it on version 86, scheduled to release before March.</p>\n<p><em>But how do we use those shiny new formats if not all browsers support them?</em></p>\n<p>With the HTML <code>&lt;picture&gt;</code> element, we can make the browsers do the work for us. We can declare multiple sources for the same image, and the browser will try to load them in order. If they do not support a format, they will immediatelly jump to the next one.</p>\n<p>So, what we want to do is declare those different sources in the following order:</p>\n<p>AVIF -&gt; WebP -&gt; JPG (or PNG)</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">html</div>\n\t<pre class=\"language-html\"><!-- HTML_TAG_START --><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>picture</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token comment\">&lt;!-- If this type(avif) is supported, use this src --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span>\n    <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image/avif<span class=\"token punctuation\">\"</span></span> \n    <span class=\"token attr-name\">srcset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>my-image.avif<span class=\"token punctuation\">\"</span></span> \n  <span class=\"token punctuation\">/></span></span>\n  <span class=\"token comment\">&lt;!-- Else, if this type(webp) is supported, use this src instead --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span>\n    <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image/webp<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">srcset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>my-image.webp<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token punctuation\">/></span></span>\n  <span class=\"token comment\">&lt;!-- Else, fall back to jpg --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> \n    <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>my-image.jpg<span class=\"token punctuation\">\"</span></span> \n    <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>A test image<span class=\"token punctuation\">\"</span></span> \n    <span class=\"token attr-name\">loading</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lazy<span class=\"token punctuation\">\"</span></span> \n    <span class=\"token attr-name\">decoding</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>async<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>picture</span><span class=\"token punctuation\">></span></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>If you look at the resulting HTML in your website, you can see that the <code>&lt;img&gt;</code> element has a <code>src</code> defined, but when you hover over it, it shows what is the actual file that’s being loaded. If you’re on a supported browser, it will have loaded the AVIF file. If you’re on Safari, it will have loaded the WebP one. Otherwise, if you’re using IE or something (I’m sorry), the original JPG or PNG file will be loaded.</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/web-images-modern-formats/generated-html.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/web-images-modern-formats/generated-html.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/web-images-modern-formats/generated-html.png\" alt=\"Screenshot of the generated HTML code\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->The img tag shows the PNG file as source, but hovering the mouse over it reveals that the AVIF file is the one that actually loaded.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<h2>Load smaller images</h2>\n<p>You can optimize even further than that. See, in my example, I am loading an image with a width of 1200px, however, the size it’s being displayed is only 319px wide. The <code>srcset</code> property supports different widths to load, depending on the screen size.</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">html</div>\n\t<pre class=\"language-html\"><!-- HTML_TAG_START --><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>picture</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token comment\">&lt;!-- Here, we declare the widths our different files have: 380px, 640px and 960px --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span>\n    <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image/avif<span class=\"token punctuation\">\"</span></span> \n    <span class=\"token attr-name\">srcset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>\n      my-image-380w.avif 380w,\n      my-image-640w.avif 640w,\n      my-image-960w.avif 960w\n    <span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">sizes</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>(max-width: 979px) 100vw, 640px<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> \n    <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>my-image.jpg<span class=\"token punctuation\">\"</span></span> \n    <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>A test image<span class=\"token punctuation\">\"</span></span> \n    <span class=\"token attr-name\">loading</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lazy<span class=\"token punctuation\">\"</span></span> \n    <span class=\"token attr-name\">decoding</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>async<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>picture</span><span class=\"token punctuation\">></span></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>The <code>srcset</code> property is smart. As the name implies, it is a set of sources, not just a single one. When we declare multiple file paths and add a width unit besides it, the browser looks at this data and tries to display the smallest possible image.</p>\n<p>On the code snippet above, the browser will follow this: <span class=\"wrapper svelte-1sgfl7c\">If the size of the displayed image (on the page) is smaller or equal to 380px, it will load the file with 380px of width. Otherwise, it will try to load the next declared path (640px).</span></p>\n<p><strong>However,</strong> not all parts of this process are smarty. The browser cannot know what is the final size of the image on the page before it actually loads it. Which is why the <code>sizes</code> property exists. Let’s see how it works:</p>\n<p>The <code>sizes</code> property defines what rule the browser will use to get the width it uses to choose the correct file in <code>srcset</code>. The default value is <code>100vw</code>. That means that, to check what width the image will have, the browser just gets the width of the browser window. If we know the exact size the image will have on load, we can declare it here, or if we don’t know the exact size, we can estimate. We can use media queries to help us specify the sizes better as well.</p>\n<p>Check out the value on the example: <code>(max-width: 979px) 100vw, 640px</code>. What that code does is: if the width of the viewport is equal or smaller than 979px, use 100vw. Else, use 640px.</p>\n<p>It is easier to understand if we visualize it like this:</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/web-images-modern-formats/sizes.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/web-images-modern-formats/sizes.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/web-images-modern-formats/sizes.png\" alt=\"Screenshots picturing how the sizes property affects the image loading on both mobile and desktop\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->On mobile, the image width is almost the same as the viewport, so it's okay to use 100vw. On desktop, we usually limit the image width, so 640px was the sweet spot in this particular case.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<p>Of course, different websites have different needs and situations. Make sure to adapt the code to your specific need. </p>\n<p>It’s also worth noting that most phones use a HiDPI mode. This means that <span class=\"wrapper svelte-1sgfl7c\">even though the reported width for the phone above is 375px, the browser will likely use a higher resolution to load the images</span> (usually 2x), in order to serve a higher quality image.</p>\n<h2>Lazy Loading and Async Decoding</h2>\n<p>You might have noticed the <code>loading=&quot;lazy&quot;</code> and <code>decoding=&quot;async&quot;</code> attributes in the code above. Those are relatively new options that are part of an ongoing effort to make the web faster.</p>\n<p><code>decoding=&quot;async&quot;</code> tells your browser it can try to parallelize loading your image. When your page is loading, it tries to decode both text and images at the same time. On lower-end devices though, decoding heavy images can take a while, and this might block the rendering of the rest of the content. With this option, the browser will try to proceed rendering the rest of the content and render the image later. This can be a great improvement to perceived performance.</p>\n<p><code>loading=&quot;lazy&quot;</code> is probably the most important of the two. It is an easy way of telling the browser to <span class=\"wrapper svelte-1sgfl7c\">only load the images when they get close to appearing in the viewport</span>. There is a threshold that is defined by the browser that controls how close it needs to be before it gets loaded, so you don’t have to worry about them not showing up if the user scrolls fast. <span class=\"wrapper svelte-1sgfl7c\">This ensures that the initial load of the website is as lean as it can get, improving perceived performance and also saving you some money on server requests.</span></p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/web-images-modern-formats/first-load-requests.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/web-images-modern-formats/first-load-requests.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/web-images-modern-formats/first-load-requests.png\" alt=\"Screenshot of the image requests made on first load of my website\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->When the website is initially loaded, it only downloads what's needed: my avatar image and the preview of the first blog post, that will show up after scrolling a bit.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/web-images-modern-formats/after-scrolling-requests.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/web-images-modern-formats/after-scrolling-requests.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/web-images-modern-formats/after-scrolling-requests.png\" alt=\"Screenshot of the image requests made after scrolling a bit\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->When I scroll down the page, the images are downloaded as they're close to appearing.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<h2>Results In Practice</h2>\n<p>Since I like using my own website and blog as a testbed for new stuff that I learn, I have applied these optimizations to it. The results were incredible!</p>\n<p>Note: after doing some tests, I have decided that the benefits of serving differently-sized images on my website were too small to justify the extra effort of handling all these extra images. So, the only optimizations I have really applied were the optimized file formats, lazy loading and async decoding. I also chose PNG as fallback type instead of JPG because some of my images have transparency in them, which JPG does not support.</p>\n<p>The following data is taken from the home page of the website, since it has a lot of images:</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/web-images-modern-formats/results.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/web-images-modern-formats/results.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/web-images-modern-formats/results.png\" alt=\"Screenshot showing the difference in download size before and after the optimizations\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  \n</picture>\n<span class=\"wrapper svelte-1sgfl7c\">The total download size decreased by a whopping 85%!!</span> That&#39;s an incredible difference, with no noticeable difference in quality. Your results may vary, as they depend on how much of your website&#39;s size is images.\n<p>Before the changes, out of 1.6MB total, 92% of it were images, 5% were fonts, 1% was HTML, and the remaining 2% were of JS and other things like the web manifest.</p>\n<p>Now, out of 249kB, just 24% of it are images. Fonts now make up 27% of page size, and are likely the target of a future optimization post!</p>\n<h2>The Hard Part</h2>\n<p>The hardest part of this process is converting the images to all necessary formats and sizes. It is a lot of effort to do manually even for a single image, and even worse if you’re trying to optimize existing images like I was. </p>\n<h3>Generating the Images</h3>\n<p>For my needs, I have developed a NodeJS script that uses the <a href=\"https://github.com/lovell/sharp\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Sharp</a> library to do the magic for me. It accepts as parameters a source and a target folder, input file types (what files it will look for in the source folder), output file types (what types it will convert to), as well as the desired widths.</p>\n<p>The script is at the time of writing this currently usable only via command line. I have plans to turn this into a part of the build process of my website, with a <a href=\"https://github.com/features/actions\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">GitHub Action</a>, so that I don’t have to run it manually. </p>\n<p>So, to check out how to use the script, please <a href=\"https://github.com/matfantinel/image-transmutation\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">check out its GitHub page</a> for up-to-date instructions.</p>\n<h3>Using the images</h3>\n<p>To make this setup work, I had to do some changes on how images were used on my website.</p>\n<p>Pre-existing conditions:</p>\n<ul><li>All the images on my website were initially in a folder called “images”, with various subfolders;</li>\n<li>The images I wanted to convert were all in either PNG or JPG formats;</li></ul>\n<p>Modifications I did:</p>\n<ul><li>I have created a folder called “optimized-images”, where all the converted images are saved automatically by my script;</li>\n<li>I have created a component to centralize all image-loading logic. With Jekyll, I just had to create an HTML file in the <code>_includes</code> folder, but how you do this might vary depending on what technology you use;</li>\n<li>This component receives as parameters: the relative file path, the filename (without file extension), and the alt text;</li></ul>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">html</div>\n\t<pre class=\"language-html\"><!-- HTML_TAG_START --><code class=\"language-html\">&#123;% assign alt = include.alt %&#125;\n&#123;% assign path = include.path %&#125;\n&#123;% assign filename = include.filename %&#125;\n<span class=\"token comment\">&lt;!-- Here I build the full path to the image, minus the extension --></span>\n<span class=\"token comment\">&lt;!-- In case the process of generating the images is automated, you can check here if it's --></span>\n<span class=\"token comment\">&lt;!-- running locally or not, and swap between /images and /optimized-images accordingly --></span>\n&#123;% assign imageSrc = '/optimized-images/' | append: path | append: '/' | append: filename %&#125;\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>picture</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- And here I use that path and add the extensions inside the srcsets only --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span>\n    <span class=\"token attr-name\">srcset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#123;&#123; imageSrc &#125;&#125;.avif<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image/avif<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span>\n    <span class=\"token attr-name\">srcset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#123;&#123; imageSrc &#125;&#125;.webp<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image/webp<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#123;&#123; imageSrc &#125;&#125;.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#123;&#123; alt &#125;&#125;<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">loading</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lazy<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">decoding</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>async<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>picture</span><span class=\"token punctuation\">></span></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>And to use this component inside another page:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">liquid</div>\n\t<pre class=\"language-liquid\"><!-- HTML_TAG_START --><code class=\"language-liquid\"><span class=\"token liquid language-liquid\"><span class=\"token delimiter punctuation\">&#123;%</span> <span class=\"token keyword\">include</span> base/smart<span class=\"token operator\">-</span>image<span class=\"token punctuation\">.</span>html \n  path<span class=\"token operator\">=</span><span class=\"token string\">\"posts/my-post-url\"</span>\n  filename<span class=\"token operator\">=</span><span class=\"token string\">\"my-image\"</span>\n  alt<span class=\"token operator\">=</span><span class=\"token string\">\"A sample image\"</span>\n<span class=\"token delimiter punctuation\">%&#125;</span></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>My folder structure looks like this: </p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/web-images-modern-formats/folder-images.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/web-images-modern-formats/folder-images.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/web-images-modern-formats/folder-images.png\" alt=\"Screenshot showing the optimized files in their folder and comparing to the original one\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->Llamas are great<!-- HTML_TAG_END --></figcaption>\n</picture>\n<h2>Wrapping Up</h2>\n<p>With such amazing results, it’s hard not to recommend you to optimize the images in your website ASAP. There sure are more approaches and optimizations that can be done besides the ones presented on this article, as the web world is always changing. But optimizations are a great way of showing respect to your users (as well as gathering more of them). Your site loads more quickly, and it uses less data and resources.</p>\n<p>As front-end developers, we must acknowledge that all we write runs on someone else’s computer, the user’s. So it is important that we respect them and make sure we just use the resources we need to.</p>\n<p>I hope you enjoyed reading this! Take care and happy coding!</p>","css":{"code":".code-block.svelte-qgch0c.svelte-qgch0c{display:block;position:relative;background-color:var(--code-background-color);color:var(--code-text-color);font-family:var(--mono-font);font-size:1rem;line-height:1.33em;border-radius:8px;box-shadow:var(--card-shadow);padding:30px 15px;margin:30px 0}.code-block.svelte-qgch0c pre{overflow-x:auto;scrollbar-color:var(--primary-color) var(--scrollbar-track-color);scrollbar-width:thin;padding-bottom:5px}.code-block.svelte-qgch0c pre::-webkit-scrollbar{height:8px}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb{background:var(--primary-color)}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb:hover{background:var(--primary-light-color)}.code-block.svelte-qgch0c .lang.svelte-qgch0c{position:absolute;right:0;top:-15px;background:inherit;border-radius:8px;padding:5px 10px;z-index:2;font-size:0.85em}.code-block.svelte-qgch0c .filename.svelte-qgch0c{background:inherit;border-top-left-radius:8px;border-top-right-radius:8px;margin-bottom:-2px;padding:5px 10px;position:absolute;left:0px;top:-15px;z-index:1}\npicture.svelte-1gy5t1o.svelte-1gy5t1o{position:relative;width:100%;height:100%}picture.svelte-1gy5t1o img.svelte-1gy5t1o{width:100%;height:100%}\n.wrapper.svelte-1sgfl7c{background:var(--highlight-marker-url)}","map":null},"head":"","readingTime":"14 min read","relatedPosts":[{"slug":"css-scroll-snapping","title":"CSS Scroll Snapping - Improve Scrolling without JS","date":"2020-08-03T00:00:00.000Z","excerpt":"Learn how to snap scrolling positions with CSS only.","tags":["Front-End","CSS","Guide"],"html":"<p>CSS is evolving constantly and the past few years have brought us amazing stuff. It is getting easier to make smooth and complete experiences without having to use JavaScript at all. Case in point: Scroll Snapping.</p>\n<p>It is an easy way to guarantee that users will scroll to the correct portion of your page or of a container. Picture a landing page that is easily swipable/scrollable between sections, or swipable cards. Take in mind how Android’s Recent Apps screen works, for example:</p>\n<p><img src=\"/images/posts/css-scroll-snapping/android-scroll-snapping.gif\" alt=\"Android's Recent Apps screen has scroll mapping between app cards\"></p>\n<p>You can see that Android never allows the end of a scroll to be in a place between cards. There’s a certain threshold that determines that the scroll will snap into the nearest card and put it in the center. All that while still keeping scrolling momentum, allowing you to go from one edge of the list to another in a single scroll if you want to.</p>\n<p>Until recently, you’d have to resort to JavaScript code to make a similar behavior on the web. But now, all you need is CSS, which makes things more performant, consistent and reliable! Browser support is already pretty good, with all major browser engines already supporting it fully. Check out browser support on <a href=\"https://caniuse.com/#feat=css-snappoints\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">caniuse.com</a>.</p>\n<p>I’ve recently added scroll snapping to my own website. You can check it out on the “Work Experience” section in the <a href=\"https://fantinel.dev\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Home page</a>. It’s specially great on mobile!</p>\n<h2>How?</h2>\n<p>There are two main CSS properties that make the magic happen, one for the parent element, and one for its children.</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">css</div>\n\t<pre class=\"language-css\"><!-- HTML_TAG_START --><code class=\"language-css\"><span class=\"token selector\">.parent</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">scroll-snap-type</span><span class=\"token punctuation\">:</span> y mandatory<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.child</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">scroll-snap-align</span><span class=\"token punctuation\">:</span> start<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code><!-- HTML_TAG_END --></pre>\n</div>\n<h3>scroll-snap-type</h3>\n<p>This property tells the browser that the parent element uses scroll snapping. We are given some options on how snapping must work. <code>y</code> indicates that the scroll happens vertically, while <code>x</code> means horizontally. We can also pass the <code>mandatory</code> and <code>proximity</code> options. </p>\n<p>We use <code>mandatory</code> to tell that the browser <em>must</em> snap to a snap point when the user stops scrolling. This means that if the next snap point becomes visible on the screen and scrolling stops, the browser will automatically snap to the next one. In the other end, with <code>proximity</code>, things are less strict. The browser will only snap to the next snap point if scrolling gets past a certain threshold. Both values are useful, their use will depend on the situation you’re applying it to.</p>\n<iframe height=\"500\" style=\"width: 100%;\" scrolling=\"no\" title=\"scroll-snap-type: Mandatory vs Proximity\" src=\"https://codepen.io/matfantinel/embed/preview/LYNPdpE?default-tab=result&theme-id=dark\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">See the Pen <a href=\"https://codepen.io/matfantinel/pen/LYNPdpE\">scroll-snap-type: Mandatory vs Proximity</a> by Matheus Fantinel (<a href=\"https://codepen.io/matfantinel\">@matfantinel</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>\n<h3>scroll-snap-align</h3>\n<p>This is a property you add to the children that specifies where the snap points will be in the element. Which means that, whenever the browser automatically snaps the scroll to the element, it will either go to the left/top edge (<code>start</code>), center (<code>center</code>), or right/bottom edge (<code>end</code>) of the element. This property pretty much only makes a difference if the children are bigger than the parent’s display size.</p>\n<h3>scroll-padding and scroll-margin</h3>\n<p>To make things even better, we can use the <code>scroll-padding</code> (for parent) and <code>scroll-margin</code> (for children) properties. They add some space before/after the elements that are only considered when scrolling. The best way to implement them is by trying it out after you build your scroll snapping goodiness.</p>\n<p>You can check the documentation over on <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Scroll_Snap\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Mozilla Developer Network</a> for more info.</p>\n<h2>Wrapping Up</h2>\n<p>Scroll snapping is a sign that the web is maturing. For years we’ve been bloating websites with a lot of JavaScript for very simple visual tasks, and now CSS is slowly evolving to take some space back. It’s an important evolution because Web technologies are being used to build every kind of application, and its native feature set needs to be good enough to compete with native or native-ish counterparts like Flutter, Swift, or Kotlin.</p>\n<p>Thanks for reading!</p>","css":{"code":".code-block.svelte-qgch0c.svelte-qgch0c{display:block;position:relative;background-color:var(--code-background-color);color:var(--code-text-color);font-family:var(--mono-font);font-size:1rem;line-height:1.33em;border-radius:8px;box-shadow:var(--card-shadow);padding:30px 15px;margin:30px 0}.code-block.svelte-qgch0c pre{overflow-x:auto;scrollbar-color:var(--primary-color) var(--scrollbar-track-color);scrollbar-width:thin;padding-bottom:5px}.code-block.svelte-qgch0c pre::-webkit-scrollbar{height:8px}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb{background:var(--primary-color)}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb:hover{background:var(--primary-light-color)}.code-block.svelte-qgch0c .lang.svelte-qgch0c{position:absolute;right:0;top:-15px;background:inherit;border-radius:8px;padding:5px 10px;z-index:2;font-size:0.85em}.code-block.svelte-qgch0c .filename.svelte-qgch0c{background:inherit;border-top-left-radius:8px;border-top-right-radius:8px;margin-bottom:-2px;padding:5px 10px;position:absolute;left:0px;top:-15px;z-index:1}","map":null},"head":""},{"slug":"angular-pwa-how-to","title":"How to transform your Angular 6+ app into a PWA","date":"2019-03-10T00:00:00.000Z","excerpt":"Make your Angular app work like a native app on phones and desktop.","tags":["Angular","PWA","Guide","Front-End","JavaScript"],"html":"<p>Recently, I’ve converted my Angular 6 app into a PWA, allowing it to work offline and work like a native app on phones and desktop.</p>\n<p>Although there are many tutorials out there about turning Angular apps into PWAs, I’ve decided to write one simply because I faced some issues that were a bit hard to solve, so if you end up having them you don’t lose as much time as I did!</p>\n<div class=\"callout-block info svelte-1pi2pyj\"><div class=\"icon-wrapper svelte-1pi2pyj\"><svg width=\"100%\" height=\"100%\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M12 11.5V16.5\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path><path d=\"M12 7.51L12.01 7.49889\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path><path d=\"M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path></svg></div>\n\tThis tutorial assumes you are using Angular CLI. Possible issues are listed at the end of the tutorial.\n\n</div>\n<h2>Step 1. Installing the Angular PWA dependencies</h2>\n<p>This is the easiest part. Run <code>ng add @angular/pwa</code> in the root of your project (the folder where <code>package.json</code> is. The CLI will automagically add <code>@angular/pwa</code> and <code>@angular/service-worker</code> as dependencies in your package.json file, and add some placeholder icons in your <code>assets</code> folder.</p>\n<p>Besides that, it will create a file named <code>ngsw-config.json</code> in your root folder, as well as a <code>manifest.json</code> in your /src folder, and reference both in <code>index.html</code> and <code>app.module.ts</code>. These files are important as you’ll be using them to configure your PWA later.</p>\n<h2>Step 2. Setting up your manifest.json</h2>\n<p>The <code>manifest.json</code> file is the one that tells the browser/OS about your app. You can set the full and short names, theme color, icons, and more. <a href=\"https://developers.google.com/web/fundamentals/web-app-manifest/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">You can find more about its settings here.</a></p>\n<p>Don’t forget to update the auto-generated icons on <code>/assets/icons</code> folder! These are necessary so that your app icon shows up for devices of all DPI settings.</p>\n<h2>Step 3. Setting up ngsw-config.json</h2>\n<p>This file is the one that can configure how your PWA works. You can set up different installation behaviors, as well as handle cache updates. <a href=\"https://angular.io/guide/service-worker-config\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">The Angular documentation has got all options covered here.</a></p>\n<h2>Step 4. Test it out!</h2>\n<p>If you want to test out your app’s new PWA capabilities locally, <code>ng serve</code> won’t help you. Instead, you can run a web server in your machine easily by installing the <code>http-server</code> package from npm:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">shell</div>\n\t<pre class=\"language-shell\"><!-- HTML_TAG_START --><code class=\"language-shell\"><span class=\"token function\">npm</span> i http-server -g</code><!-- HTML_TAG_END --></pre>\n</div>\n<p>Then, compile your app in production mode:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">shell</div>\n\t<pre class=\"language-shell\"><!-- HTML_TAG_START --><code class=\"language-shell\">ng build --prod</code><!-- HTML_TAG_END --></pre>\n</div>\n<p>And finally, start the web server:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">shell</div>\n\t<pre class=\"language-shell\"><!-- HTML_TAG_START --><code class=\"language-shell\">http-server -p <span class=\"token number\">8080</span> -c-1 dist/<span class=\"token operator\">&lt;</span>project-name<span class=\"token operator\">></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>Your app should be up and running on <code>http://localhost:8080/</code> (or whichever port you chose). How do you know it’s a PWA? There are a few ways:</p>\n<h3>Check if the service worker is being registered</h3>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/angular-pwa-how-to/Service-Workers-1.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/angular-pwa-how-to/Service-Workers-1.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/angular-pwa-how-to/Service-Workers-1.png\" alt=\"Registered Service Worker\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->On dev console > Application > Service Workers, there should be a registered service worker for your app.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<h3>Use Chrome’s Audits feature to validate it as a PWA</h3>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/angular-pwa-how-to/Audits.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/angular-pwa-how-to/Audits.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/angular-pwa-how-to/Audits.png\" alt=\"Audits\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->On dev console > Audits, test it for Progressive Web Apps.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/angular-pwa-how-to/Passed-Audits.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/angular-pwa-how-to/Passed-Audits.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/angular-pwa-how-to/Passed-Audits.png\" alt=\"Audits passed\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->If everything went alright, you should see the highlighted results on the 'Passed audits' section.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<p>You may see some errors regarding the app not running over HTTPS. Don’t worry, that’s only because it’s running locally.</p>\n<h2>Step 5. Install it!</h2>\n<p>On Chrome, you may also see the option to install the app appear in the URL bar:</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/angular-pwa-how-to/Clipboard_2019-10-27-18-09-45.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/angular-pwa-how-to/Clipboard_2019-10-27-18-09-45.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/angular-pwa-how-to/Clipboard_2019-10-27-18-09-45.png\" alt=\"Chrome prompts you to install PWA\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  \n</picture>\n<p>After this, the app should already open on a separate window, and show up on your OS’s installed apps list!</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/angular-pwa-how-to/Clipboard_2019-10-27-18-11-28.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/angular-pwa-how-to/Clipboard_2019-10-27-18-11-28.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/angular-pwa-how-to/Clipboard_2019-10-27-18-11-28.png\" alt=\"Installed PWA on OS&#39; dock\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->Notice the PWA's own icon on my OS' dock! Success!<!-- HTML_TAG_END --></figcaption>\n</picture>\n<h2>Issues Encountered</h2>\n<p>Even though the proccess is quite straight-forward, I still faced some issues when running it in my app. They were because of Angular tools versions, and I probably had these issues because I’m still running an Angular 6 app (and Angular 7 is out as of now).</p>\n<h3>The <code>ng add @angular/pwa</code> command doesn’t create relevant files</h3>\n<p>This was a <a href=\"https://github.com/angular/angular-cli/issues/11914\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">reported bug</a> on the CLI. I had a bugged version (6.0.8) installed on my app. I updated it by running</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">shell</div>\n\t<pre class=\"language-shell\"><!-- HTML_TAG_START --><code class=\"language-shell\"><span class=\"token function\">npm</span> uninstall @angular/cli --save\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> @angular/cli@latest --save</code><!-- HTML_TAG_END --></pre>\n</div>\n<p>It updated itself to version 7.1.4 and worked flawlessly.</p>\n<p><em>Notice: this is related to the local cli version, the one displayed on your <code>package.json</code> file, not the global one installed in your machine.</em></p>\n<h3>Failed to register a ServiceWorker: A bad HTTP response code (404) was received when fetching the script.</h3>\n<p>This error shows up on the browser console after opening the app running on http-server. It happens because, when running <code>ng build --prod</code>, Angular isn’t sending the service worker’s files along with the ones from the app. You can confirm this by searching for the <code>ngsw-worker.js</code> file on the <code>/dist</code> folder of your app. If it’s not there, then you have this issue.</p>\n<p>This one took me the longest to find out. Another bug related to outdated versions of Angular tools. Simply changing <code>@angular-devkit/build-angular</code> version in devDependencies to <code>~0.10.0</code> solved it.</p>\n<h2>Finalizing</h2>\n<p>I hope you had success on setting up your PWA! Remember that, when published, it will only work if you serve your app through HTTPS.</p>\n<p>Thanks for reading!</p>","css":{"code":".callout-block.svelte-1pi2pyj.svelte-1pi2pyj{--bg-color:var(--callout-background-color);--accent-color:transparent;margin:40px 0 30px;padding:25px 25px;border-top-right-radius:10px;border-bottom-right-radius:10px;background:var(--bg-color);color:var(--text-color);border-left:4px solid var(--accent-color);position:relative}.callout-block.svelte-1pi2pyj .icon-wrapper.svelte-1pi2pyj{position:absolute;width:50px;height:50px;top:0;left:0;transform:translate(calc(-50% - 1.5px), -50%);background:var(--post-page-background-color);padding:8px;border-radius:50%;fill:var(--accent-color);color:var(--accent-color)}.callout-block.info.svelte-1pi2pyj.svelte-1pi2pyj{--bg-color:var(--callout-info-background-color);--accent-color:var(--callout-info-accent-color)}.callout-block.warning.svelte-1pi2pyj.svelte-1pi2pyj{--bg-color:var(--callout-warning-background-color);--accent-color:var(--callout-warning-accent-color)}.callout-block.error.svelte-1pi2pyj.svelte-1pi2pyj{--bg-color:var(--callout-error-background-color);--accent-color:var(--callout-error-accent-color)}.callout-block.success.svelte-1pi2pyj.svelte-1pi2pyj{--bg-color:var(--callout-success-background-color);--accent-color:var(--callout-success-accent-color)}\n.code-block.svelte-qgch0c.svelte-qgch0c{display:block;position:relative;background-color:var(--code-background-color);color:var(--code-text-color);font-family:var(--mono-font);font-size:1rem;line-height:1.33em;border-radius:8px;box-shadow:var(--card-shadow);padding:30px 15px;margin:30px 0}.code-block.svelte-qgch0c pre{overflow-x:auto;scrollbar-color:var(--primary-color) var(--scrollbar-track-color);scrollbar-width:thin;padding-bottom:5px}.code-block.svelte-qgch0c pre::-webkit-scrollbar{height:8px}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb{background:var(--primary-color)}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb:hover{background:var(--primary-light-color)}.code-block.svelte-qgch0c .lang.svelte-qgch0c{position:absolute;right:0;top:-15px;background:inherit;border-radius:8px;padding:5px 10px;z-index:2;font-size:0.85em}.code-block.svelte-qgch0c .filename.svelte-qgch0c{background:inherit;border-top-left-radius:8px;border-top-right-radius:8px;margin-bottom:-2px;padding:5px 10px;position:absolute;left:0px;top:-15px;z-index:1}\npicture.svelte-1gy5t1o.svelte-1gy5t1o{position:relative;width:100%;height:100%}picture.svelte-1gy5t1o img.svelte-1gy5t1o{width:100%;height:100%}","map":null},"head":""},{"slug":"fixing-favicons","title":"How to fix your Favicons","date":"2021-01-06T00:00:00.000Z","excerpt":"Favicons suck. Luckily, there are ways to make them suck less.","tags":["Front-End","Guide","Favicon"],"html":"<p>Favicons kinda suck. They should be a simple icon that identifies your webpage on a bunch of scenarios, i.e. the icon displayed on the tab besides your website’s title, or the icon on the mobile browser’s bookmarks screen, or the icon on the phone’s home screen.</p>\n<p>Unfortunately, different browsers, OSs, and implementations throughout the years have ended up with many different files and meta tags, that we as developers need to handle otherwise we end up with missing or pixelated icons.</p>\n<h2>Easy Mode</h2>\n<p>I recently met my new best friend, <a href=\"https://realfavicongenerator.net/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Real Favicon Generator</a>. It took all these pains I just wrote about and just made it a breeze to handle. Best of all, it’s customizable!</p>\n<p>You just have to add in your existing favicon image (for best results, a SVG or high-quality PNG are recommended). From then on, the generator will display previews and allow customization of each category of favicon it will generate:</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/fixing-favicons/favicon-generator-customization.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/fixing-favicons/favicon-generator-customization.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/fixing-favicons/favicon-generator-customization.png\" alt=\"Screenshot of Real Favicon Generator&#39;s customization\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->The customization options allow you to set different icons depending on device and OS, and even generate icons with background colors if needed.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<p>At the bottom, you can even set up ways of avoiding caching issues, compression, and scaling algorithms (!). After all that, it will generate them all as set, give you a zip with all the files, and the HTML code to paste on your <code>&lt;head&gt;</code>. You can check the result on this very website (fantinel.dev). The favicon should look fantastic on every device/browser combination.</p>\n<h2>Manual Mode</h2>\n<p>So, there are 5 types of favicons that we need to add, if we want to support every current browser:</p>\n<h3>1. Desktop browsers</h3>\n<ul><li>`favicon.ico`, for IE and any other legacy browsers. Optional if you don&#39;t want to support it;</li>\n  <li>`favicon-16x16.png`, the classic one that displays on the tabs;</li>\n  <li>`favicon-32x32.png`, used on Safari for macOS.</li></ul>\n<h3>2. Android browsers</h3>\n<ul><li>`android-chrome-192x192.png`, shown on the tab card and when added to home screen;</li>\n  <li>`android-chrome-512x512.png`, shown on the splash screen for when the website is installed to the phone. Optional if it&#39;s not a PWA;</li></ul>\n<h3>3. iOS Safari, and some Android browsers like Samsung Internet</h3>\n<ul><li>`apple-touch-icon.png`, a 180x180 file displayed when the website is added to home screen;</li></ul>\n<h3>4. Windows 8/10 start menu (optional)</h3>\n<ul><li>`mstile-150x150.png`, only used when your website is added to the start menu as a tile on Windows 8/10, and when not declared, defaults to `apple-touch-icon.png` instead.</li></ul>\n<h3>5. macOS Safari Pinned Tabs (optional)</h3>\n<ul><li>`safari-pinned-tab.svg` is used when users pin a tab on Safari for macOS. Basically, you declare a monochrome SVG and a theme color. Safari does the rest.</li></ul>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/fixing-favicons/safari-pinned-tabs-demo.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/fixing-favicons/safari-pinned-tabs-demo.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/fixing-favicons/safari-pinned-tabs-demo.png\" alt=\"Demo of Safari pinned tabs favicon behavior\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->How Safari pinned tab favicon works, screenshot of realfavicongenerator.net<!-- HTML_TAG_END --></figcaption>\n</picture>\n<p>With those files, you should be good to go on every single browser, by adding this to your <code>&lt;head&gt;</code>:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">html</div>\n\t<pre class=\"language-html\"><!-- HTML_TAG_START --><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>apple-touch-icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">sizes</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>180x180<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/apple-touch-icon.png<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image/png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">sizes</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>32x32<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/favicon-32x32.png<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image/png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">sizes</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>16x16<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/favicon-16x16.png?<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>manifest<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/site.webmanifest<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mask-icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/safari-pinned-tab.svg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#000000<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>shortcut icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/favicon.ico<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<h2>Single SVG Favicon</h2>\n<p>Something that’s starting to become a thing is having a single SVG favicon. Theoretically, SVGs are infinitely scalable, and should look good on all sizes. Unfortunately, browser support is not there yet.</p>\n<p><a href=\"https://caniuse.com/link-icon-svg\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Can I Use</a> reports that, currently (January 2021), only recent versions of Firefox and Chromium-based browsers support this feature. This means that Safari, non-Chromium Edge, IE, and some mobile browsers do not support it. Therefore, unless you want your favicon to just not appear in those browsers, you’d still have to use other file formats as well. The downside of this approach is that all favicons would look the same, and you won’t be able to customize and have differently-shaped icons for mobile devices, for example.</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">html</div>\n\t<pre class=\"language-html\"><!-- HTML_TAG_START --><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>favicon.svg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<h2>Wrapping Up</h2>\n<p>Favicons suck. Luckily, there are people working to make it suck less. With the approach presented on this article, your website should be able to display its best favicon on all browsers for years to come.</p>","css":{"code":"picture.svelte-1gy5t1o.svelte-1gy5t1o{position:relative;width:100%;height:100%}picture.svelte-1gy5t1o img.svelte-1gy5t1o{width:100%;height:100%}\n.code-block.svelte-qgch0c.svelte-qgch0c{display:block;position:relative;background-color:var(--code-background-color);color:var(--code-text-color);font-family:var(--mono-font);font-size:1rem;line-height:1.33em;border-radius:8px;box-shadow:var(--card-shadow);padding:30px 15px;margin:30px 0}.code-block.svelte-qgch0c pre{overflow-x:auto;scrollbar-color:var(--primary-color) var(--scrollbar-track-color);scrollbar-width:thin;padding-bottom:5px}.code-block.svelte-qgch0c pre::-webkit-scrollbar{height:8px}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb{background:var(--primary-color)}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb:hover{background:var(--primary-light-color)}.code-block.svelte-qgch0c .lang.svelte-qgch0c{position:absolute;right:0;top:-15px;background:inherit;border-radius:8px;padding:5px 10px;z-index:2;font-size:0.85em}.code-block.svelte-qgch0c .filename.svelte-qgch0c{background:inherit;border-top-left-radius:8px;border-top-right-radius:8px;margin-bottom:-2px;padding:5px 10px;position:absolute;left:0px;top:-15px;z-index:1}","map":null},"head":""}]},{"slug":"fixing-favicons","title":"How to fix your Favicons","date":"2021-01-06T00:00:00.000Z","excerpt":"Favicons suck. Luckily, there are ways to make them suck less.","tags":["Front-End","Guide","Favicon"],"html":"<p>Favicons kinda suck. They should be a simple icon that identifies your webpage on a bunch of scenarios, i.e. the icon displayed on the tab besides your website’s title, or the icon on the mobile browser’s bookmarks screen, or the icon on the phone’s home screen.</p>\n<p>Unfortunately, different browsers, OSs, and implementations throughout the years have ended up with many different files and meta tags, that we as developers need to handle otherwise we end up with missing or pixelated icons.</p>\n<h2>Easy Mode</h2>\n<p>I recently met my new best friend, <a href=\"https://realfavicongenerator.net/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Real Favicon Generator</a>. It took all these pains I just wrote about and just made it a breeze to handle. Best of all, it’s customizable!</p>\n<p>You just have to add in your existing favicon image (for best results, a SVG or high-quality PNG are recommended). From then on, the generator will display previews and allow customization of each category of favicon it will generate:</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/fixing-favicons/favicon-generator-customization.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/fixing-favicons/favicon-generator-customization.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/fixing-favicons/favicon-generator-customization.png\" alt=\"Screenshot of Real Favicon Generator&#39;s customization\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->The customization options allow you to set different icons depending on device and OS, and even generate icons with background colors if needed.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<p>At the bottom, you can even set up ways of avoiding caching issues, compression, and scaling algorithms (!). After all that, it will generate them all as set, give you a zip with all the files, and the HTML code to paste on your <code>&lt;head&gt;</code>. You can check the result on this very website (fantinel.dev). The favicon should look fantastic on every device/browser combination.</p>\n<h2>Manual Mode</h2>\n<p>So, there are 5 types of favicons that we need to add, if we want to support every current browser:</p>\n<h3>1. Desktop browsers</h3>\n<ul><li>`favicon.ico`, for IE and any other legacy browsers. Optional if you don&#39;t want to support it;</li>\n  <li>`favicon-16x16.png`, the classic one that displays on the tabs;</li>\n  <li>`favicon-32x32.png`, used on Safari for macOS.</li></ul>\n<h3>2. Android browsers</h3>\n<ul><li>`android-chrome-192x192.png`, shown on the tab card and when added to home screen;</li>\n  <li>`android-chrome-512x512.png`, shown on the splash screen for when the website is installed to the phone. Optional if it&#39;s not a PWA;</li></ul>\n<h3>3. iOS Safari, and some Android browsers like Samsung Internet</h3>\n<ul><li>`apple-touch-icon.png`, a 180x180 file displayed when the website is added to home screen;</li></ul>\n<h3>4. Windows 8/10 start menu (optional)</h3>\n<ul><li>`mstile-150x150.png`, only used when your website is added to the start menu as a tile on Windows 8/10, and when not declared, defaults to `apple-touch-icon.png` instead.</li></ul>\n<h3>5. macOS Safari Pinned Tabs (optional)</h3>\n<ul><li>`safari-pinned-tab.svg` is used when users pin a tab on Safari for macOS. Basically, you declare a monochrome SVG and a theme color. Safari does the rest.</li></ul>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/fixing-favicons/safari-pinned-tabs-demo.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/fixing-favicons/safari-pinned-tabs-demo.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/fixing-favicons/safari-pinned-tabs-demo.png\" alt=\"Demo of Safari pinned tabs favicon behavior\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->How Safari pinned tab favicon works, screenshot of realfavicongenerator.net<!-- HTML_TAG_END --></figcaption>\n</picture>\n<p>With those files, you should be good to go on every single browser, by adding this to your <code>&lt;head&gt;</code>:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">html</div>\n\t<pre class=\"language-html\"><!-- HTML_TAG_START --><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>apple-touch-icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">sizes</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>180x180<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/apple-touch-icon.png<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image/png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">sizes</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>32x32<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/favicon-32x32.png<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image/png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">sizes</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>16x16<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/favicon-16x16.png?<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>manifest<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/site.webmanifest<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mask-icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/safari-pinned-tab.svg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#000000<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>shortcut icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/favicon.ico<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<h2>Single SVG Favicon</h2>\n<p>Something that’s starting to become a thing is having a single SVG favicon. Theoretically, SVGs are infinitely scalable, and should look good on all sizes. Unfortunately, browser support is not there yet.</p>\n<p><a href=\"https://caniuse.com/link-icon-svg\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Can I Use</a> reports that, currently (January 2021), only recent versions of Firefox and Chromium-based browsers support this feature. This means that Safari, non-Chromium Edge, IE, and some mobile browsers do not support it. Therefore, unless you want your favicon to just not appear in those browsers, you’d still have to use other file formats as well. The downside of this approach is that all favicons would look the same, and you won’t be able to customize and have differently-shaped icons for mobile devices, for example.</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">html</div>\n\t<pre class=\"language-html\"><!-- HTML_TAG_START --><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>favicon.svg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<h2>Wrapping Up</h2>\n<p>Favicons suck. Luckily, there are people working to make it suck less. With the approach presented on this article, your website should be able to display its best favicon on all browsers for years to come.</p>","css":{"code":"picture.svelte-1gy5t1o.svelte-1gy5t1o{position:relative;width:100%;height:100%}picture.svelte-1gy5t1o img.svelte-1gy5t1o{width:100%;height:100%}\n.code-block.svelte-qgch0c.svelte-qgch0c{display:block;position:relative;background-color:var(--code-background-color);color:var(--code-text-color);font-family:var(--mono-font);font-size:1rem;line-height:1.33em;border-radius:8px;box-shadow:var(--card-shadow);padding:30px 15px;margin:30px 0}.code-block.svelte-qgch0c pre{overflow-x:auto;scrollbar-color:var(--primary-color) var(--scrollbar-track-color);scrollbar-width:thin;padding-bottom:5px}.code-block.svelte-qgch0c pre::-webkit-scrollbar{height:8px}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb{background:var(--primary-color)}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb:hover{background:var(--primary-light-color)}.code-block.svelte-qgch0c .lang.svelte-qgch0c{position:absolute;right:0;top:-15px;background:inherit;border-radius:8px;padding:5px 10px;z-index:2;font-size:0.85em}.code-block.svelte-qgch0c .filename.svelte-qgch0c{background:inherit;border-top-left-radius:8px;border-top-right-radius:8px;margin-bottom:-2px;padding:5px 10px;position:absolute;left:0px;top:-15px;z-index:1}","map":null},"head":"","readingTime":"6 min read","relatedPosts":[{"slug":"angular-pwa-how-to","title":"How to transform your Angular 6+ app into a PWA","date":"2019-03-10T00:00:00.000Z","excerpt":"Make your Angular app work like a native app on phones and desktop.","tags":["Angular","PWA","Guide","Front-End","JavaScript"],"html":"<p>Recently, I’ve converted my Angular 6 app into a PWA, allowing it to work offline and work like a native app on phones and desktop.</p>\n<p>Although there are many tutorials out there about turning Angular apps into PWAs, I’ve decided to write one simply because I faced some issues that were a bit hard to solve, so if you end up having them you don’t lose as much time as I did!</p>\n<div class=\"callout-block info svelte-1pi2pyj\"><div class=\"icon-wrapper svelte-1pi2pyj\"><svg width=\"100%\" height=\"100%\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M12 11.5V16.5\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path><path d=\"M12 7.51L12.01 7.49889\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path><path d=\"M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path></svg></div>\n\tThis tutorial assumes you are using Angular CLI. Possible issues are listed at the end of the tutorial.\n\n</div>\n<h2>Step 1. Installing the Angular PWA dependencies</h2>\n<p>This is the easiest part. Run <code>ng add @angular/pwa</code> in the root of your project (the folder where <code>package.json</code> is. The CLI will automagically add <code>@angular/pwa</code> and <code>@angular/service-worker</code> as dependencies in your package.json file, and add some placeholder icons in your <code>assets</code> folder.</p>\n<p>Besides that, it will create a file named <code>ngsw-config.json</code> in your root folder, as well as a <code>manifest.json</code> in your /src folder, and reference both in <code>index.html</code> and <code>app.module.ts</code>. These files are important as you’ll be using them to configure your PWA later.</p>\n<h2>Step 2. Setting up your manifest.json</h2>\n<p>The <code>manifest.json</code> file is the one that tells the browser/OS about your app. You can set the full and short names, theme color, icons, and more. <a href=\"https://developers.google.com/web/fundamentals/web-app-manifest/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">You can find more about its settings here.</a></p>\n<p>Don’t forget to update the auto-generated icons on <code>/assets/icons</code> folder! These are necessary so that your app icon shows up for devices of all DPI settings.</p>\n<h2>Step 3. Setting up ngsw-config.json</h2>\n<p>This file is the one that can configure how your PWA works. You can set up different installation behaviors, as well as handle cache updates. <a href=\"https://angular.io/guide/service-worker-config\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">The Angular documentation has got all options covered here.</a></p>\n<h2>Step 4. Test it out!</h2>\n<p>If you want to test out your app’s new PWA capabilities locally, <code>ng serve</code> won’t help you. Instead, you can run a web server in your machine easily by installing the <code>http-server</code> package from npm:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">shell</div>\n\t<pre class=\"language-shell\"><!-- HTML_TAG_START --><code class=\"language-shell\"><span class=\"token function\">npm</span> i http-server -g</code><!-- HTML_TAG_END --></pre>\n</div>\n<p>Then, compile your app in production mode:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">shell</div>\n\t<pre class=\"language-shell\"><!-- HTML_TAG_START --><code class=\"language-shell\">ng build --prod</code><!-- HTML_TAG_END --></pre>\n</div>\n<p>And finally, start the web server:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">shell</div>\n\t<pre class=\"language-shell\"><!-- HTML_TAG_START --><code class=\"language-shell\">http-server -p <span class=\"token number\">8080</span> -c-1 dist/<span class=\"token operator\">&lt;</span>project-name<span class=\"token operator\">></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>Your app should be up and running on <code>http://localhost:8080/</code> (or whichever port you chose). How do you know it’s a PWA? There are a few ways:</p>\n<h3>Check if the service worker is being registered</h3>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/angular-pwa-how-to/Service-Workers-1.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/angular-pwa-how-to/Service-Workers-1.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/angular-pwa-how-to/Service-Workers-1.png\" alt=\"Registered Service Worker\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->On dev console > Application > Service Workers, there should be a registered service worker for your app.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<h3>Use Chrome’s Audits feature to validate it as a PWA</h3>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/angular-pwa-how-to/Audits.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/angular-pwa-how-to/Audits.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/angular-pwa-how-to/Audits.png\" alt=\"Audits\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->On dev console > Audits, test it for Progressive Web Apps.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/angular-pwa-how-to/Passed-Audits.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/angular-pwa-how-to/Passed-Audits.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/angular-pwa-how-to/Passed-Audits.png\" alt=\"Audits passed\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->If everything went alright, you should see the highlighted results on the 'Passed audits' section.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<p>You may see some errors regarding the app not running over HTTPS. Don’t worry, that’s only because it’s running locally.</p>\n<h2>Step 5. Install it!</h2>\n<p>On Chrome, you may also see the option to install the app appear in the URL bar:</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/angular-pwa-how-to/Clipboard_2019-10-27-18-09-45.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/angular-pwa-how-to/Clipboard_2019-10-27-18-09-45.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/angular-pwa-how-to/Clipboard_2019-10-27-18-09-45.png\" alt=\"Chrome prompts you to install PWA\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  \n</picture>\n<p>After this, the app should already open on a separate window, and show up on your OS’s installed apps list!</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/angular-pwa-how-to/Clipboard_2019-10-27-18-11-28.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/angular-pwa-how-to/Clipboard_2019-10-27-18-11-28.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/angular-pwa-how-to/Clipboard_2019-10-27-18-11-28.png\" alt=\"Installed PWA on OS&#39; dock\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->Notice the PWA's own icon on my OS' dock! Success!<!-- HTML_TAG_END --></figcaption>\n</picture>\n<h2>Issues Encountered</h2>\n<p>Even though the proccess is quite straight-forward, I still faced some issues when running it in my app. They were because of Angular tools versions, and I probably had these issues because I’m still running an Angular 6 app (and Angular 7 is out as of now).</p>\n<h3>The <code>ng add @angular/pwa</code> command doesn’t create relevant files</h3>\n<p>This was a <a href=\"https://github.com/angular/angular-cli/issues/11914\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">reported bug</a> on the CLI. I had a bugged version (6.0.8) installed on my app. I updated it by running</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">shell</div>\n\t<pre class=\"language-shell\"><!-- HTML_TAG_START --><code class=\"language-shell\"><span class=\"token function\">npm</span> uninstall @angular/cli --save\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> @angular/cli@latest --save</code><!-- HTML_TAG_END --></pre>\n</div>\n<p>It updated itself to version 7.1.4 and worked flawlessly.</p>\n<p><em>Notice: this is related to the local cli version, the one displayed on your <code>package.json</code> file, not the global one installed in your machine.</em></p>\n<h3>Failed to register a ServiceWorker: A bad HTTP response code (404) was received when fetching the script.</h3>\n<p>This error shows up on the browser console after opening the app running on http-server. It happens because, when running <code>ng build --prod</code>, Angular isn’t sending the service worker’s files along with the ones from the app. You can confirm this by searching for the <code>ngsw-worker.js</code> file on the <code>/dist</code> folder of your app. If it’s not there, then you have this issue.</p>\n<p>This one took me the longest to find out. Another bug related to outdated versions of Angular tools. Simply changing <code>@angular-devkit/build-angular</code> version in devDependencies to <code>~0.10.0</code> solved it.</p>\n<h2>Finalizing</h2>\n<p>I hope you had success on setting up your PWA! Remember that, when published, it will only work if you serve your app through HTTPS.</p>\n<p>Thanks for reading!</p>","css":{"code":".callout-block.svelte-1pi2pyj.svelte-1pi2pyj{--bg-color:var(--callout-background-color);--accent-color:transparent;margin:40px 0 30px;padding:25px 25px;border-top-right-radius:10px;border-bottom-right-radius:10px;background:var(--bg-color);color:var(--text-color);border-left:4px solid var(--accent-color);position:relative}.callout-block.svelte-1pi2pyj .icon-wrapper.svelte-1pi2pyj{position:absolute;width:50px;height:50px;top:0;left:0;transform:translate(calc(-50% - 1.5px), -50%);background:var(--post-page-background-color);padding:8px;border-radius:50%;fill:var(--accent-color);color:var(--accent-color)}.callout-block.info.svelte-1pi2pyj.svelte-1pi2pyj{--bg-color:var(--callout-info-background-color);--accent-color:var(--callout-info-accent-color)}.callout-block.warning.svelte-1pi2pyj.svelte-1pi2pyj{--bg-color:var(--callout-warning-background-color);--accent-color:var(--callout-warning-accent-color)}.callout-block.error.svelte-1pi2pyj.svelte-1pi2pyj{--bg-color:var(--callout-error-background-color);--accent-color:var(--callout-error-accent-color)}.callout-block.success.svelte-1pi2pyj.svelte-1pi2pyj{--bg-color:var(--callout-success-background-color);--accent-color:var(--callout-success-accent-color)}\n.code-block.svelte-qgch0c.svelte-qgch0c{display:block;position:relative;background-color:var(--code-background-color);color:var(--code-text-color);font-family:var(--mono-font);font-size:1rem;line-height:1.33em;border-radius:8px;box-shadow:var(--card-shadow);padding:30px 15px;margin:30px 0}.code-block.svelte-qgch0c pre{overflow-x:auto;scrollbar-color:var(--primary-color) var(--scrollbar-track-color);scrollbar-width:thin;padding-bottom:5px}.code-block.svelte-qgch0c pre::-webkit-scrollbar{height:8px}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb{background:var(--primary-color)}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb:hover{background:var(--primary-light-color)}.code-block.svelte-qgch0c .lang.svelte-qgch0c{position:absolute;right:0;top:-15px;background:inherit;border-radius:8px;padding:5px 10px;z-index:2;font-size:0.85em}.code-block.svelte-qgch0c .filename.svelte-qgch0c{background:inherit;border-top-left-radius:8px;border-top-right-radius:8px;margin-bottom:-2px;padding:5px 10px;position:absolute;left:0px;top:-15px;z-index:1}\npicture.svelte-1gy5t1o.svelte-1gy5t1o{position:relative;width:100%;height:100%}picture.svelte-1gy5t1o img.svelte-1gy5t1o{width:100%;height:100%}","map":null},"head":""},{"slug":"css-scroll-snapping","title":"CSS Scroll Snapping - Improve Scrolling without JS","date":"2020-08-03T00:00:00.000Z","excerpt":"Learn how to snap scrolling positions with CSS only.","tags":["Front-End","CSS","Guide"],"html":"<p>CSS is evolving constantly and the past few years have brought us amazing stuff. It is getting easier to make smooth and complete experiences without having to use JavaScript at all. Case in point: Scroll Snapping.</p>\n<p>It is an easy way to guarantee that users will scroll to the correct portion of your page or of a container. Picture a landing page that is easily swipable/scrollable between sections, or swipable cards. Take in mind how Android’s Recent Apps screen works, for example:</p>\n<p><img src=\"/images/posts/css-scroll-snapping/android-scroll-snapping.gif\" alt=\"Android's Recent Apps screen has scroll mapping between app cards\"></p>\n<p>You can see that Android never allows the end of a scroll to be in a place between cards. There’s a certain threshold that determines that the scroll will snap into the nearest card and put it in the center. All that while still keeping scrolling momentum, allowing you to go from one edge of the list to another in a single scroll if you want to.</p>\n<p>Until recently, you’d have to resort to JavaScript code to make a similar behavior on the web. But now, all you need is CSS, which makes things more performant, consistent and reliable! Browser support is already pretty good, with all major browser engines already supporting it fully. Check out browser support on <a href=\"https://caniuse.com/#feat=css-snappoints\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">caniuse.com</a>.</p>\n<p>I’ve recently added scroll snapping to my own website. You can check it out on the “Work Experience” section in the <a href=\"https://fantinel.dev\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Home page</a>. It’s specially great on mobile!</p>\n<h2>How?</h2>\n<p>There are two main CSS properties that make the magic happen, one for the parent element, and one for its children.</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">css</div>\n\t<pre class=\"language-css\"><!-- HTML_TAG_START --><code class=\"language-css\"><span class=\"token selector\">.parent</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">scroll-snap-type</span><span class=\"token punctuation\">:</span> y mandatory<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.child</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">scroll-snap-align</span><span class=\"token punctuation\">:</span> start<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code><!-- HTML_TAG_END --></pre>\n</div>\n<h3>scroll-snap-type</h3>\n<p>This property tells the browser that the parent element uses scroll snapping. We are given some options on how snapping must work. <code>y</code> indicates that the scroll happens vertically, while <code>x</code> means horizontally. We can also pass the <code>mandatory</code> and <code>proximity</code> options. </p>\n<p>We use <code>mandatory</code> to tell that the browser <em>must</em> snap to a snap point when the user stops scrolling. This means that if the next snap point becomes visible on the screen and scrolling stops, the browser will automatically snap to the next one. In the other end, with <code>proximity</code>, things are less strict. The browser will only snap to the next snap point if scrolling gets past a certain threshold. Both values are useful, their use will depend on the situation you’re applying it to.</p>\n<iframe height=\"500\" style=\"width: 100%;\" scrolling=\"no\" title=\"scroll-snap-type: Mandatory vs Proximity\" src=\"https://codepen.io/matfantinel/embed/preview/LYNPdpE?default-tab=result&theme-id=dark\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">See the Pen <a href=\"https://codepen.io/matfantinel/pen/LYNPdpE\">scroll-snap-type: Mandatory vs Proximity</a> by Matheus Fantinel (<a href=\"https://codepen.io/matfantinel\">@matfantinel</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>\n<h3>scroll-snap-align</h3>\n<p>This is a property you add to the children that specifies where the snap points will be in the element. Which means that, whenever the browser automatically snaps the scroll to the element, it will either go to the left/top edge (<code>start</code>), center (<code>center</code>), or right/bottom edge (<code>end</code>) of the element. This property pretty much only makes a difference if the children are bigger than the parent’s display size.</p>\n<h3>scroll-padding and scroll-margin</h3>\n<p>To make things even better, we can use the <code>scroll-padding</code> (for parent) and <code>scroll-margin</code> (for children) properties. They add some space before/after the elements that are only considered when scrolling. The best way to implement them is by trying it out after you build your scroll snapping goodiness.</p>\n<p>You can check the documentation over on <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Scroll_Snap\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Mozilla Developer Network</a> for more info.</p>\n<h2>Wrapping Up</h2>\n<p>Scroll snapping is a sign that the web is maturing. For years we’ve been bloating websites with a lot of JavaScript for very simple visual tasks, and now CSS is slowly evolving to take some space back. It’s an important evolution because Web technologies are being used to build every kind of application, and its native feature set needs to be good enough to compete with native or native-ish counterparts like Flutter, Swift, or Kotlin.</p>\n<p>Thanks for reading!</p>","css":{"code":".code-block.svelte-qgch0c.svelte-qgch0c{display:block;position:relative;background-color:var(--code-background-color);color:var(--code-text-color);font-family:var(--mono-font);font-size:1rem;line-height:1.33em;border-radius:8px;box-shadow:var(--card-shadow);padding:30px 15px;margin:30px 0}.code-block.svelte-qgch0c pre{overflow-x:auto;scrollbar-color:var(--primary-color) var(--scrollbar-track-color);scrollbar-width:thin;padding-bottom:5px}.code-block.svelte-qgch0c pre::-webkit-scrollbar{height:8px}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb{background:var(--primary-color)}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb:hover{background:var(--primary-light-color)}.code-block.svelte-qgch0c .lang.svelte-qgch0c{position:absolute;right:0;top:-15px;background:inherit;border-radius:8px;padding:5px 10px;z-index:2;font-size:0.85em}.code-block.svelte-qgch0c .filename.svelte-qgch0c{background:inherit;border-top-left-radius:8px;border-top-right-radius:8px;margin-bottom:-2px;padding:5px 10px;position:absolute;left:0px;top:-15px;z-index:1}","map":null},"head":""},{"slug":"microfrontends","title":"Micro Frontends: Solving the Legacy JavaScript Problem","date":"2019-03-17T00:00:00.000Z","excerpt":"Finally a way to modernize that legacy project you keep complaining about!","tags":["Front-End","JavaScript","Guide"],"html":"<p>It’s a running joke in the development community that if a JS programmer goes into a coma for 6 months, he will need to learn everything again by the time he wakes up. This is a consequence of JavaScript’s open, decentralized nature. It’s both a blessing and a curse.</p>\n<p>All the time there are new frameworks and libraries meant to make it easier to develop in JS, at least for a specific use. Sometimes they are effectively better, sometimes they just bring a new workflow, and as a developer it can be quite fun to learn them and explore new paradigms.</p>\n<p>However, in the “enterprise world”, reality is different. We build big, complex applications that usually rely on a framework’s properties to work the way they do. Recent frameworks like React, Vue and Angular offer an easy way to break an application in smaller, more independent chunks that can be maintained separately, but they still rely on the main framework’s version.</p>\n<p>Front-end development is becoming more and more like back-end development, with more complex architectures. Naturally, the concept of microservices was brought over and is being called Micro Frontends.</p>\n<h2>What do Micro Frontends consist of?</h2>\n<p>First, we must define what monolithic frontends are. You probably work on one of them, since they are basically every web app that is made with a specific framework and version, and only works by itself without resorting to redirects and iframes. Hence the monolith-derived name.</p>\n<p>Micro Frontends, however, can be made of several pieces of different technologies - all in a “central” app that puts the puzzle pieces together.</p>\n<p>Since frameworks like React and Angular are already very popular, the concept of componentizing our apps is well known, and it’s basically what Micro Frontends consist of. It uses the Custom Elements API, a web standard that is being implemented by all major browsers (with polyfills for older ones!), to provide a common ground between different components written in Angular, React, Vue, or even good old pure JS!</p>\n<p>To do that, they work in a similar way modern frameworks do, with an Input/Output pattern and a very simple way to import them into the parent’s HTML. We’ll see more about this later.</p>\n<h2>How does that solve the legacy problem?</h2>\n<p>You’ve probably already worked on a big app that was made years ago, and used “ancient” technology. If you haven’t, lucky you! But in many enterprise environments, working with JQuery, KnockoutJS, AngularJS (v1.x) or even older JS technologies is the norm. While usually there is willingness to update the tech stack in order to gain more productivity and performance, it is usually not feasible to update an entire behemoth all at once. Add the fact that companies and their products must move fast with features and changes, and the chance to update is close to zero.</p>\n<p>One alternative is to create a second app with a new technology and make the change in multiple steps, with routes handling which app is to be shown. This however, has many issues:</p>\n<ul><li>You have to duplicate many things, like fixed menus, authentication handling, and all the base architecture. Even worse than duplicating is <strong>maintaining</strong> both of them afterwards;</li>\n<li>The user experience will be severely harmed when your app redirects to a different one frequently;</li>\n<li>When the new technology you use becomes obsolete, you’ll have to deal with the problem all over again.</li></ul>\n<p>Other alternative is to use iframes, which brings a lot of problems since communication between both pages is not very straightforward and the experience feels clunky. Not very good.</p>\n<p>However, when using Micro Frontends, you are able to:</p>\n<ul><li>Migrate technologies in small steps:</li>\n<li>Communication between both technologies is easy;</li>\n<li>The user does not notice the use of two different stacks - they all merge seamlessly in the same experience;</li>\n<li>There is no need to maintain more than one version of a component;</li>\n<li>Encourages good use of components and code reuse.</li></ul>\n<p>At my job, we had our main application written in AngularJS, and since it was a pretty huge application, migrating to a newer stack was just not feasible. We then had a project that included a complete overhaul of the design of the application, we felt it was a good time to use newer technologies.</p>\n<p>Since we had a side project written in Angular 6 and most of us had knowledge of this framework, we decided to write new components for our main app in Angular 7. While the plan was to update the entire app, rewriting it entirely and publishing all at once would bring a lot of problems.</p>\n<p>We then decided to use the Micro Frontends approach, rewriting our pages/components one by one and releasing it in “packages”. We did that by creating Custom Elements in Angular 7 and integrating them with the older AngularJS app. Since we would be modernizing entire pages at once, there wouldn’t be many changes on the older app. The tried-and-tested older app was still responsible for managing routes and authentication, and would just display our newer components as they were built. <em>This proved to be a successful approach that allowed us to both modernize our tech stack, minimize user impact, we kept delivering value to our customers and, since the project was broken in smaller pieces, we had flexibility to tackle other projects in between.</em></p>\n<h2>How do they work in practice?</h2>\n<p>For this article, I am going to create a custom element with Angular 7 and use it in a simple html file. I’ve created a sample app on GitHub. <a href=\"https://github.com/matfantinel/custom-elements-sample\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">You can check the full code here.</a></p>\n<h3>Creating the Custom Element</h3>\n<p>First, we create a new Angular 7 app:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">shell</div>\n\t<pre class=\"language-shell\"><!-- HTML_TAG_START --><code class=\"language-shell\">ng new angular-elements-sample --prefix custom</code><!-- HTML_TAG_END --></pre>\n</div>\n<p>The CLI will ask you for some settings, you can choose whatever you like. Since we’re just using Custom Components in this example, I chose not to apply Angular routing.</p>\n<p>Then, we need to add the Angular package that brings Custom Elements support:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">shell</div>\n\t<pre class=\"language-shell\"><!-- HTML_TAG_START --><code class=\"language-shell\">ng <span class=\"token function\">add</span> @angular/elements</code><!-- HTML_TAG_END --></pre>\n</div>\n<p>Now, on tsconfig.json file, change target to “es2015”.</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">json</div>\n\t<pre class=\"language-json\"><!-- HTML_TAG_START --><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"compileOnSave\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    ...\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"es2015\"</span><span class=\"token punctuation\">,</span>\n    ...\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>Then, create a new component in your app:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">shell</div>\n\t<pre class=\"language-shell\"><!-- HTML_TAG_START --><code class=\"language-shell\">ng g component button</code><!-- HTML_TAG_END --></pre>\n</div>\n<p>On this component, we should set its encapsulation to ShadowDom. This means that its styles will be limited to itself, and styles from the parent application won’t apply to the child component, or vice-versa. Also, we’ll be declaring an Input() property, that the element will receive from the parent, and a CustomEvent, a way to communicate events with other applications/components in the same page.</p>\n<p>Below is the full component Typescript code:</p>\n<div class=\"code-block svelte-qgch0c\"><div class=\"filename svelte-qgch0c\">button.component.ts</div>\n\t<div class=\"lang svelte-qgch0c\">typescript</div>\n\t<pre class=\"language-typescript\"><!-- HTML_TAG_START --><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Component<span class=\"token punctuation\">,</span> OnInit<span class=\"token punctuation\">,</span> ViewEncapsulation<span class=\"token punctuation\">,</span> Input<span class=\"token punctuation\">,</span> ElementRef <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/core'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Component</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  selector<span class=\"token operator\">:</span> <span class=\"token string\">'custom-button'</span><span class=\"token punctuation\">,</span>\n  templateUrl<span class=\"token operator\">:</span> <span class=\"token string\">'./button.component.html'</span><span class=\"token punctuation\">,</span>\n  styleUrls<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'./button.component.scss'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  encapsulation<span class=\"token operator\">:</span> ViewEncapsulation<span class=\"token punctuation\">.</span>ShadowDom\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ButtonComponent</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">OnInit</span> <span class=\"token punctuation\">&#123;</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Input</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> label <span class=\"token operator\">=</span> <span class=\"token string\">'Default Label'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> clicksCount<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  htmlElement<span class=\"token operator\">:</span> HTMLElement<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">public</span> hostElement<span class=\"token operator\">:</span> ElementRef<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>htmlElement <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hostElement<span class=\"token punctuation\">.</span>nativeElement <span class=\"token keyword\">as</span> HTMLElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function\">ngOnInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token punctuation\">&#125;</span> \n\n  <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clicksCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> action <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CustomEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'action'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n      detail<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        clicksCount<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clicksCount\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>htmlElement<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>The HTML template is very simple:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">html</div>\n\t<pre class=\"language-html\"><!-- HTML_TAG_START --><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">(click)</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>handleClick()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>&#123;&#123; label &#125;&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>Then, we must declare our Custom Element in our app.module.ts file:</p>\n<div class=\"code-block svelte-qgch0c\"><div class=\"filename svelte-qgch0c\">app.module.ts</div>\n\t<div class=\"lang svelte-qgch0c\">typescript</div>\n\t<pre class=\"language-typescript\"><!-- HTML_TAG_START --><code class=\"language-typescript\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">NgModule</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  declarations<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token operator\">...</span>\n    ButtonComponent<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  entryComponents<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    ButtonComponent\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  providers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  bootstrap<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppModule</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> injector<span class=\"token operator\">:</span> Injector<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function\">ngDoBootstrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//Declares our component's Custom Element</span>\n    <span class=\"token comment\">//Then defines it in the DOM so it can be used in other projects</span>\n    <span class=\"token keyword\">const</span> buttonElement <span class=\"token operator\">=</span> <span class=\"token function\">createCustomElement</span><span class=\"token punctuation\">(</span>ButtonComponent<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> injector<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>injector <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    customElements<span class=\"token punctuation\">.</span><span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token string\">'custom-button'</span><span class=\"token punctuation\">,</span> buttonElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>To make it easier to use our component in another app, we can use some script magic to concat all the .js files produced by <code>ng build --prod</code> into a single properly-named file. To do that, I created the following script in package.json’s script session:</p>\n<div class=\"code-block svelte-qgch0c\"><div class=\"filename svelte-qgch0c\">package.json</div>\n\t<div class=\"lang svelte-qgch0c\">json</div>\n\t<pre class=\"language-json\"><!-- HTML_TAG_START --><code class=\"language-json\"><span class=\"token property\">\"package\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ng build --prod &amp;&amp; cat ./dist/runtime.js ./dist/polyfills.js ./dist/scripts.js ./dist/main.js > CustomElementsSample.js\"</span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>If you’re on a Windows system, you won’t have access to cat. In that case install <code>jscat</code> from npm and change the cat command to jscat.</p>\n<p>For that to work though, we need to disable output hashing on the angular.json file. This makes sure that the generated file names are always the same. Just change <code>&quot;outputHashing&quot;: &quot;all&quot;</code> to <code>&quot;outputHashing&quot;: &quot;none&quot;</code>.</p>\n<p>Now we have a single js file that contains our custom element, and we can use it in our sample legacy app!</p>\n<h3>Using the Custom Element</h3>\n<p>Check this sample html file:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">html</div>\n\t<pre class=\"language-html\"><!-- HTML_TAG_START --><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>This is a legacy app that uses Angular 7 custom elements<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../angular-elements-sample/CustomElementsSample.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span>\n            button &#123;\n                background-color: red;\n                color: white;\n            &#125;\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>custom-button</span> <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Legacy app label<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>custom-button</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>counter<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span> clicks!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span>\n            const button = document.querySelector('custom-button');\n            button.addEventListener('action', event => &#123;\n                document.getElementById('counter').innerHTML = event.detail.clicksCount;\n            &#125;);\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>You can see that we are successfully being able to listen for events, pass the label parameter, and that the button style from the html does not apply to the component. Success!</p>\n<h2>Caveats</h2>\n<p>As with all things, there are some disadvantages in this approach:</p>\n<h3>Browser Support</h3>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/microfrontends/Browser-Support.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/microfrontends/Browser-Support.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/microfrontends/Browser-Support.png\" alt=\"Browser support table\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->You can check this information on the <a href='https://caniuse.com/custom-elementsv1' target='_blank'>Can I Use</a> website.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<p>As of March 2019, only Firefox, Chrome and Chromium-based browsers fully support custom elements, while Safari implements them only partially. However, <a href=\"https://github.com/webcomponents/custom-elements\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">there’s a polyfill available</a> to bring support to older browsers.</p>\n<h3>JS Bundle size</h3>\n<p>Since you’re running components using other frameworks, you’ll still have to load them on the user’s side. If your app uses AngularJS, Angular, JQuery and React in different components, you’ll have to load all their runtimes before the app is fully functional. In this case, your better option is to minimize the bundle as much as possible, and use <a href=\"/what-are-pwas-and-why-should-i-care-about-them\">Service Workers and PWA capabilities</a> to improve caching on your app.</p>\n<h3>Communication between components is not as good as within the same framework</h3>\n<p>This should not be much of an issue unless you break a page into too many components with different technologies. Even then, communication with other components is very doable, just not as good as it would be between Angular-Angular or React-React components.</p>\n<h2>Wrapping up</h2>\n<p>Micro Frontends are a consequence of the complexicity that front-end has developed in the last few years. It is very good to see technology move forward, and we may get lost amidst so much change, so it is good to know that we don’t have to be afraid to not migrate our apps to the latest and greatest. They bring us the advantages of newer frameworks while minimizing the disadvantages.</p>\n<p>Thanks for reading!</p>","css":{"code":".code-block.svelte-qgch0c.svelte-qgch0c{display:block;position:relative;background-color:var(--code-background-color);color:var(--code-text-color);font-family:var(--mono-font);font-size:1rem;line-height:1.33em;border-radius:8px;box-shadow:var(--card-shadow);padding:30px 15px;margin:30px 0}.code-block.svelte-qgch0c pre{overflow-x:auto;scrollbar-color:var(--primary-color) var(--scrollbar-track-color);scrollbar-width:thin;padding-bottom:5px}.code-block.svelte-qgch0c pre::-webkit-scrollbar{height:8px}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb{background:var(--primary-color)}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb:hover{background:var(--primary-light-color)}.code-block.svelte-qgch0c .lang.svelte-qgch0c{position:absolute;right:0;top:-15px;background:inherit;border-radius:8px;padding:5px 10px;z-index:2;font-size:0.85em}.code-block.svelte-qgch0c .filename.svelte-qgch0c{background:inherit;border-top-left-radius:8px;border-top-right-radius:8px;margin-bottom:-2px;padding:5px 10px;position:absolute;left:0px;top:-15px;z-index:1}\npicture.svelte-1gy5t1o.svelte-1gy5t1o{position:relative;width:100%;height:100%}picture.svelte-1gy5t1o img.svelte-1gy5t1o{width:100%;height:100%}","map":null},"head":""}]},{"slug":"github-profile-readme","title":"Spicing Up your GitHub Profile with HTML and CSS","date":"2021-01-02T00:00:00.000Z","excerpt":"Make your GitHub profile more appealing with what you do best: code!","tags":["GitHub","Guide","SVG","Online Presence"],"html":"<p>Last year, GitHub added a new cool feature for the user profile. You can now add a README file to it, and it will show up besides your profile pic. This is great for talking a bit about yourself and what you do, putting some contact info, or simply making a cool first impression.</p>\n<h2>Creating the Repository</h2>\n<p>For adding this to your profile, there’s a little secret. Instead of an option in your “Edit Profile” settings, this is achieved by <span class=\"wrapper svelte-1sgfl7c\">creating a new repository with the same name as your GitHub username.</span></p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/github-profile-readme/repo-creation.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/github-profile-readme/repo-creation.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/github-profile-readme/repo-creation.png\" alt=\"Screenshot of GitHub repository creation\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->🎉️ Creating a new repo with the same name as your username immediatelly makes GitHub praise you for finding out this secret.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<p>You can choose to initialize the repository with a README file already. After that, the content of this file will already start showing on your personal profile.</p>\n<p>The README is just a Markdown file, which may make you think initially that you can only write in stuff with GitHub’s default styling. However, when you get creative, there’s a lot more you can do. You can add images and GIFs to it, sure, but SVGs are the real heros here. By adding SVG files to the Markdown file, you enable a lot of possibilities. SVG files support HTML tags and CSS styles (including animations!)</p>\n<p>For adding HTML to the SVG, we can use the <code>&lt;foreignObject&gt;</code> tag. This is an element that can include elements from different XML namespaces. Which means that even though you’re in a SVG namespace, you can use XHTML elements and all the features it supports, including the <code>&lt;style&gt;</code> tag for adding CSS.</p>\n<p>As an example, check out the SVG file I use to add the “tags” with technologies to my profile:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">html</div>\n\t<pre class=\"language-html\"><!-- HTML_TAG_START --><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span> <span class=\"token attr-name\">fill</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>none<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">viewBox</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0 0 300 120<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>300<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>120<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2000/svg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>foreignObject</span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100%<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>100%<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/1999/xhtml<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span>\n        .tags &#123;\n          display: flex;\n          flex-wrap: wrap;\n          height: 100%;\n          width: 100%;\n        &#125;\n        .tag &#123;\n          background-color: #E3FFFF;\n          border-radius: 0.25em;\n          color: #0ca4a5;\n          border: 1px solid #0ca4a5;\n          display: inline-block;\n          font-size: 0.75em;\n          line-height: 2em;\n          margin: 0.125em;\n          padding: 0 0.5em;\n          text-decoration: none;\n          font-family: sans-serif;\n        &#125;\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tags<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tag<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Angular<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tag<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Vue(X)<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tag<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>JavaScript<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tag<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>TypeScript<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tags<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tag<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>(S)CSS<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tag<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Building UIs<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tag<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Web Components<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tags<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tag<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Ionic<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tag<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Electron<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tag<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>.NET<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>foreignObject</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>From there on, the possibilities are endless. On my profile, I added my personal logo SVG and the same drawing animation used on my own website.</p>\n<figure markdown=\"1\"><p><img src=\"/images/posts/github-profile-readme/my-profile.gif\" alt=\"Animation on my GitHub Profile\"></p>\n<figcaption>Using CSS animations inside the SVG, I was able to mimic the animation on my website.</figcaption></figure>\n<p>Feel free to check out <a href=\"https://github.com/matfantinel/matfantinel\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">the source code</a> to find out how it works.</p>\n<h2>Inspiration</h2>\n<p>Some people have compiled <a href=\"https://github.com/abhisheknaiidu/awesome-github-profile-readme\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">a list of amazing examples and inspirations for your profile</a>. Some are minimalistic, others more complex, and some even get data from APIs (!). My favorite is <a href=\"https://github.com/BrunnerLivio\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">this one from Livio Brunner</a>, which definitely brings all the best things from 2000’s web.</p>","css":{"code":".wrapper.svelte-1sgfl7c{background:var(--highlight-marker-url)}\npicture.svelte-1gy5t1o.svelte-1gy5t1o{position:relative;width:100%;height:100%}picture.svelte-1gy5t1o img.svelte-1gy5t1o{width:100%;height:100%}\n.code-block.svelte-qgch0c.svelte-qgch0c{display:block;position:relative;background-color:var(--code-background-color);color:var(--code-text-color);font-family:var(--mono-font);font-size:1rem;line-height:1.33em;border-radius:8px;box-shadow:var(--card-shadow);padding:30px 15px;margin:30px 0}.code-block.svelte-qgch0c pre{overflow-x:auto;scrollbar-color:var(--primary-color) var(--scrollbar-track-color);scrollbar-width:thin;padding-bottom:5px}.code-block.svelte-qgch0c pre::-webkit-scrollbar{height:8px}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb{background:var(--primary-color)}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb:hover{background:var(--primary-light-color)}.code-block.svelte-qgch0c .lang.svelte-qgch0c{position:absolute;right:0;top:-15px;background:inherit;border-radius:8px;padding:5px 10px;z-index:2;font-size:0.85em}.code-block.svelte-qgch0c .filename.svelte-qgch0c{background:inherit;border-top-left-radius:8px;border-top-right-radius:8px;margin-bottom:-2px;padding:5px 10px;position:absolute;left:0px;top:-15px;z-index:1}","map":null},"head":"","readingTime":"6 min read","relatedPosts":[{"slug":"angular-pwa-how-to","title":"How to transform your Angular 6+ app into a PWA","date":"2019-03-10T00:00:00.000Z","excerpt":"Make your Angular app work like a native app on phones and desktop.","tags":["Angular","PWA","Guide","Front-End","JavaScript"],"html":"<p>Recently, I’ve converted my Angular 6 app into a PWA, allowing it to work offline and work like a native app on phones and desktop.</p>\n<p>Although there are many tutorials out there about turning Angular apps into PWAs, I’ve decided to write one simply because I faced some issues that were a bit hard to solve, so if you end up having them you don’t lose as much time as I did!</p>\n<div class=\"callout-block info svelte-1pi2pyj\"><div class=\"icon-wrapper svelte-1pi2pyj\"><svg width=\"100%\" height=\"100%\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M12 11.5V16.5\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path><path d=\"M12 7.51L12.01 7.49889\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path><path d=\"M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path></svg></div>\n\tThis tutorial assumes you are using Angular CLI. Possible issues are listed at the end of the tutorial.\n\n</div>\n<h2>Step 1. Installing the Angular PWA dependencies</h2>\n<p>This is the easiest part. Run <code>ng add @angular/pwa</code> in the root of your project (the folder where <code>package.json</code> is. The CLI will automagically add <code>@angular/pwa</code> and <code>@angular/service-worker</code> as dependencies in your package.json file, and add some placeholder icons in your <code>assets</code> folder.</p>\n<p>Besides that, it will create a file named <code>ngsw-config.json</code> in your root folder, as well as a <code>manifest.json</code> in your /src folder, and reference both in <code>index.html</code> and <code>app.module.ts</code>. These files are important as you’ll be using them to configure your PWA later.</p>\n<h2>Step 2. Setting up your manifest.json</h2>\n<p>The <code>manifest.json</code> file is the one that tells the browser/OS about your app. You can set the full and short names, theme color, icons, and more. <a href=\"https://developers.google.com/web/fundamentals/web-app-manifest/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">You can find more about its settings here.</a></p>\n<p>Don’t forget to update the auto-generated icons on <code>/assets/icons</code> folder! These are necessary so that your app icon shows up for devices of all DPI settings.</p>\n<h2>Step 3. Setting up ngsw-config.json</h2>\n<p>This file is the one that can configure how your PWA works. You can set up different installation behaviors, as well as handle cache updates. <a href=\"https://angular.io/guide/service-worker-config\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">The Angular documentation has got all options covered here.</a></p>\n<h2>Step 4. Test it out!</h2>\n<p>If you want to test out your app’s new PWA capabilities locally, <code>ng serve</code> won’t help you. Instead, you can run a web server in your machine easily by installing the <code>http-server</code> package from npm:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">shell</div>\n\t<pre class=\"language-shell\"><!-- HTML_TAG_START --><code class=\"language-shell\"><span class=\"token function\">npm</span> i http-server -g</code><!-- HTML_TAG_END --></pre>\n</div>\n<p>Then, compile your app in production mode:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">shell</div>\n\t<pre class=\"language-shell\"><!-- HTML_TAG_START --><code class=\"language-shell\">ng build --prod</code><!-- HTML_TAG_END --></pre>\n</div>\n<p>And finally, start the web server:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">shell</div>\n\t<pre class=\"language-shell\"><!-- HTML_TAG_START --><code class=\"language-shell\">http-server -p <span class=\"token number\">8080</span> -c-1 dist/<span class=\"token operator\">&lt;</span>project-name<span class=\"token operator\">></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<p>Your app should be up and running on <code>http://localhost:8080/</code> (or whichever port you chose). How do you know it’s a PWA? There are a few ways:</p>\n<h3>Check if the service worker is being registered</h3>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/angular-pwa-how-to/Service-Workers-1.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/angular-pwa-how-to/Service-Workers-1.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/angular-pwa-how-to/Service-Workers-1.png\" alt=\"Registered Service Worker\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->On dev console > Application > Service Workers, there should be a registered service worker for your app.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<h3>Use Chrome’s Audits feature to validate it as a PWA</h3>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/angular-pwa-how-to/Audits.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/angular-pwa-how-to/Audits.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/angular-pwa-how-to/Audits.png\" alt=\"Audits\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->On dev console > Audits, test it for Progressive Web Apps.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/angular-pwa-how-to/Passed-Audits.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/angular-pwa-how-to/Passed-Audits.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/angular-pwa-how-to/Passed-Audits.png\" alt=\"Audits passed\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->If everything went alright, you should see the highlighted results on the 'Passed audits' section.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<p>You may see some errors regarding the app not running over HTTPS. Don’t worry, that’s only because it’s running locally.</p>\n<h2>Step 5. Install it!</h2>\n<p>On Chrome, you may also see the option to install the app appear in the URL bar:</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/angular-pwa-how-to/Clipboard_2019-10-27-18-09-45.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/angular-pwa-how-to/Clipboard_2019-10-27-18-09-45.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/angular-pwa-how-to/Clipboard_2019-10-27-18-09-45.png\" alt=\"Chrome prompts you to install PWA\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  \n</picture>\n<p>After this, the app should already open on a separate window, and show up on your OS’s installed apps list!</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/angular-pwa-how-to/Clipboard_2019-10-27-18-11-28.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/angular-pwa-how-to/Clipboard_2019-10-27-18-11-28.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/angular-pwa-how-to/Clipboard_2019-10-27-18-11-28.png\" alt=\"Installed PWA on OS&#39; dock\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->Notice the PWA's own icon on my OS' dock! Success!<!-- HTML_TAG_END --></figcaption>\n</picture>\n<h2>Issues Encountered</h2>\n<p>Even though the proccess is quite straight-forward, I still faced some issues when running it in my app. They were because of Angular tools versions, and I probably had these issues because I’m still running an Angular 6 app (and Angular 7 is out as of now).</p>\n<h3>The <code>ng add @angular/pwa</code> command doesn’t create relevant files</h3>\n<p>This was a <a href=\"https://github.com/angular/angular-cli/issues/11914\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">reported bug</a> on the CLI. I had a bugged version (6.0.8) installed on my app. I updated it by running</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">shell</div>\n\t<pre class=\"language-shell\"><!-- HTML_TAG_START --><code class=\"language-shell\"><span class=\"token function\">npm</span> uninstall @angular/cli --save\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> @angular/cli@latest --save</code><!-- HTML_TAG_END --></pre>\n</div>\n<p>It updated itself to version 7.1.4 and worked flawlessly.</p>\n<p><em>Notice: this is related to the local cli version, the one displayed on your <code>package.json</code> file, not the global one installed in your machine.</em></p>\n<h3>Failed to register a ServiceWorker: A bad HTTP response code (404) was received when fetching the script.</h3>\n<p>This error shows up on the browser console after opening the app running on http-server. It happens because, when running <code>ng build --prod</code>, Angular isn’t sending the service worker’s files along with the ones from the app. You can confirm this by searching for the <code>ngsw-worker.js</code> file on the <code>/dist</code> folder of your app. If it’s not there, then you have this issue.</p>\n<p>This one took me the longest to find out. Another bug related to outdated versions of Angular tools. Simply changing <code>@angular-devkit/build-angular</code> version in devDependencies to <code>~0.10.0</code> solved it.</p>\n<h2>Finalizing</h2>\n<p>I hope you had success on setting up your PWA! Remember that, when published, it will only work if you serve your app through HTTPS.</p>\n<p>Thanks for reading!</p>","css":{"code":".callout-block.svelte-1pi2pyj.svelte-1pi2pyj{--bg-color:var(--callout-background-color);--accent-color:transparent;margin:40px 0 30px;padding:25px 25px;border-top-right-radius:10px;border-bottom-right-radius:10px;background:var(--bg-color);color:var(--text-color);border-left:4px solid var(--accent-color);position:relative}.callout-block.svelte-1pi2pyj .icon-wrapper.svelte-1pi2pyj{position:absolute;width:50px;height:50px;top:0;left:0;transform:translate(calc(-50% - 1.5px), -50%);background:var(--post-page-background-color);padding:8px;border-radius:50%;fill:var(--accent-color);color:var(--accent-color)}.callout-block.info.svelte-1pi2pyj.svelte-1pi2pyj{--bg-color:var(--callout-info-background-color);--accent-color:var(--callout-info-accent-color)}.callout-block.warning.svelte-1pi2pyj.svelte-1pi2pyj{--bg-color:var(--callout-warning-background-color);--accent-color:var(--callout-warning-accent-color)}.callout-block.error.svelte-1pi2pyj.svelte-1pi2pyj{--bg-color:var(--callout-error-background-color);--accent-color:var(--callout-error-accent-color)}.callout-block.success.svelte-1pi2pyj.svelte-1pi2pyj{--bg-color:var(--callout-success-background-color);--accent-color:var(--callout-success-accent-color)}\n.code-block.svelte-qgch0c.svelte-qgch0c{display:block;position:relative;background-color:var(--code-background-color);color:var(--code-text-color);font-family:var(--mono-font);font-size:1rem;line-height:1.33em;border-radius:8px;box-shadow:var(--card-shadow);padding:30px 15px;margin:30px 0}.code-block.svelte-qgch0c pre{overflow-x:auto;scrollbar-color:var(--primary-color) var(--scrollbar-track-color);scrollbar-width:thin;padding-bottom:5px}.code-block.svelte-qgch0c pre::-webkit-scrollbar{height:8px}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb{background:var(--primary-color)}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb:hover{background:var(--primary-light-color)}.code-block.svelte-qgch0c .lang.svelte-qgch0c{position:absolute;right:0;top:-15px;background:inherit;border-radius:8px;padding:5px 10px;z-index:2;font-size:0.85em}.code-block.svelte-qgch0c .filename.svelte-qgch0c{background:inherit;border-top-left-radius:8px;border-top-right-radius:8px;margin-bottom:-2px;padding:5px 10px;position:absolute;left:0px;top:-15px;z-index:1}\npicture.svelte-1gy5t1o.svelte-1gy5t1o{position:relative;width:100%;height:100%}picture.svelte-1gy5t1o img.svelte-1gy5t1o{width:100%;height:100%}","map":null},"head":""},{"slug":"css-scroll-snapping","title":"CSS Scroll Snapping - Improve Scrolling without JS","date":"2020-08-03T00:00:00.000Z","excerpt":"Learn how to snap scrolling positions with CSS only.","tags":["Front-End","CSS","Guide"],"html":"<p>CSS is evolving constantly and the past few years have brought us amazing stuff. It is getting easier to make smooth and complete experiences without having to use JavaScript at all. Case in point: Scroll Snapping.</p>\n<p>It is an easy way to guarantee that users will scroll to the correct portion of your page or of a container. Picture a landing page that is easily swipable/scrollable between sections, or swipable cards. Take in mind how Android’s Recent Apps screen works, for example:</p>\n<p><img src=\"/images/posts/css-scroll-snapping/android-scroll-snapping.gif\" alt=\"Android's Recent Apps screen has scroll mapping between app cards\"></p>\n<p>You can see that Android never allows the end of a scroll to be in a place between cards. There’s a certain threshold that determines that the scroll will snap into the nearest card and put it in the center. All that while still keeping scrolling momentum, allowing you to go from one edge of the list to another in a single scroll if you want to.</p>\n<p>Until recently, you’d have to resort to JavaScript code to make a similar behavior on the web. But now, all you need is CSS, which makes things more performant, consistent and reliable! Browser support is already pretty good, with all major browser engines already supporting it fully. Check out browser support on <a href=\"https://caniuse.com/#feat=css-snappoints\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">caniuse.com</a>.</p>\n<p>I’ve recently added scroll snapping to my own website. You can check it out on the “Work Experience” section in the <a href=\"https://fantinel.dev\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Home page</a>. It’s specially great on mobile!</p>\n<h2>How?</h2>\n<p>There are two main CSS properties that make the magic happen, one for the parent element, and one for its children.</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">css</div>\n\t<pre class=\"language-css\"><!-- HTML_TAG_START --><code class=\"language-css\"><span class=\"token selector\">.parent</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">scroll-snap-type</span><span class=\"token punctuation\">:</span> y mandatory<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token selector\">.child</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">scroll-snap-align</span><span class=\"token punctuation\">:</span> start<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code><!-- HTML_TAG_END --></pre>\n</div>\n<h3>scroll-snap-type</h3>\n<p>This property tells the browser that the parent element uses scroll snapping. We are given some options on how snapping must work. <code>y</code> indicates that the scroll happens vertically, while <code>x</code> means horizontally. We can also pass the <code>mandatory</code> and <code>proximity</code> options. </p>\n<p>We use <code>mandatory</code> to tell that the browser <em>must</em> snap to a snap point when the user stops scrolling. This means that if the next snap point becomes visible on the screen and scrolling stops, the browser will automatically snap to the next one. In the other end, with <code>proximity</code>, things are less strict. The browser will only snap to the next snap point if scrolling gets past a certain threshold. Both values are useful, their use will depend on the situation you’re applying it to.</p>\n<iframe height=\"500\" style=\"width: 100%;\" scrolling=\"no\" title=\"scroll-snap-type: Mandatory vs Proximity\" src=\"https://codepen.io/matfantinel/embed/preview/LYNPdpE?default-tab=result&theme-id=dark\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">See the Pen <a href=\"https://codepen.io/matfantinel/pen/LYNPdpE\">scroll-snap-type: Mandatory vs Proximity</a> by Matheus Fantinel (<a href=\"https://codepen.io/matfantinel\">@matfantinel</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>\n<h3>scroll-snap-align</h3>\n<p>This is a property you add to the children that specifies where the snap points will be in the element. Which means that, whenever the browser automatically snaps the scroll to the element, it will either go to the left/top edge (<code>start</code>), center (<code>center</code>), or right/bottom edge (<code>end</code>) of the element. This property pretty much only makes a difference if the children are bigger than the parent’s display size.</p>\n<h3>scroll-padding and scroll-margin</h3>\n<p>To make things even better, we can use the <code>scroll-padding</code> (for parent) and <code>scroll-margin</code> (for children) properties. They add some space before/after the elements that are only considered when scrolling. The best way to implement them is by trying it out after you build your scroll snapping goodiness.</p>\n<p>You can check the documentation over on <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Scroll_Snap\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Mozilla Developer Network</a> for more info.</p>\n<h2>Wrapping Up</h2>\n<p>Scroll snapping is a sign that the web is maturing. For years we’ve been bloating websites with a lot of JavaScript for very simple visual tasks, and now CSS is slowly evolving to take some space back. It’s an important evolution because Web technologies are being used to build every kind of application, and its native feature set needs to be good enough to compete with native or native-ish counterparts like Flutter, Swift, or Kotlin.</p>\n<p>Thanks for reading!</p>","css":{"code":".code-block.svelte-qgch0c.svelte-qgch0c{display:block;position:relative;background-color:var(--code-background-color);color:var(--code-text-color);font-family:var(--mono-font);font-size:1rem;line-height:1.33em;border-radius:8px;box-shadow:var(--card-shadow);padding:30px 15px;margin:30px 0}.code-block.svelte-qgch0c pre{overflow-x:auto;scrollbar-color:var(--primary-color) var(--scrollbar-track-color);scrollbar-width:thin;padding-bottom:5px}.code-block.svelte-qgch0c pre::-webkit-scrollbar{height:8px}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb{background:var(--primary-color)}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb:hover{background:var(--primary-light-color)}.code-block.svelte-qgch0c .lang.svelte-qgch0c{position:absolute;right:0;top:-15px;background:inherit;border-radius:8px;padding:5px 10px;z-index:2;font-size:0.85em}.code-block.svelte-qgch0c .filename.svelte-qgch0c{background:inherit;border-top-left-radius:8px;border-top-right-radius:8px;margin-bottom:-2px;padding:5px 10px;position:absolute;left:0px;top:-15px;z-index:1}","map":null},"head":""},{"slug":"fixing-favicons","title":"How to fix your Favicons","date":"2021-01-06T00:00:00.000Z","excerpt":"Favicons suck. Luckily, there are ways to make them suck less.","tags":["Front-End","Guide","Favicon"],"html":"<p>Favicons kinda suck. They should be a simple icon that identifies your webpage on a bunch of scenarios, i.e. the icon displayed on the tab besides your website’s title, or the icon on the mobile browser’s bookmarks screen, or the icon on the phone’s home screen.</p>\n<p>Unfortunately, different browsers, OSs, and implementations throughout the years have ended up with many different files and meta tags, that we as developers need to handle otherwise we end up with missing or pixelated icons.</p>\n<h2>Easy Mode</h2>\n<p>I recently met my new best friend, <a href=\"https://realfavicongenerator.net/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Real Favicon Generator</a>. It took all these pains I just wrote about and just made it a breeze to handle. Best of all, it’s customizable!</p>\n<p>You just have to add in your existing favicon image (for best results, a SVG or high-quality PNG are recommended). From then on, the generator will display previews and allow customization of each category of favicon it will generate:</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/fixing-favicons/favicon-generator-customization.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/fixing-favicons/favicon-generator-customization.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/fixing-favicons/favicon-generator-customization.png\" alt=\"Screenshot of Real Favicon Generator&#39;s customization\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->The customization options allow you to set different icons depending on device and OS, and even generate icons with background colors if needed.<!-- HTML_TAG_END --></figcaption>\n</picture>\n<p>At the bottom, you can even set up ways of avoiding caching issues, compression, and scaling algorithms (!). After all that, it will generate them all as set, give you a zip with all the files, and the HTML code to paste on your <code>&lt;head&gt;</code>. You can check the result on this very website (fantinel.dev). The favicon should look fantastic on every device/browser combination.</p>\n<h2>Manual Mode</h2>\n<p>So, there are 5 types of favicons that we need to add, if we want to support every current browser:</p>\n<h3>1. Desktop browsers</h3>\n<ul><li>`favicon.ico`, for IE and any other legacy browsers. Optional if you don&#39;t want to support it;</li>\n  <li>`favicon-16x16.png`, the classic one that displays on the tabs;</li>\n  <li>`favicon-32x32.png`, used on Safari for macOS.</li></ul>\n<h3>2. Android browsers</h3>\n<ul><li>`android-chrome-192x192.png`, shown on the tab card and when added to home screen;</li>\n  <li>`android-chrome-512x512.png`, shown on the splash screen for when the website is installed to the phone. Optional if it&#39;s not a PWA;</li></ul>\n<h3>3. iOS Safari, and some Android browsers like Samsung Internet</h3>\n<ul><li>`apple-touch-icon.png`, a 180x180 file displayed when the website is added to home screen;</li></ul>\n<h3>4. Windows 8/10 start menu (optional)</h3>\n<ul><li>`mstile-150x150.png`, only used when your website is added to the start menu as a tile on Windows 8/10, and when not declared, defaults to `apple-touch-icon.png` instead.</li></ul>\n<h3>5. macOS Safari Pinned Tabs (optional)</h3>\n<ul><li>`safari-pinned-tab.svg` is used when users pin a tab on Safari for macOS. Basically, you declare a monochrome SVG and a theme color. Safari does the rest.</li></ul>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/fixing-favicons/safari-pinned-tabs-demo.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/fixing-favicons/safari-pinned-tabs-demo.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/fixing-favicons/safari-pinned-tabs-demo.png\" alt=\"Demo of Safari pinned tabs favicon behavior\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->How Safari pinned tab favicon works, screenshot of realfavicongenerator.net<!-- HTML_TAG_END --></figcaption>\n</picture>\n<p>With those files, you should be good to go on every single browser, by adding this to your <code>&lt;head&gt;</code>:</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">html</div>\n\t<pre class=\"language-html\"><!-- HTML_TAG_START --><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>apple-touch-icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">sizes</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>180x180<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/apple-touch-icon.png<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image/png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">sizes</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>32x32<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/favicon-32x32.png<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image/png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">sizes</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>16x16<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/favicon-16x16.png?<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>manifest<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/site.webmanifest<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mask-icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/safari-pinned-tab.svg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#000000<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>shortcut icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/favicon.ico<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<h2>Single SVG Favicon</h2>\n<p>Something that’s starting to become a thing is having a single SVG favicon. Theoretically, SVGs are infinitely scalable, and should look good on all sizes. Unfortunately, browser support is not there yet.</p>\n<p><a href=\"https://caniuse.com/link-icon-svg\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Can I Use</a> reports that, currently (January 2021), only recent versions of Firefox and Chromium-based browsers support this feature. This means that Safari, non-Chromium Edge, IE, and some mobile browsers do not support it. Therefore, unless you want your favicon to just not appear in those browsers, you’d still have to use other file formats as well. The downside of this approach is that all favicons would look the same, and you won’t be able to customize and have differently-shaped icons for mobile devices, for example.</p>\n<div class=\"code-block svelte-qgch0c\">\n\t<div class=\"lang svelte-qgch0c\">html</div>\n\t<pre class=\"language-html\"><!-- HTML_TAG_START --><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>favicon.svg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></code><!-- HTML_TAG_END --></pre>\n</div>\n<h2>Wrapping Up</h2>\n<p>Favicons suck. Luckily, there are people working to make it suck less. With the approach presented on this article, your website should be able to display its best favicon on all browsers for years to come.</p>","css":{"code":"picture.svelte-1gy5t1o.svelte-1gy5t1o{position:relative;width:100%;height:100%}picture.svelte-1gy5t1o img.svelte-1gy5t1o{width:100%;height:100%}\n.code-block.svelte-qgch0c.svelte-qgch0c{display:block;position:relative;background-color:var(--code-background-color);color:var(--code-text-color);font-family:var(--mono-font);font-size:1rem;line-height:1.33em;border-radius:8px;box-shadow:var(--card-shadow);padding:30px 15px;margin:30px 0}.code-block.svelte-qgch0c pre{overflow-x:auto;scrollbar-color:var(--primary-color) var(--scrollbar-track-color);scrollbar-width:thin;padding-bottom:5px}.code-block.svelte-qgch0c pre::-webkit-scrollbar{height:8px}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb{background:var(--primary-color)}.code-block.svelte-qgch0c pre::-webkit-scrollbar-thumb:hover{background:var(--primary-light-color)}.code-block.svelte-qgch0c .lang.svelte-qgch0c{position:absolute;right:0;top:-15px;background:inherit;border-radius:8px;padding:5px 10px;z-index:2;font-size:0.85em}.code-block.svelte-qgch0c .filename.svelte-qgch0c{background:inherit;border-top-left-radius:8px;border-top-right-radius:8px;margin-bottom:-2px;padding:5px 10px;position:absolute;left:0px;top:-15px;z-index:1}","map":null},"head":""}]},{"slug":"2020-year-in-review","title":"Looking Back at 2020","date":"2020-12-28T00:00:00.000Z","excerpt":"2020 definitely wasn't our best year... but let's remember what was good about it.","tags":["Meta"],"html":"<p>We all know this year hasn’t been easy. That doesn’t mean it had to be wasted. Regardless of how bad or good it has been for oneself individually, there are always lots of lessons we can learn from what we’ve been through.</p>\n<h2>More Than One Pandemic</h2>\n<p>I think one of the most obvious takeaways from this year is that we are not living just one pandemic (COVID-19), but also one that’s equally worrisome and potentially even deadlier: misinformation. The sheer amount of false information and hatred being spread through both social media and real life is becoming bigger every passing day.</p>\n<p>They can be shared by ignorance, personal or political interest, or simply to “watch the world burn”. It is painful to watch the world go backwards like this; especially when people close to you are affected as well. </p>\n<h2>Mental Health</h2>\n<p>I am sure that regardless of any individual impact the pandemics have had, your mental health must have been impacted by all of this somehow. “Doomscrolling” became a thing, fueled by our time watching and reading terrible news while quarantining in the safety of our homes.</p>\n<p>Initially, I was guilty of that too. Checking many times a day for news, how the pandemic was growing, getting angry at how our leaders were dealing with it, and more. Fortunately, I ended up realizing how harmful that was to my mental health, and that there was no good coming out of it. <span class=\"wrapper svelte-1sgfl7c\">A few minutes a day is enough to catch up on important news, the rest of the day can be spent on myself.</span> So instead of mindlessly scrolling through the doom and gloom on the internet, I started to work on more personal projects, learning new stuff, and playing games.</p>\n<h2>Learning with Personal Projects</h2>\n<p>This year I worked on a few personal projects, and tried different approaches with them so I could learn new things. I didn’t necessarily get really in-depth into most of the things I learned, but the knowledge I got definitely made me a better developer.</p>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/2020-year-in-review/pocket-companion.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/2020-year-in-review/pocket-companion.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/2020-year-in-review/pocket-companion.png\" alt=\"Screenshot of my Pocket Companion app\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  \n</picture>\n<ul><li><a href=\"/ionic-animal-crossing-companion/\">I built an Animal Crossing companion app</a>, with great utilities for when playing the game. I focused a lot on CSS animations for this one, while trying to mimic the official Nintendo app in looks. Learned a lot of things while building it:<ul><li>State management in Angular projects, with <a href=\"https://ngrx.io/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">NgRx</a>;</li>\n<li>Offline functionality with IndexedDB in the browser;</li>\n<li>Improved CSS Animations;</li>\n<li>Improved Ionic and PWA knowledge;</li>\n<li>Improved performance knowledge, with Web Workers, Virtual Scrolling and Lazy Loading;</li></ul></li>\n<li>I redesigned part of my website - I decided to change things up a bit, with an animated (but still lightweight) header background, a new logo, typography improvements, code highlighting, and more. I think it looks more professional than before, and represents my way of building things better as well;</li>\n<li>I built <a href=\"https://github.com/matfantinel/resume\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">my Resume as a Web Component</a> - using StencilJS to build it, and CSS Grid for the layout. Both of those things were new to me, so it was pretty interesting;</li>\n<li>I learned about <a href=\"/css-scroll-snapping/\">CSS Scroll Snapping</a> - a fantastic new CSS capability that helps with reducing the amount of JS in our websites;</li>\n<li>I focused a lot on improving my design skills this year. While I’m still a developer (and plan on continuing to be), designing things is something I find very fun. I learned messing with a few design-related things this year:<ul><li>Edit SVG files in Inkscape - still a lot to learn, but I’m already capable of doing some edits to existing files;</li>\n<li>Build high-fidelity mockups in Figma - being able to design more quickly than I was by building it was great for speeding up the process, and being able to collect feedback earlier was fantastic as well;</li></ul></li>\n<li>I started to contribute a bit more to Open Source projects, like <a href=\"https://elementary.io\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">elementary OS</a>. Mainly with a still-in-progress website rebuild, but also with tons of feedback, issue reports, offering support and participating on discussions.</li></ul>\n<h2>Fun</h2>\n<p>Since I committed myself to stop seeing bad things and focus on good ones, I resorted to at-home entertainment a lot this year. My highlights:</p>\n<h3>TV and Movies</h3>\n<ul><li><p><strong>Mr. Robot</strong> was a jaw-dropping series. I started watching it just this year, and binged to the finale quickly. It was an incredibly powerful series, with genius writing and cinematography. Highly recommend it to anyone, even if not a fan of the tech/hacking theme;</p></li>\n<li><p><strong>Community</strong> was a great find; It’s not a series I had ever heard of when it was still airing, as it never got popular here in Brazil. However, after hearing about it on the web and finding it on Netflix, I’m so glad I started watching it. Loads of fun, full of references, internal jokes and Dan Harmon genius;</p></li></ul>\n<h3>Games</h3>\n<ul><li><p><strong>Animal Crossing New Horizons</strong> was one of the best things to happen this year. It’s far from a perfect game, but it could not have been better for the current situation, providing an easy escape into a world free of our current burdens. It came out at the beginning of quarantine and still provides daily wholesomeness to this day;</p></li>\n<li><p><strong>Dungeons &amp; Dragons</strong> was a surprising source of fun considering my party only played online this year. But even with social distancing, we managed to have a lot of fun. With <a href=\"https://foundryvtt.com/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">FoundryVTT</a>, things are much easier to handle and it’s not much harder to get immersed. I’m even trying to be a DM of my own campaign… I’m not sure it’s going as well as I hoped, but hey, at least I’m trying.</p></li>\n<li><p><strong>Hollow Knight</strong>… I’m so glad I played it. Being a Metroidvania, a genre I’m not really a fan of, it completely hooked me with its worldbuilding, art style, atmosphere and frustratingly satisfying difficulty. A 10/10 for me, for sure;</p></li></ul>\n<picture class=\"svelte-1gy5t1o\"><source srcset=\"/optimized-images/posts/2020-year-in-review/hollow-knight.avif\" type=\"image/avif\">\n\t<source srcset=\"/optimized-images/posts/2020-year-in-review/hollow-knight.webp\" type=\"image/webp\">\n\t<img src=\"/optimized-images/posts/2020-year-in-review/hollow-knight.png\" alt=\"Hollow Knight official artwork\" loading=\"lazy\" decoding=\"async\" class=\"svelte-1gy5t1o\">\n  <figcaption><!-- HTML_TAG_START -->Hollow Knight official artwork, by Team Cherry<!-- HTML_TAG_END --></figcaption>\n</picture>\n<h2>Writing</h2>\n<p>Well, since this is only the third blog post this year, I definitely did not do much writing. I haven’t felt inspired to do so, as I was often busy building nice things or winding down from all the mess that was going on. I’ll repeat my intention of trying to write more next year, of course, since it shouldn’t be hard to do at least more than in 2020.</p>\n<h2>Wrapping Up</h2>\n<p>If you’re still reading, thanks! You’re probably my mom or fiancée. Anyway, 2020 was a very exciting year, even if not in a good way. Let’s hope 2021 is a more boring one. See you then!</p>","css":{"code":".wrapper.svelte-1sgfl7c{background:var(--highlight-marker-url)}\npicture.svelte-1gy5t1o.svelte-1gy5t1o{position:relative;width:100%;height:100%}picture.svelte-1gy5t1o img.svelte-1gy5t1o{width:100%;height:100%}","map":null},"head":"","readingTime":"6 min read","relatedPosts":[{"slug":"2019-year-in-review","title":"Cool things I did and learned in 2019","date":"2019-12-29T00:00:00.000Z","excerpt":"A quick look back at 2019 and what I learned during this year.","tags":["Meta","Open Source"],"html":"<p>Another year went by - Year 6 of my software development journey! I wanted to write this blog post to sum up stuff that I’ve done or learned this year. Keep in mind this is being written off the top of my head - I did not keep a journal throughout the year, but hopefully that’s something I’ll do in 2020.</p>\n<h2>Complexity is your enemy</h2>\n<p>As programmers, we are puzzle-solvers. We like to think outside the box, applying different concepts, putting all of those nice things we’ve learned everywhere. This… often backfires. Most of the time what works best are the simplest solutions, which are also easier to maintain in the future by you or others. I’ve seen this quote somewhere a while back: “Programmers spend the first years of their careers mastering complexity only to realize they should master simplicity instead”. I guess I’m not in my first years anymore?</p>\n<p>I’ve changed my process in writing code to this:</p>\n<ol><li>Understand the problem/goal;</li>\n<li>Draw a simple mental picture of how to solve it (really simplify it);</li>\n<li>Code in small steps and test them as you go;</li>\n<li>Make it work. Code can look quite ugly in this step;</li>\n<li>Optimize it, performance-wise;</li>\n<li>⭐️ Try to explain how it works to yourself (mentally or by text), and then refactor the code to be as simple as possible;</li></ol>\n<p>This last step might make the initial release take a little longer, but oh boy does it pay off whenever you or someone else has to maintain it.</p>\n<h2>Vanilla JS is the best</h2>\n<p>Wait, I’m not saying you shouldn’t use any framework. If it helps you do your work better, go ahead! But “Vanilla” JS has come such a long way and there are so many amazing APIs coming out that using it solely is a valid option again. But more than that, those APIs are built in a way that popular frameworks can use them and communicate with each other with little effort. I’ve covered a bit of this on <a href=\"/microfrontends/\">my Microfrontends post</a>, but there are more APIs that I’ve discovered this year that are pretty awesome:</p>\n<ul><li><a href=\"/microfrontends/\">Web Components/Shadow DOM/Custom Elements</a>;</li>\n<li><a href=\"/web-workers/\">Web Workers</a>;</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">IntersectionObserver</a>;</li>\n<li>Not exactly new, but <a href=\"/what-are-pwas-and-why-should-i-care-about-them/\">PWAs</a> are increasingly awesome;</li></ul>\n<h2>Jekyll</h2>\n<p>I’m a bit late to the party, but this is still something I’ve found out about in 2019. This website/blog you’re seeing is built on top of Jekyll, a tool for making static websites.</p>\n<p>Basically, you have HTML, CSS and JS. Add some special powers for using variables/loops inside that HTML code and ta-da! It works. Jekyll also allows you to create pages from Markdown (.md) files. I use it for blog posts like this one.</p>\n<p>Since it’s a static website, it means the code that’s served to users/visitors is compiled just once and then served as HTML files. No servers or APIs necessary. It’s pretty cool. You can check more about Jekyll <a href=\"https://jekyllrb.com/\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">here</a> and can check the source code for my website <a href=\"https://github.com/matfantinel/matfantinel.github.io\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">here</a>.</p>\n<h2>Open Source is awesome</h2>\n<p>I have released two open-source apps this year for elementaryOS (<a href=\"https://github.com/matfantinel/reminduck\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Reminduck</a> and <a href=\"https://github.com/matfantinel/moneta\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">Moneta</a>). I gotta say, besides the fact that I was learning an entirely different development stack (Vala, GTK, Desktop native), the best “new” thing I enjoyed was doing it in the open.</p>\n<p>These are not complex, commercial apps or anything like that. They’re small utilities that I use on a daily basis and that were made open and released in hopes of helping anyone out there too. And I gotta say, having users like your software is great, but having them actively contribute to it is even better. As soon as they were released/made public, I started receiving pull requests, bug reports, feature requests, and translations from everywhere. <strong>It’s so amazing that people from all over the world took interest in my little idea and helped improve them any way they could.</strong></p>\n<p>But open source is not just other people contributing to your projects, it’s also the opposite! I can improve other people’s apps that I use, I can report bugs openly and help out, or just download the source code, change a few things just to fit my workflow better and run it. And not only apps, I can do that with the entire OS I run on my PC! Not to mention having access to other people’s code allows you to learn from their work and saves you tons of time. Having a problem on your app and you know one that has solved that? Just check out what they did. Copy it, modify it, learn it, ship it. It’s all good.  <span class=\"wrapper svelte-1sgfl7c\">We wouldn’t have to spend so much time reinventing wheels if more of our code was open.</span></p>\n<p>Ah, this website is also open source. I used others as inspiration and took some code snippets too! So can you, feel free to fork it and modify anyway you want.</p>\n<h2>Working remotely is fun, at least for some people</h2>\n<p>In August I started working remotely for the first time. I work from my home in Brazil with people from US, Europe and India. It was definitely refreshing to not have to commute and always be at a place that makes you feel good. Not only that, but the flexible hours allow me to work whenever I want and I can enjoy things that weren’t possible on a regular “9 to 5” routine.</p>\n<p>Although… I end up working the same hours as I did before. It feels “right” to work at this time, and I can enjoy my family at night, since they also work during the day. But it’s nice to have the flexibility to have a break and a coffee somewhere else during the day if needed.</p>\n<p>One of the main things people say about working from home is that sometimes it’s hard to separate work time from free time. Fortunately, I didn’t have that issue. My apartment is quite small, so I don’t have a proper office and instead work on a desk on my bedroom, which means the temptation of lying down and sleeping is always beside me. I’m so thankful I am able to resist that and get work done. And after work hours I can fully disconnect from it and not be stressed out, even if I stay on the computer. I totally understand why some people would not enjoy this and would be less productive, fortunately I was not the case.</p>\n<p>The one thing I’d say is worse in my case is communication. I’m not an extremely social person - therefore I don’t miss chitchat during the day with colleagues or anything like that. It’s just that it’s harder to explain code and concepts over a call or screen share. Not everyone is always readily available to explain things because of different timezones, so you have to figure more things out on your own. It’s still doable though, and the days of “just coding” without interruptions are a dream. The pros outweight the cons.</p>\n<h2>There’s never enough time</h2>\n<p>This year, I started getting into writing more open source software and started working from home. The latter means I can work more on house chores since there’s no commute and I’m always around! Still, there’s never enough time for me to do what I want to do. I took time to write some elementaryOS apps, but I want to do some web apps too, and code some more, and play some games, watch series, movies, hang out with family, work, write on this blog, oof. This isn’t a new discovery by any means, but I feel like it’s getting worse every year. This is adult life, I guess.</p>\n<h2>Wrapping up</h2>\n<p>Anyway, 2019 was a good year. I (of course) hope to do more and better in 2020, hopefully including more articles here. Hope you all have some nice holidays and a great new year!</p>","css":{"code":".wrapper.svelte-1sgfl7c{background:var(--highlight-marker-url)}","map":null},"head":""},{"slug":"purpose-of-this-blog","title":"The purpose of this blog","date":"2019-03-08T00:00:00.000Z","excerpt":"Why does it exist?","tags":["Meta"],"html":"<p>There are many developer blogs out there, probably because developers like to ramble about the tech they enjoy. I’m guilty of that too! This blog was created mainly for that - sharing about development stuff that I like or that I’m learning. </p>\n<p>The purpose is to help myself learn about the subjects better, since there’s no better way to learn than trying to reach someone. Of course, it won’t be made of tutorials only - I intend to write about some theoretical concepts, and maybe tech stuff not related to development.</p>\n<p>I consider myself a tech enthusiast. Which means I like to talk about software and gadgets in a way that most other people would find me annoying. This can be a great place to be able to share this with people that may care, hopefully you!</p>\n<p>I hope to see you here in future posts, and I hope you enjoy reading what I have to say!</p>","css":{"code":"","map":null},"head":""}]}]